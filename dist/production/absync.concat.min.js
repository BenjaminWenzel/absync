!function(){"use strict";angular.module("absync",[])}(),function(e){"use strict";function t(e){var t=this;t.__ioSocket=null,t.__registerLater=[],t.__collections={},t.configure=function(e){var n=e.socket||e;if("function"==typeof n)t.__ioSocket=n();else{if(!(io&&io.Socket&&n instanceof io.Socket))throw new Error("configure() expects input to be a function or a socket.io Socket instance.");t.__ioSocket=n}t.__registerLater.length&&(angular.forEach(t.__registerLater,function(e){this.__handleEntityEvent(e.eventName,e.callback,e.rootScope)}),t.__registerLater=[])},t.collection=function(n,i){if(t.__collections[n])throw new Error("A collection with the name '"+n+"' was already requested. Names for collections must be unique.");t.__collections[n]=o(n,i),e.service(n,t.__collections[n])},t.$get=function(e){return new n(this,e)},t.$get.$inject=["$rootScope"]}function n(e,t){this.__absyncProvider=e,this.__scope=t}function o(e,t){function n(n,o,r,a,c,l){var s=this;r.info("absync service '"+e+"' was instantiated.");var h=t.injector||o,f=h.has(t.model);if(!f)throw new Error("Unable to construct the '"+e+"' service, because the referenced model '"+t.model+"' is not available for injection.");var y="string"==typeof t.model?h.get(t.model):t.model,d=y.serialize||t.serialize||i,p=y.deserialize||t.deserialize||i;s.name=e,s.configuration=t,s.entityCache=[],s.__entityCacheRaw=null,s.__dataAvailableDeferred=a.defer(),s.__objectsAvailableDeferred=a.defer(),s.dataAvailable=s.__dataAvailableDeferred.promise,s.objectsAvailable=s.__objectsAvailableDeferred.promise,s.httpInterface=n,s.logInterface=r,s.scope=c,s.q=a,s.logPrefix="absync:"+e.toLocaleUpperCase()+" ",s.forceEarlyCacheUpdate=!1,s.serializer=d,s.deserializer=p,l.on(t.entityName,s.__onEntityOnWebsocket.bind(s)),l.on(t.collectionName,s.__onCollectionOnWebsocket.bind(s)),c.$on(t.entityName,s.__onEntityReceived.bind(s)),c.$on(t.collectionName,s.__onCollectionReceived.bind(s)),s.dataAvailable.then(s.__onDataAvailable.bind(s))}return n.$inject=["$http","$injector","$log","$q","$rootScope","absync"],n.prototype.__onEntityOnWebsocket=function(e){var n=this;n.scope.$broadcast(t.entityName,e[t.entityName])},n.prototype.__onCollectionOnWebsocket=function(e){var n=this;n.scope.$broadcast(t.collectionName,e[t.collectionName])},n.prototype.__onDataAvailable=function(e){function n(e){o.entityCache.push(o.deserializer(e))}var o=this;e[t.collectionName].forEach(n),o.__objectsAvailableDeferred.resolve(o.entityCache),o.scope.$broadcast("collectionNew",{service:o,cache:o.entityCache})},n.prototype.__onEntityReceived=function(e,t){var n=this,o=t;1===Object.keys(o).length&&o.hasOwnProperty("id")?(n.logInterface.info(n.logPrefix+"Entity was deleted from the server. Updating cache…"),n.__removeEntityFromCache(o.id)):(n.logInterface.debug(n.logPrefix+"Entity was updated on the server. Updating cache…"),n.__updateCacheWithEntity(n.deserializer(o)))},n.prototype.__onCollectionReceived=function(e,t){function n(e){var t=o.deserializer(e);o.__updateCacheWithEntity(t)}for(var o=this,i=t;0<o.entityCache.length;)o.entityCache.length=0;i.forEach(n)},n.prototype.ensureLoaded=function(e){function n(e){if(!e.data[t.collectionName])throw new Error("The response from the server was not in the expected format. It should have a member named '"+t.collectionName+"'.");i.__entityCacheRaw=e.data,i.__dataAvailableDeferred.resolve(e.data)}function o(e){i.logInterface.error(i.logPrefix+"Unable to retrieve the collection from the server.",e),i.__entityCacheRaw=null,i.scope.$emit("absyncError",e)}var i=this;if(e=e===!0,null===i.__entityCacheRaw||e){if(i.__entityCacheRaw=[],!t.collectionName||!t.collectionUri)return i.q.when([]);i.logInterface.info(i.logPrefix+"Retrieving '"+t.collectionName+"' collection…"),i.httpInterface.get(t.collectionUri).then(n,o)}return i.q.all([i.dataAvailable,i.objectsAvailable]).then(function(){return i.entityCache})},n.prototype.read=function(e,n){function o(e){if(!e.data[t.entityName])throw new Error("The response from the server was not in the expected format. It should have a member named '"+t.entityName+"'.");var n=r.deserializer(e.data[t.entityName]);return r.__updateCacheWithEntity(n),n}function i(t){r.logInterface.error(r.logPrefix+"Unable to retrieve entity with ID '"+e+"' from the server.",t),r.scope.$emit("absyncError",t)}var r=this;if(n=n===!0,!n)for(var a=0,c=r.entityCache[0];a<r.entityCache.length;++a,c=r.entityCache[a])if(c.id===e)return r.q.when(c);return r.httpInterface.get(t.entityUri+"/"+e).then(o,i)},n.prototype.update=function(e){function n(e){if(e.data[t.entityName]){var n=i.deserializer(e.data[t.entityName]);return i.forceEarlyCacheUpdate&&i.__updateCacheWithEntity(n),n}throw new Error("The response from the server was not in the expected format. It should have a member named '"+t.entityName+"'.")}function o(e){i.logInterface.error(i.logPrefix+"Unable to store entity on the server.",e),i.logInterface.error(e)}var i=this,r=i.reduceComplex(e),a=i.serializer(r),c={};return c[t.entityName]=a,"undefined"!=typeof e.id?i.httpInterface.put(t.entityUri+"/"+e.id,c).then(n,o):i.httpInterface.post(t.collectionUri,c).then(n,o)},n.prototype.create=n.prototype.update,n.prototype["delete"]=function(e){function n(){return i.__removeEntityFromCache(r)}function o(e,t,n,o){throw i.logInterface.error(e),new Error("Unable to delete entity.")}var i=this,r=e.id;return i.httpInterface["delete"](t.entityUri+"/"+r).success(n).error(o)},n.prototype.__updateCacheWithEntity=function(e){var t=this;t.logInterface.info(t.logPrefix+"Updating entity in cache…");for(var n=!1,o=0,i=t.entityCache[0];o<t.entityCache.length;++o,i=t.entityCache[o])if(i.id==e.id){t.scope.$broadcast("beforeEntityUpdated",{service:t,cache:t.entityCache,entity:t.entityCache[o],updated:e});var r=t.entityCache[o];"function"==typeof r.copyFrom?r.copyFrom(e):angular.extend(r,e),n=!0,t.scope.$broadcast("entityUpdated",{service:t,cache:t.entityCache,entity:t.entityCache[o]});break}n||(t.entityCache.push(e),t.scope.$broadcast("entityNew",{service:t,cache:t.entityCache,entity:e}))},n.prototype.__removeEntityFromCache=function(e){for(var t=this,n=0,o=t.entityCache[0];n<t.entityCache.length;++n,o=t.entityCache[n])if(o.id==e){t.scope.$broadcast("beforeEntityRemoved",{service:t,cache:t.entityCache,entity:o}),t.entityCache.splice(n,1),t.scope.$broadcast("entityRemoved",{service:t,cache:t.entityCache,entity:o});break}},n.prototype.lookupTableById=function(){for(var e=this,t=[],n=0;n<e.entityCache.length;++n)t[e.entityCache[n].id]=e.entityCache[n];return t},n.prototype.reduceComplex=function(e,t){var n=this,o=t?[]:{};for(var i in e)e.hasOwnProperty(i)&&(o[i]=Array.isArray(e[i])?n.reduceComplex(e[i],!0):e[i]&&e[i].id?e[i].id:e[i]);return o},n.prototype.populateComplex=function(e,t,n,o){function i(i,r){function c(n){e[t][r]=n}if("string"!=typeof e[t][r]){if(!o||"object"!=typeof e[t][r]||"string"!=typeof e[t][r].id)return a.q.when(!1);e[t][r]=e[t][r].id}return n.read(e[t][r]).then(c)}function r(n){e[t]=n}var a=this;if(Array.isArray(e[t])){var c=e[t].map(i);return a.q.all(c)}if("string"!=typeof e[t]){if(!o||"object"!=typeof e[t]||"string"!=typeof e[t].id)return a.q.when(!1);e[t]=e[t].id}return n.read(e[t]).then(r)},n}function i(e){return e}angular.module("absync").provider("absync",t),t.$inject=["$provide"],n.prototype.configure=function(e){var t=this.__absyncProvider;t.configure(e)},n.prototype.on=function(e,t){var n=this.__absyncProvider,o=this;return n.__ioSocket?void o.__handleEntityEvent(e,t,o.__scope):void n.__registerLater.push({eventName:e,callback:t,rootScope:n.__scope})},n.prototype.emit=function(e,t,n){var o=this.__absyncProvider;if(!o.__ioSocket)throw new Error("socket.io is not initialized.");var i=this.rootScope;o.__ioSocket.emit(e,t,function(){var e=arguments;i.$apply(function(){n&&n.apply(o.__ioSocket,e)})})},n.prototype.__handleEntityEvent=function(e,t,n){var o=this.__absyncProvider,i=function(){var e=arguments;n.$apply(function(){t.apply(o.__ioSocket,e)})};return o.__ioSocket.on(e,i),function(){o.__ioSocket.removeListener(e,i)}}}(),function(e){"use strict";function t(){return n}function n(t,n,o,i,r,a,c,l){this.model=t,this.collectionUri=n,this.entityUri=o;var s=t.prototype.constructor.name.toLowerCase();this.collectionName=i||s+"s",this.entityName=r||s,this.deserialize=a||e,this.serialize=c||e,this.injector=l||e}angular.module("absync").service("AbsyncServiceConfiguration",t)}();
//# sourceMappingURL=maps/absync.concat.min.js.map
{"version":3,"sources":["_absync.module.js","absync.js","absync.concat.js","cache-service.js","configuration.js"],"names":["angular","module","getAbsyncProvider","$provide","absyncCache","AbsyncProvider","self","this","__provide","__absyncCache","__ioSocket","__registerLater","__collections","AbsyncService","parentProvider","__absyncProvider","provider","$inject","prototype","configure","configuration","socket","isSocket","io","Socket","Error","length","forEach","__registerListener","bind","listener","$get","__handleEntityEvent","eventName","callback","collection","name","service","_absyncProvider","on","push","removeListener","emit","data","apply","arguments","getServiceConstructor","CacheService","$http","$injector","$log","$q","$rootScope","absync","_injector","injector","_injectorHasModel","has","model","_model","get","serializeModel","serialize","serializationNoop","deserializeModel","deserialize","entityCache","__entityCacheRaw","__dataAvailableDeferred","defer","__objectsAvailableDeferred","dataAvailable","promise","objectsAvailable","httpInterface","logInterface","scope","q","logPrefix","toLocaleUpperCase","forceEarlyCacheUpdate","serializer","deserializer","entityName","__onEntityOnWebsocket","collectionName","__onCollectionOnWebsocket","$on","__onEntityReceived","__onCollectionReceived","then","__onDataAvailable","info","message","$broadcast","rawData","deserializeCollectionEntry","rawEntity","resolve","cache","event","args","_entityReceived","Object","keys","hasOwnProperty","__removeEntityFromCache","id","debug","__updateCacheWithEntity","addEntityToCache","entityReceived","deserialized","_collectionReceived","ensureLoaded","forceReload","onCollectionReceived","serverResponse","onCollectionRetrievalFailure","error","$emit","collectionUri","when","all","read","onEntityRetrieved","onEntityRetrievalFailure","entityIndex","entity","entityUri","update","afterEntityStored","newEntity","onEntityStorageFailure","reduced","reduceComplex","serialized","wrappedEntity","put","post","create","onEntityDeleted","entityId","onEntityDeletionFailed","entityToCache","found","updated","targetEntity","copyFrom","extend","splice","lookupTableById","lookupTable","arrayInsteadOfObject","result","propertyName","Array","isArray","populateComplex","force","mapElementToPromise","element","index","onComplexRetrieved","complex","promises","map","constant","AbsyncServiceConfigurationFactory","AbsyncServiceConfiguration","_modelName","constructor","toLowerCase","undefined"],"mappings":"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","file":"absync.concat.min.js","sourcesContent":["angular.module( \"absync\", [] );\n","/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.provider( \"absync\", getAbsyncProvider );\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @ngInject\n */\nfunction getAbsyncProvider( $provide, absyncCache ) {\n\treturn new AbsyncProvider( $provide, absyncCache );\n}\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @constructor\n */\nfunction AbsyncProvider( $provide, absyncCache ) {\n\tvar self = this;\n\n\t// Store a reference to the provide provider.\n\tself.__provide = $provide;\n\t// Store a reference to the cache service constructor.\n\tself.__absyncCache = absyncCache;\n\n\t// A reference to the socket.io instance we're using to receive updates from the server.\n\tself.__ioSocket = null;\n\t// We usually register event listeners on the socket.io instance right away.\n\t// If socket.io was not connected when a service was constructed, we put the registration request\n\t// into this array and register it as soon as socket.io is configured.\n\tself.__registerLater = [];\n\n\t// The collections that absync provides.\n\t// The keys are the names of the collections, the value contains the constructor of\n\t// the respective cache service.\n\tself.__collections = {};\n}\n\n/**\n * Register the configurator on the provider itself to allow early configuration during setup phase.\n * It is recommended to configure absync within a configuration phase of a module.\n * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n * Can also be a constructor for a socket.\n * Can also be an object with a \"socket\" member that provides either of the above.\n */\nAbsyncProvider.prototype.configure = function AbsyncProvider$configure( configuration ) {\n\tvar self = this;\n\n\t// If the configuration has a \"socket\" member, unpack it.\n\tvar socket = configuration.socket || configuration;\n\t// Determine if the socket is an io.Socket.\n\tvar isSocket = io && io.Socket && socket instanceof io.Socket;\n\n\tif( typeof socket == \"function\" ) {\n\t\t// Expect the passed socket to be a constructor.\n\t\tself.__ioSocket = socket();\n\n\t} else if( isSocket ) {\n\t\t// Expect the passed socket to be an io.Socket instance.\n\t\tself.__ioSocket = socket;\n\n\t} else {\n\t\tthrow new Error( \"configure() expects input to be a function or a socket.io Socket instance.\" );\n\t}\n\n\t// Check if services already tried to register listeners, if so, register them now.\n\t// This can happen when a service was constructed before absync was configured.\n\tif( self.__registerLater.length ) {\n\t\tself.__registerLater.forEach( self.__registerListener.bind( self ) );\n\t\tself.__registerLater = [];\n\t}\n};\n\nAbsyncProvider.prototype.__registerListener = function AbsyncProvider$registerListener( listener ) {\n\tvar self = this;\n\tself.$get().__handleEntityEvent( listener.eventName, listener.callback );\n};\n\n/**\n * Request a new synchronized collection.\n * This only registers the intent to use that collection. It will be constructed when it is first used.\n * @param {String} name The name of the collection and service name.\n * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this collection.\n */\nAbsyncProvider.prototype.collection = function AbsyncProvider$collection( name, configuration ) {\n\tvar self = this;\n\n\t// Collection names (and, thus service names) have to be unique.\n\t// We can't create multiple services with the same name.\n\tif( self.__collections[ name ] ) {\n\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for collections must be unique.\" );\n\t}\n\n\t// Register the service configuration.\n\t// __absyncCache will return a constructor for a service with the given configuration.\n\tself.__collections[ name ] = self.__absyncCache( name, configuration );\n\n\t// Register the new service.\n\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\tself.__provide.service( name, self.__collections[ name ] );\n};\n\n/**\n * Register the service factory.\n * @returns {AbsyncService}\n * @ngInject\n */\nAbsyncProvider.prototype.$get = function AbsyncProvider$$get() {\n\treturn new AbsyncService( this );\n};\n\n\n/**\n * The service that is received when injecting \"absync\".\n * This service is primarily used internally to set up the connection between socket.io and the individual\n * caching services.\n * @param {AbsyncProvider|Object} parentProvider The AbsyncProvider that provides this service.\n * @constructor\n */\nfunction AbsyncService( parentProvider ) {\n\tthis.__absyncProvider = parentProvider;\n}\n\n/**\n * Configure the socket.io connection for absync.\n * This configuration of absync should usually be performed through the absyncProvider in the configuration\n * phase of a module.\n * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n */\nAbsyncService.prototype.configure = function AbsyncService$configure( configuration ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\t_absyncProvider.configure( configuration );\n};\n\n/**\n * Register an event listener that is called when a specific entity is received on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @return {Function|null} If the listener could be registered, it returns a function that, when called, removes\n * the event listener.\n * If the listener registration was delayed, null is returned.\n */\nAbsyncService.prototype.on = function AbsyncService$on( eventName, callback ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\tvar self  = this;\n\n\t// If we have no configured socket.io connection yet, remember to register it later.\n\tif( !_absyncProvider.__ioSocket ) {\n\n\t\tif( _absyncProvider.__registerLater.length > 8192 ) {\n\t\t\t// Be defensive, something is probably not right here.\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO: Use promises here, so that we can always return the event listener removal function.\n\t\t_absyncProvider.__registerLater.push( {\n\t\t\teventName : eventName,\n\t\t\tcallback  : callback\n\t\t} );\n\t\treturn null;\n\t}\n\n\treturn self.__handleEntityEvent( eventName, callback );\n};\n\n/**\n * Register an event listener on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @returns {Function}\n */\nAbsyncService.prototype.__handleEntityEvent = function AbsyncService$handleEntityEvent( eventName, callback ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\n\t// Register the callback with socket.io.\n\t_absyncProvider.__ioSocket.on( eventName, callback );\n\n\t// Return a function that removes the listener.\n\treturn function removeListener() {\n\t\t_absyncProvider.__ioSocket.removeListener( eventName, callback );\n\t};\n};\n\n/**\n * Convenience method to allow the user to emit() from the websocket.\n * This is not utilized in absync internally.\n * @param {String} eventName\n * @param {*} data\n * @param {Function} [callback]\n */\nAbsyncService.prototype.emit = function AbsyncService$emit( eventName, data, callback ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\n\tif( !_absyncProvider.__ioSocket ) {\n\t\tthrow new Error( \"socket.io is not initialized.\" );\n\t}\n\n\t_absyncProvider.__ioSocket.emit( eventName, data, function afterEmit() {\n\t\tif( callback ) {\n\t\t\tcallback.apply( _absyncProvider.__ioSocket, arguments );\n\t\t}\n\t} );\n};\n","(function() {\n\"use strict\";\nangular.module( \"absync\", [] );\n}());;(function() {\n\"use strict\";\n/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.provider( \"absync\", getAbsyncProvider );\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @ngInject\n */\nfunction getAbsyncProvider( $provide, absyncCache ) {\n\treturn new AbsyncProvider( $provide, absyncCache );\n}\ngetAbsyncProvider.$inject = [\"$provide\", \"absyncCache\"];\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @constructor\n */\nfunction AbsyncProvider( $provide, absyncCache ) {\n\tvar self = this;\n\n\t// Store a reference to the provide provider.\n\tself.__provide = $provide;\n\t// Store a reference to the cache service constructor.\n\tself.__absyncCache = absyncCache;\n\n\t// A reference to the socket.io instance we're using to receive updates from the server.\n\tself.__ioSocket = null;\n\t// We usually register event listeners on the socket.io instance right away.\n\t// If socket.io was not connected when a service was constructed, we put the registration request\n\t// into this array and register it as soon as socket.io is configured.\n\tself.__registerLater = [];\n\n\t// The collections that absync provides.\n\t// The keys are the names of the collections, the value contains the constructor of\n\t// the respective cache service.\n\tself.__collections = {};\n}\n\n/**\n * Register the configurator on the provider itself to allow early configuration during setup phase.\n * It is recommended to configure absync within a configuration phase of a module.\n * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n * Can also be a constructor for a socket.\n * Can also be an object with a \"socket\" member that provides either of the above.\n */\nAbsyncProvider.prototype.configure = function AbsyncProvider$configure( configuration ) {\n\tvar self = this;\n\n\t// If the configuration has a \"socket\" member, unpack it.\n\tvar socket = configuration.socket || configuration;\n\t// Determine if the socket is an io.Socket.\n\tvar isSocket = io && io.Socket && socket instanceof io.Socket;\n\n\tif( typeof socket == \"function\" ) {\n\t\t// Expect the passed socket to be a constructor.\n\t\tself.__ioSocket = socket();\n\n\t} else if( isSocket ) {\n\t\t// Expect the passed socket to be an io.Socket instance.\n\t\tself.__ioSocket = socket;\n\n\t} else {\n\t\tthrow new Error( \"configure() expects input to be a function or a socket.io Socket instance.\" );\n\t}\n\n\t// Check if services already tried to register listeners, if so, register them now.\n\t// This can happen when a service was constructed before absync was configured.\n\tif( self.__registerLater.length ) {\n\t\tself.__registerLater.forEach( self.__registerListener.bind( self ) );\n\t\tself.__registerLater = [];\n\t}\n};\n\nAbsyncProvider.prototype.__registerListener = function AbsyncProvider$registerListener( listener ) {\n\tvar self = this;\n\tself.$get().__handleEntityEvent( listener.eventName, listener.callback );\n};\n\n/**\n * Request a new synchronized collection.\n * This only registers the intent to use that collection. It will be constructed when it is first used.\n * @param {String} name The name of the collection and service name.\n * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this collection.\n */\nAbsyncProvider.prototype.collection = function AbsyncProvider$collection( name, configuration ) {\n\tvar self = this;\n\n\t// Collection names (and, thus service names) have to be unique.\n\t// We can't create multiple services with the same name.\n\tif( self.__collections[ name ] ) {\n\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for collections must be unique.\" );\n\t}\n\n\t// Register the service configuration.\n\t// __absyncCache will return a constructor for a service with the given configuration.\n\tself.__collections[ name ] = self.__absyncCache( name, configuration );\n\n\t// Register the new service.\n\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\tself.__provide.service( name, self.__collections[ name ] );\n};\n\n/**\n * Register the service factory.\n * @returns {AbsyncService}\n * @ngInject\n */\nAbsyncProvider.prototype.$get = function AbsyncProvider$$get() {\n\treturn new AbsyncService( this );\n};\n\n\n/**\n * The service that is received when injecting \"absync\".\n * This service is primarily used internally to set up the connection between socket.io and the individual\n * caching services.\n * @param {AbsyncProvider|Object} parentProvider The AbsyncProvider that provides this service.\n * @constructor\n */\nfunction AbsyncService( parentProvider ) {\n\tthis.__absyncProvider = parentProvider;\n}\n\n/**\n * Configure the socket.io connection for absync.\n * This configuration of absync should usually be performed through the absyncProvider in the configuration\n * phase of a module.\n * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n */\nAbsyncService.prototype.configure = function AbsyncService$configure( configuration ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\t_absyncProvider.configure( configuration );\n};\n\n/**\n * Register an event listener that is called when a specific entity is received on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @return {Function|null} If the listener could be registered, it returns a function that, when called, removes\n * the event listener.\n * If the listener registration was delayed, null is returned.\n */\nAbsyncService.prototype.on = function AbsyncService$on( eventName, callback ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\tvar self  = this;\n\n\t// If we have no configured socket.io connection yet, remember to register it later.\n\tif( !_absyncProvider.__ioSocket ) {\n\n\t\tif( _absyncProvider.__registerLater.length > 8192 ) {\n\t\t\t// Be defensive, something is probably not right here.\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO: Use promises here, so that we can always return the event listener removal function.\n\t\t_absyncProvider.__registerLater.push( {\n\t\t\teventName : eventName,\n\t\t\tcallback  : callback\n\t\t} );\n\t\treturn null;\n\t}\n\n\treturn self.__handleEntityEvent( eventName, callback );\n};\n\n/**\n * Register an event listener on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @returns {Function}\n */\nAbsyncService.prototype.__handleEntityEvent = function AbsyncService$handleEntityEvent( eventName, callback ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\n\t// Register the callback with socket.io.\n\t_absyncProvider.__ioSocket.on( eventName, callback );\n\n\t// Return a function that removes the listener.\n\treturn function removeListener() {\n\t\t_absyncProvider.__ioSocket.removeListener( eventName, callback );\n\t};\n};\n\n/**\n * Convenience method to allow the user to emit() from the websocket.\n * This is not utilized in absync internally.\n * @param {String} eventName\n * @param {*} data\n * @param {Function} [callback]\n */\nAbsyncService.prototype.emit = function AbsyncService$emit( eventName, data, callback ) {\n\tvar _absyncProvider = this.__absyncProvider;\n\n\tif( !_absyncProvider.__ioSocket ) {\n\t\tthrow new Error( \"socket.io is not initialized.\" );\n\t}\n\n\t_absyncProvider.__ioSocket.emit( eventName, data, function afterEmit() {\n\t\tif( callback ) {\n\t\t\tcallback.apply( _absyncProvider.__ioSocket, arguments );\n\t\t}\n\t} );\n};\n}());;(function() {\n\"use strict\";\n/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.constant( \"absyncCache\", getServiceConstructor );\n\n/**\n * A closure to make the configuration available to the cache service.\n * @param {String} name The name of the service.\n * @param {AbsyncServiceConfiguration} configuration The configuration for this service.\n * @returns {CacheService}\n */\nfunction getServiceConstructor( name, configuration ) {\n\t// There is no code here, other than the CacheService definition, followed by \"return CacheService;\"\n\n\t/**\n\t * This service factory is the core of absync.\n\t * It returns a CacheService instance that is specialized to the given configuration.\n\t * This service will handle keep the stored collection in sync.\n\t * @param {angular.IHttpService|Object} $http\n\t * @param {angular.auto.IInjectorService|Object} $injector\n\t * @param {angular.ILogService|Object} $log\n\t * @param {angular.IQService|Object} $q\n\t * @param {angular.IRootScopeService|Object} $rootScope\n\t * @param {AbsyncService} absync\n\t * @returns {CacheService}\n\t * @ngInject\n\t */\n\tfunction CacheService( $http, $injector, $log, $q, $rootScope, absync ) {\n\t\tvar self = this;\n\n\t\t// Retrieve a reference to the model of the collection that is being cached.\n\t\tvar _injector         = configuration.injector || $injector;\n\t\tvar _injectorHasModel = _injector.has( configuration.model );\n\t\tif( !_injectorHasModel ) {\n\t\t\tthrow new Error( \"Unable to construct the '\" + name + \"' service, because the referenced model '\" + configuration.model + \"' is not available for injection.\" );\n\t\t}\n\t\tvar _model = ( typeof configuration.model === \"string\" ) ? _injector.get( configuration.model ) : configuration.model;\n\n\t\t// Retrieve the serialization methods.\n\t\tvar serializeModel   = _model.serialize || configuration.serialize || serializationNoop;\n\t\tvar deserializeModel = _model.deserialize || configuration.deserialize || serializationNoop;\n\n\t\t// Store configuration.\n\t\tself.name          = name;\n\t\tself.configuration = configuration;\n\n\t\t// The entity cache must be constructed as an empty array, to allow the user to place watchers on it.\n\t\t// We must never replace the cache with a new array, we must always manipulate the existing one.\n\t\t// Otherwise watchers will not behave as the user expects them to.\n\t\t/* @type {Array<configuration.model>} */\n\t\tself.entityCache = [];\n\t\t// The raw cache is data that hasn't been deserialized and is used internally.\n\t\tself.__entityCacheRaw = null;\n\n\t\t// TODO: Using deferreds is an anti-pattern and probably provides no value here.\n\t\tself.__dataAvailableDeferred    = $q.defer();\n\t\tself.__objectsAvailableDeferred = $q.defer();\n\t\t// A promise that is resolved once initial data synchronization has taken place.\n\t\tself.dataAvailable = self.__dataAvailableDeferred.promise;\n\t\t// A promise that is resolved once the received data is extended to models.\n\t\tself.objectsAvailable = self.__objectsAvailableDeferred.promise;\n\n\t\t// Use $http by default and expose it on the service.\n\t\t// This allows the user to set a different, possibly decorated, HTTP interface for this service.\n\t\tself.httpInterface = $http;\n\t\t// Do the same for our logger.\n\t\tself.logInterface = $log;\n\t\t// The scope on which we broadcast all our relevant events.\n\t\tself.scope = $rootScope;\n\t\t// Keep a reference to $q.\n\t\tself.q = $q;\n\n\t\t// Prefix log messages with this string.\n\t\tself.logPrefix = \"absync:\" + name.toLocaleUpperCase() + \" \";\n\n\t\t// If enabled, entities received in response to a create or update API call, will be put into the cache.\n\t\t// Otherwise, absync will wait for them to be published through the websocket channel.\n\t\tself.forceEarlyCacheUpdate = false;\n\n\t\t// Expose the serializer/deserializer so that they can be adjusted at any time.\n\t\tself.serializer   = serializeModel;\n\t\tself.deserializer = deserializeModel;\n\n\t\t// Tell absync to register an event listener for both our entity and its collection.\n\t\t// When we receive these events, we broadcast an equal Angular event on the root scope.\n\t\t// This way the user can already peek at the data (manipulating it is discouraged though).\n\t\tabsync.on( configuration.entityName, self.__onEntityOnWebsocket.bind( self ) );\n\t\tabsync.on( configuration.collectionName, self.__onCollectionOnWebsocket.bind( self ) );\n\n\t\t// Now we listen on the root scope for the same events we're firing above.\n\t\t// This is where our own absync synchronization logic kicks in.\n\t\t$rootScope.$on( configuration.entityName, self.__onEntityReceived.bind( self ) );\n\t\t$rootScope.$on( configuration.collectionName, self.__onCollectionReceived.bind( self ) );\n\n\t\t// Wait for data to be available.\n\t\tself.dataAvailable\n\t\t\t.then( self.__onDataAvailable.bind( self ) );\n\n\t\tself.logInterface.info( self.logPrefix + \"service was instantiated.\" );\n\t}\n\tCacheService.$inject = [\"$http\", \"$injector\", \"$log\", \"$q\", \"$rootScope\", \"absync\"];\n\n\t/**\n\t * Invoked when an entity is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityOnWebsocket = function CacheService$onEntityOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.entityName, message[ configuration.entityName ] );\n\t};\n\n\t/**\n\t * Invoked when a collection is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionOnWebsocket = function CacheService$onCollectionOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.collectionName, message[ configuration.collectionName ] );\n\t};\n\n\t/**\n\t * Event handler for when the initial badge of raw data becomes available.\n\t * @param {Array<Object>} rawData\n\t * @private\n\t */\n\tCacheService.prototype.__onDataAvailable = function CacheService$onDataAvailable( rawData ) {\n\t\tvar self = this;\n\n\t\t// The symbol self.entityCache is expected to be an empty array.\n\t\t// We initialize it in the constructor to an empty array and we don't expect any writes to have\n\t\t// happened to it. In case writes *did* happen, we assume that whoever wrote to it knows what\n\t\t// they're doing.\n\t\trawData[ configuration.collectionName ].forEach( deserializeCollectionEntry );\n\n\t\t// Resolve our \"objects are available\" deferred.\n\t\t// TODO: We could just as well initialize objectAvailable to the return value of this call block.\n\t\tself.__objectsAvailableDeferred.resolve( self.entityCache );\n\n\t\t// Notify the rest of the application about a fresh collection.\n\t\tself.scope.$broadcast( \"collectionNew\", {\n\t\t\tservice : self,\n\t\t\tcache   : self.entityCache\n\t\t} );\n\n\t\tfunction deserializeCollectionEntry( rawEntity ) {\n\t\t\tself.entityCache.push( self.deserializer( rawEntity ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when an entity is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Object} args The raw object as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityReceived = function CacheService$onEntityReceived( event, args ) {\n\t\tvar self   = this;\n\t\tvar _entityReceived = args;\n\n\t\t// Determine if the received record consists ONLY of an id property,\n\t\t// which would mean that this record was deleted from the backend.\n\t\tif( 1 === Object.keys( _entityReceived ).length && _entityReceived.hasOwnProperty( \"id\" ) ) {\n\t\t\tself.logInterface.info( self.logPrefix + \"Entity was deleted from the server. Updating cache…\" );\n\t\t\tself.__removeEntityFromCache( _entityReceived.id );\n\n\t\t} else {\n\t\t\tself.logInterface.debug( self.logPrefix + \"Entity was updated on the server. Updating cache…\" );\n\t\t\tself.__updateCacheWithEntity( self.deserializer( _entityReceived ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when a collection is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Array<Object>} args The raw collection as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionReceived = function CacheService$onCollectionReceived( event, args ) {\n\t\tvar self       = this;\n\t\tvar _collectionReceived = args;\n\n\t\t// When we're receiving a full collection, all data we currently have in our cache is useless.\n\t\t// We reset the length of the array here, because assigning a new array would possibly conflict\n\t\t// with watchers placed on the original object.\n\t\tself.entityCache.length = 0;\n\n\t\t// Deserialize the received data and place the models in our cache.\n\t\t_collectionReceived.forEach( addEntityToCache );\n\n\t\tfunction addEntityToCache( entityReceived ) {\n\t\t\tvar deserialized = self.deserializer( entityReceived );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t}\n\t};\n\n\t/**\n\t * Ensure that the cached collection is retrieved from the server.\n\t * @param {Boolean} [forceReload=false] Should the data be loaded, even if the service already has a local cache?\n\t * @returns {Promise<Array<configuration.model>>|IPromise<Array>|IPromise<void>|Q.Promise<Array<configuration.model>>}\n\t */\n\tCacheService.prototype.ensureLoaded = function CacheService$ensureLoaded( forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\t// We only perform any loading, if we don't have raw data cached yet, or if we're forced.\n\t\tif( null === self.__entityCacheRaw || forceReload ) {\n\t\t\tself.__entityCacheRaw = [];\n\n\t\t\t// If the user did not provide information necessary to work with a collection, immediately return\n\t\t\t// a promise for an empty collection. The user could still use read() to grab individual entities.\n\t\t\tif( !configuration.collectionName || !configuration.collectionUri ) {\n\t\t\t\treturn self.q.when( [] );\n\t\t\t}\n\n\t\t\tself.logInterface.info( self.logPrefix + \"Retrieving '\" + configuration.collectionName + \"' collection…\" );\n\t\t\tself.httpInterface\n\t\t\t\t.get( configuration.collectionUri )\n\t\t\t\t.then( onCollectionReceived, onCollectionRetrievalFailure );\n\t\t}\n\n\t\t// Return a promise that is resolved once the data was read and converted to models.\n\t\t// When the promise is resolved, it will return a reference to the entity cache.\n\t\treturn self.q.all(\n\t\t\t[\n\t\t\t\tself.dataAvailable,\n\t\t\t\tself.objectsAvailable\n\t\t\t] )\n\t\t\t.then( function dataAvailable() {\n\t\t\t\treturn self.entityCache;\n\t\t\t} );\n\n\t\t/**\n\t\t * Invoked when the collection was received from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionReceived( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.collectionName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.collectionName + \"'.\" );\n\t\t\t}\n\n\t\t\tself.__entityCacheRaw = serverResponse.data;\n\t\t\tself.__dataAvailableDeferred.resolve( serverResponse.data );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the collection from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve the collection from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.__entityCacheRaw = null;\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\t\t}\n\t};\n\n\t/**\n\t * Read a single entity from the cache, or load it from the server if required.\n\t * The entity will be placed into the cache.\n\t * @param {String} id The ID of the entity to retrieve.\n\t * @param {Boolean} [forceReload=false] Should the entity be retrieved from the server, even if it is already in the cache?\n\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>}\n\t */\n\tCacheService.prototype.read = function CacheService$read( id, forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\tif( !forceReload ) {\n\t\t\t// Check if the entity is in the cache and return instantly if found.\n\t\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t\t     entityIndex < self.entityCache.length;\n\t\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id === id ) {\n\t\t\t\t\treturn self.q.when( entity );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Grab the entity from the backend.\n\t\treturn self.httpInterface\n\t\t\t.get( configuration.entityUri + \"/\" + id )\n\t\t\t.then( onEntityRetrieved, onEntityRetrievalFailure );\n\n\t\t/**\n\t\t * Invoked when the entity was retrieved from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrieved( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\t// Deserialize the object and place it into the cache.\n\t\t\t// We do not need to check here if the object already exists in the cache.\n\t\t\t// While it could be possible that the same entity is retrieved multiple times, __updateCacheWithEntity\n\t\t\t// will not insert duplicated into the cache.\n\t\t\tvar deserialized = self.deserializer( serverResponse.data[ configuration.entityName ] );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t\treturn deserialized;\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve entity with ID '\" + id + \"' from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\t\t}\n\t};\n\n\t/**\n\t * Updates an entity and persists it to the backend and the cache.\n\t * @param {configuration.model} entity\n\t * @return {Promise<configuration.model>|IPromise<TResult>} A promise that will be resolved with the updated entity.\n\t */\n\tCacheService.prototype.update = function CacheService$update( entity ) {\n\t\tvar self = this;\n\n\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\tvar reduced = self.reduceComplex( entity );\n\t\t// Now serialize the object.\n\t\tvar serialized = self.serializer( reduced );\n\n\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\tvar wrappedEntity                         = {};\n\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\tif( \"undefined\" !== typeof entity.id ) {\n\t\t\treturn self.httpInterface\n\t\t\t\t.put( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\n\t\t} else {\n\t\t\t// Create a new entity\n\t\t\treturn self.httpInterface\n\t\t\t\t.post( configuration.collectionUri, wrappedEntity )\n\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when the entity was stored on the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction afterEntityStored( serverResponse ) {\n\t\t\t// Writing an entity to the backend will usually invoke an update event to be\n\t\t\t// broadcast over websockets, where we would also retrieve the updated record.\n\t\t\t// We still put the updated record we receive here into the cache to ensure early consistency.\n\t\t\t// TODO: This might actually not be optimal. Consider only handling the websocket update.\n\t\t\tif( serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tvar newEntity = self.deserializer( serverResponse.data[ configuration.entityName ] );\n\n\t\t\t\t// If early cache updates are forced, put the return entity into the cache.\n\t\t\t\tif( self.forceEarlyCacheUpdate ) {\n\t\t\t\t\tself.__updateCacheWithEntity( newEntity );\n\t\t\t\t}\n\t\t\t\treturn newEntity;\n\t\t\t}\n\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to store the entity on the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityStorageFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to store entity on the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.logInterface.error( serverResponse );\n\t\t}\n\t};\n\n\t/**\n\t * Creates a new entity and persists it to the backend and the cache.\n\t */\n\tCacheService.prototype.create = CacheService.prototype.update;\n\n\t/**\n\t * Remove an entity from the cache and have it deleted on the backend.\n\t * @param {Object} entity\n\t */\n\tCacheService.prototype.delete = function CacheService$delete( entity ) {\n\t\tvar self = this;\n\n\t\tvar entityId = entity.id;\n\t\treturn self.httpInterface\n\t\t\t.delete( configuration.entityUri + \"/\" + entityId )\n\t\t\t.then( onEntityDeleted )\n\t\t\t.catch( onEntityDeletionFailed );\n\n\t\t/**\n\t\t * Invoked when the entity was deleted from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeleted( serverResponse ) {\n\t\t\treturn self.__removeEntityFromCache( entityId );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to delete the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeletionFailed( serverResponse ) {\n\t\t\tself.logInterface.error( serverResponse.data );\n\t\t\tthrow new Error( \"Unable to delete entity.\" );\n\t\t}\n\t};\n\n\t/**\n\t * Put an entity into the cache or update the existing record if the entity was already in the cache.\n\t * @param {Object} entityToCache\n\t * @private\n\t */\n\tCacheService.prototype.__updateCacheWithEntity = function CacheService$updateCacheWithEntity( entityToCache ) {\n\t\tvar self = this;\n\n\t\tself.logInterface.info( self.logPrefix + \"Updating entity in cache…\" );\n\n\t\tvar found = false;\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == entityToCache.id ) {\n\t\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ],\n\t\t\t\t\t\tupdated : entityToCache\n\t\t\t\t\t} );\n\n\t\t\t\t// Use the \"copyFrom\" method on the entity, if it exists, otherwise use naive approach.\n\t\t\t\tvar targetEntity = self.entityCache[ entityIndex ];\n\t\t\t\tif( typeof targetEntity.copyFrom === \"function\" ) {\n\t\t\t\t\ttargetEntity.copyFrom( entityToCache );\n\n\t\t\t\t} else {\n\t\t\t\t\tangular.extend( targetEntity, entityToCache );\n\t\t\t\t}\n\n\t\t\t\tfound = true;\n\n\t\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ]\n\t\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the entity wasn't found in our records, it's a new entity.\n\t\tif( !found ) {\n\t\t\tself.entityCache.push( entityToCache );\n\t\t\tself.scope.$broadcast( \"entityNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache,\n\t\t\t\tentity  : entityToCache\n\t\t\t} );\n\t\t}\n\t};\n\n\t/**\n\t * Removes an entity from the internal cache. The entity is not removed from the backend.\n\t * @param {String} id The ID of the entity to remove from the cache.\n\t * @private\n\t */\n\tCacheService.prototype.__removeEntityFromCache = function CacheService$removeEntityFromCache( id ) {\n\t\tvar self = this;\n\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == id ) {\n\t\t\t\t// Before removing the entity, allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\n\t\t\t\t// Remove the entity from the cache.\n\t\t\t\tself.entityCache.splice( entityIndex, 1 );\n\n\t\t\t\t// Send another event to allow the user to take note of the removal.\n\t\t\t\tself.scope.$broadcast( \"entityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Retrieve an associative array of all cached entities, which uses the ID of the entity records as the key in the array.\n\t * This is a convenience method that is not utilized internally.\n\t * @returns {Array<configuration.model>}\n\t */\n\tCacheService.prototype.lookupTableById = function CacheService$lookupTableById() {\n\t\tvar self = this;\n\n\t\t// TODO: Keep a copy of the lookup table and only update it when the cached data updates\n\t\tvar lookupTable = [];\n\t\tfor( var entityIndex = 0;\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex ) {\n\t\t\tlookupTable[ self.entityCache[ entityIndex ].id ] = self.entityCache[ entityIndex ];\n\t\t}\n\t\treturn lookupTable;\n\t};\n\n\t/**\n\t * Reduce instances of complex types within an entity with their respective IDs.\n\t * Note that no type checks are being performed. Every nested object with an \"id\" property is treated as a complex type.\n\t * @param {Object} entity The entity that should have its complex member reduced.\n\t * @param {Boolean} [arrayInsteadOfObject=false] true if the manipulated entity is an array; false if it's an object.\n\t * @returns {Object|Array} A copy of the input entity, with complex type instances replaced with their respective ID.\n\t */\n\tCacheService.prototype.reduceComplex = function CacheService$reduceComplex( entity, arrayInsteadOfObject ) {\n\t\tvar self = this;\n\n\t\tvar result = arrayInsteadOfObject ? [] : {};\n\t\tfor( var propertyName in entity ) {\n\t\t\tif( !entity.hasOwnProperty( propertyName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Recurse for nested arrays.\n\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\tresult[ propertyName ] = self.reduceComplex( entity[ propertyName ], true );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Replace complex type with its ID.\n\t\t\tif( entity[ propertyName ] && entity[ propertyName ].id ) {\n\t\t\t\tresult[ propertyName ] = entity[ propertyName ].id;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Just copy over the plain property.\n\t\t\tresult[ propertyName ] = entity[ propertyName ];\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t * Populate references to complex types in an instance.\n\t * @param {Object} entity The entity that should be manipulated.\n\t * @param {String} propertyName The name of the property of entity which should be populated.\n\t * @param {CacheService} cache An instance of another caching service that can provide the complex\n\t * type instances which are being referenced in entity.\n\t * @param {Boolean} [force=false] If true, all complex types will be replaced with references to the\n\t * instances in cache; otherwise, only properties that are string representations of complex type IDs will be replaced.\n\t * @returns {IPromise<TResult>|IPromise<any[]>|IPromise<{}>}\n\t */\n\tCacheService.prototype.populateComplex = function CacheService$populateComplex( entity, propertyName, cache, force ) {\n\t\tvar self = this;\n\n\t\t// If the target property is an array, ...\n\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t// ...map the elements in the array to promises.\n\t\t\tvar promises = entity[ propertyName ].map( mapElementToPromise );\n\n\t\t\treturn self.q.all( promises );\n\n\t\t} else {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ] === \"object\" && typeof entity[ propertyName ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ] = entity[ propertyName ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ] )\n\t\t\t\t.then( onComplexRetrieved );\n\t\t}\n\n\t\tfunction mapElementToPromise( element, index ) {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ][ index ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ][ index ] === \"object\" && typeof entity[ propertyName ][ index ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ][ index ] = entity[ propertyName ][ index ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ][ index ] )\n\t\t\t\t.then( onComplexRetrieved );\n\n\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t// When the complex was retrieved, store it back into the array.\n\t\t\t\tentity[ propertyName ][ index ] = complex;\n\t\t\t}\n\t\t}\n\n\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t// When the complex was retrieved, store it back into the entity.\n\t\t\tentity[ propertyName ] = complex;\n\t\t}\n\t};\n\n\treturn CacheService;\n}\n\nfunction serializationNoop( model ) {\n\treturn model;\n}\n}());;(function() {\n\"use strict\";\nangular\n\t.module( \"absync\" )\n\t.service( \"AbsyncServiceConfiguration\", AbsyncServiceConfigurationFactory );\n\nfunction AbsyncServiceConfigurationFactory() {\n\treturn AbsyncServiceConfiguration;\n}\n\n/**\n * Configuration for an absync service.\n * Using this type is entirely optional. Providing a hash with the same configuration options will work just fine.\n * @param {Object|String} model Reference to a constructor for the model type, or it's name.\n * If a name is given, absync will try to retrieve instances of the type through injection.\n * @param {String} collectionUri The REST API URI where the collection can be found.\n * Must not end with /\n * @param {String} entityUri The REST API URI where single entities out of the collection can be found.\n * Must not end with /\n * @param {String} [collectionName] The name of the collection. Uses the model name suffixed with \"s\" by default.\n * Using the default value is not recommended.\n * @param {String} [entityName] The name of an entity. Uses the model name by default.\n * Using the default value is not recommended.\n * @param {Function} [deserialize] A function that takes an object received from the server and turns it into a model.\n * By default, absync will just store the raw object without extending it to the model type.\n * Deserializers operate on the actual data received from the websocket.\n * @param {Function} [serialize] A function that takes a model and turns it into something the server expects.\n * By default, absync will just send the complete model.\n * Serializers operate on a copy of the actual model, which already had complex members reduced to their IDs.\n * @param {Function} [injector] An injector to use for model instantiation. Uses $injector by default.\n * Usually, you don't need to provide an alternative here.\n * @constructor\n */\nfunction AbsyncServiceConfiguration( model, collectionUri, entityUri, collectionName, entityName, deserialize, serialize, injector ) {\n\tthis.model         = model;\n\tthis.collectionUri = collectionUri;\n\tthis.entityUri     = entityUri;\n\n\tvar _modelName      = model.prototype.constructor.name.toLowerCase();\n\tthis.collectionName = collectionName || ( _modelName + \"s\" );\n\tthis.entityName     = entityName || _modelName;\n\n\tthis.deserialize = deserialize || undefined;\n\tthis.serialize   = serialize || undefined;\n\n\tthis.injector = injector || undefined;\n}\n}());","/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.constant( \"absyncCache\", getServiceConstructor );\n\n/**\n * A closure to make the configuration available to the cache service.\n * @param {String} name The name of the service.\n * @param {AbsyncServiceConfiguration} configuration The configuration for this service.\n * @returns {CacheService}\n */\nfunction getServiceConstructor( name, configuration ) {\n\t// There is no code here, other than the CacheService definition, followed by \"return CacheService;\"\n\n\t/**\n\t * This service factory is the core of absync.\n\t * It returns a CacheService instance that is specialized to the given configuration.\n\t * This service will handle keep the stored collection in sync.\n\t * @param {angular.IHttpService|Object} $http\n\t * @param {angular.auto.IInjectorService|Object} $injector\n\t * @param {angular.ILogService|Object} $log\n\t * @param {angular.IQService|Object} $q\n\t * @param {angular.IRootScopeService|Object} $rootScope\n\t * @param {AbsyncService} absync\n\t * @returns {CacheService}\n\t * @ngInject\n\t */\n\tfunction CacheService( $http, $injector, $log, $q, $rootScope, absync ) {\n\t\tvar self = this;\n\n\t\t// Retrieve a reference to the model of the collection that is being cached.\n\t\tvar _injector         = configuration.injector || $injector;\n\t\tvar _injectorHasModel = _injector.has( configuration.model );\n\t\tif( !_injectorHasModel ) {\n\t\t\tthrow new Error( \"Unable to construct the '\" + name + \"' service, because the referenced model '\" + configuration.model + \"' is not available for injection.\" );\n\t\t}\n\t\tvar _model = ( typeof configuration.model === \"string\" ) ? _injector.get( configuration.model ) : configuration.model;\n\n\t\t// Retrieve the serialization methods.\n\t\tvar serializeModel   = _model.serialize || configuration.serialize || serializationNoop;\n\t\tvar deserializeModel = _model.deserialize || configuration.deserialize || serializationNoop;\n\n\t\t// Store configuration.\n\t\tself.name          = name;\n\t\tself.configuration = configuration;\n\n\t\t// The entity cache must be constructed as an empty array, to allow the user to place watchers on it.\n\t\t// We must never replace the cache with a new array, we must always manipulate the existing one.\n\t\t// Otherwise watchers will not behave as the user expects them to.\n\t\t/* @type {Array<configuration.model>} */\n\t\tself.entityCache = [];\n\t\t// The raw cache is data that hasn't been deserialized and is used internally.\n\t\tself.__entityCacheRaw = null;\n\n\t\t// TODO: Using deferreds is an anti-pattern and probably provides no value here.\n\t\tself.__dataAvailableDeferred    = $q.defer();\n\t\tself.__objectsAvailableDeferred = $q.defer();\n\t\t// A promise that is resolved once initial data synchronization has taken place.\n\t\tself.dataAvailable = self.__dataAvailableDeferred.promise;\n\t\t// A promise that is resolved once the received data is extended to models.\n\t\tself.objectsAvailable = self.__objectsAvailableDeferred.promise;\n\n\t\t// Use $http by default and expose it on the service.\n\t\t// This allows the user to set a different, possibly decorated, HTTP interface for this service.\n\t\tself.httpInterface = $http;\n\t\t// Do the same for our logger.\n\t\tself.logInterface = $log;\n\t\t// The scope on which we broadcast all our relevant events.\n\t\tself.scope = $rootScope;\n\t\t// Keep a reference to $q.\n\t\tself.q = $q;\n\n\t\t// Prefix log messages with this string.\n\t\tself.logPrefix = \"absync:\" + name.toLocaleUpperCase() + \" \";\n\n\t\t// If enabled, entities received in response to a create or update API call, will be put into the cache.\n\t\t// Otherwise, absync will wait for them to be published through the websocket channel.\n\t\tself.forceEarlyCacheUpdate = false;\n\n\t\t// Expose the serializer/deserializer so that they can be adjusted at any time.\n\t\tself.serializer   = serializeModel;\n\t\tself.deserializer = deserializeModel;\n\n\t\t// Tell absync to register an event listener for both our entity and its collection.\n\t\t// When we receive these events, we broadcast an equal Angular event on the root scope.\n\t\t// This way the user can already peek at the data (manipulating it is discouraged though).\n\t\tabsync.on( configuration.entityName, self.__onEntityOnWebsocket.bind( self ) );\n\t\tabsync.on( configuration.collectionName, self.__onCollectionOnWebsocket.bind( self ) );\n\n\t\t// Now we listen on the root scope for the same events we're firing above.\n\t\t// This is where our own absync synchronization logic kicks in.\n\t\t$rootScope.$on( configuration.entityName, self.__onEntityReceived.bind( self ) );\n\t\t$rootScope.$on( configuration.collectionName, self.__onCollectionReceived.bind( self ) );\n\n\t\t// Wait for data to be available.\n\t\tself.dataAvailable\n\t\t\t.then( self.__onDataAvailable.bind( self ) );\n\n\t\tself.logInterface.info( self.logPrefix + \"service was instantiated.\" );\n\t}\n\n\t/**\n\t * Invoked when an entity is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityOnWebsocket = function CacheService$onEntityOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.entityName, message[ configuration.entityName ] );\n\t};\n\n\t/**\n\t * Invoked when a collection is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionOnWebsocket = function CacheService$onCollectionOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.collectionName, message[ configuration.collectionName ] );\n\t};\n\n\t/**\n\t * Event handler for when the initial badge of raw data becomes available.\n\t * @param {Array<Object>} rawData\n\t * @private\n\t */\n\tCacheService.prototype.__onDataAvailable = function CacheService$onDataAvailable( rawData ) {\n\t\tvar self = this;\n\n\t\t// The symbol self.entityCache is expected to be an empty array.\n\t\t// We initialize it in the constructor to an empty array and we don't expect any writes to have\n\t\t// happened to it. In case writes *did* happen, we assume that whoever wrote to it knows what\n\t\t// they're doing.\n\t\trawData[ configuration.collectionName ].forEach( deserializeCollectionEntry );\n\n\t\t// Resolve our \"objects are available\" deferred.\n\t\t// TODO: We could just as well initialize objectAvailable to the return value of this call block.\n\t\tself.__objectsAvailableDeferred.resolve( self.entityCache );\n\n\t\t// Notify the rest of the application about a fresh collection.\n\t\tself.scope.$broadcast( \"collectionNew\", {\n\t\t\tservice : self,\n\t\t\tcache   : self.entityCache\n\t\t} );\n\n\t\tfunction deserializeCollectionEntry( rawEntity ) {\n\t\t\tself.entityCache.push( self.deserializer( rawEntity ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when an entity is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Object} args The raw object as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityReceived = function CacheService$onEntityReceived( event, args ) {\n\t\tvar self   = this;\n\t\tvar _entityReceived = args;\n\n\t\t// Determine if the received record consists ONLY of an id property,\n\t\t// which would mean that this record was deleted from the backend.\n\t\tif( 1 === Object.keys( _entityReceived ).length && _entityReceived.hasOwnProperty( \"id\" ) ) {\n\t\t\tself.logInterface.info( self.logPrefix + \"Entity was deleted from the server. Updating cache…\" );\n\t\t\tself.__removeEntityFromCache( _entityReceived.id );\n\n\t\t} else {\n\t\t\tself.logInterface.debug( self.logPrefix + \"Entity was updated on the server. Updating cache…\" );\n\t\t\tself.__updateCacheWithEntity( self.deserializer( _entityReceived ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when a collection is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Array<Object>} args The raw collection as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionReceived = function CacheService$onCollectionReceived( event, args ) {\n\t\tvar self       = this;\n\t\tvar _collectionReceived = args;\n\n\t\t// When we're receiving a full collection, all data we currently have in our cache is useless.\n\t\t// We reset the length of the array here, because assigning a new array would possibly conflict\n\t\t// with watchers placed on the original object.\n\t\tself.entityCache.length = 0;\n\n\t\t// Deserialize the received data and place the models in our cache.\n\t\t_collectionReceived.forEach( addEntityToCache );\n\n\t\tfunction addEntityToCache( entityReceived ) {\n\t\t\tvar deserialized = self.deserializer( entityReceived );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t}\n\t};\n\n\t/**\n\t * Ensure that the cached collection is retrieved from the server.\n\t * @param {Boolean} [forceReload=false] Should the data be loaded, even if the service already has a local cache?\n\t * @returns {Promise<Array<configuration.model>>|IPromise<Array>|IPromise<void>|Q.Promise<Array<configuration.model>>}\n\t */\n\tCacheService.prototype.ensureLoaded = function CacheService$ensureLoaded( forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\t// We only perform any loading, if we don't have raw data cached yet, or if we're forced.\n\t\tif( null === self.__entityCacheRaw || forceReload ) {\n\t\t\tself.__entityCacheRaw = [];\n\n\t\t\t// If the user did not provide information necessary to work with a collection, immediately return\n\t\t\t// a promise for an empty collection. The user could still use read() to grab individual entities.\n\t\t\tif( !configuration.collectionName || !configuration.collectionUri ) {\n\t\t\t\treturn self.q.when( [] );\n\t\t\t}\n\n\t\t\tself.logInterface.info( self.logPrefix + \"Retrieving '\" + configuration.collectionName + \"' collection…\" );\n\t\t\tself.httpInterface\n\t\t\t\t.get( configuration.collectionUri )\n\t\t\t\t.then( onCollectionReceived, onCollectionRetrievalFailure );\n\t\t}\n\n\t\t// Return a promise that is resolved once the data was read and converted to models.\n\t\t// When the promise is resolved, it will return a reference to the entity cache.\n\t\treturn self.q.all(\n\t\t\t[\n\t\t\t\tself.dataAvailable,\n\t\t\t\tself.objectsAvailable\n\t\t\t] )\n\t\t\t.then( function dataAvailable() {\n\t\t\t\treturn self.entityCache;\n\t\t\t} );\n\n\t\t/**\n\t\t * Invoked when the collection was received from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionReceived( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.collectionName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.collectionName + \"'.\" );\n\t\t\t}\n\n\t\t\tself.__entityCacheRaw = serverResponse.data;\n\t\t\tself.__dataAvailableDeferred.resolve( serverResponse.data );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the collection from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve the collection from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.__entityCacheRaw = null;\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\t\t}\n\t};\n\n\t/**\n\t * Read a single entity from the cache, or load it from the server if required.\n\t * The entity will be placed into the cache.\n\t * @param {String} id The ID of the entity to retrieve.\n\t * @param {Boolean} [forceReload=false] Should the entity be retrieved from the server, even if it is already in the cache?\n\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>}\n\t */\n\tCacheService.prototype.read = function CacheService$read( id, forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\tif( !forceReload ) {\n\t\t\t// Check if the entity is in the cache and return instantly if found.\n\t\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t\t     entityIndex < self.entityCache.length;\n\t\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id === id ) {\n\t\t\t\t\treturn self.q.when( entity );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Grab the entity from the backend.\n\t\treturn self.httpInterface\n\t\t\t.get( configuration.entityUri + \"/\" + id )\n\t\t\t.then( onEntityRetrieved, onEntityRetrievalFailure );\n\n\t\t/**\n\t\t * Invoked when the entity was retrieved from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrieved( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\t// Deserialize the object and place it into the cache.\n\t\t\t// We do not need to check here if the object already exists in the cache.\n\t\t\t// While it could be possible that the same entity is retrieved multiple times, __updateCacheWithEntity\n\t\t\t// will not insert duplicated into the cache.\n\t\t\tvar deserialized = self.deserializer( serverResponse.data[ configuration.entityName ] );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t\treturn deserialized;\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve entity with ID '\" + id + \"' from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\t\t}\n\t};\n\n\t/**\n\t * Updates an entity and persists it to the backend and the cache.\n\t * @param {configuration.model} entity\n\t * @return {Promise<configuration.model>|IPromise<TResult>} A promise that will be resolved with the updated entity.\n\t */\n\tCacheService.prototype.update = function CacheService$update( entity ) {\n\t\tvar self = this;\n\n\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\tvar reduced = self.reduceComplex( entity );\n\t\t// Now serialize the object.\n\t\tvar serialized = self.serializer( reduced );\n\n\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\tvar wrappedEntity                         = {};\n\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\tif( \"undefined\" !== typeof entity.id ) {\n\t\t\treturn self.httpInterface\n\t\t\t\t.put( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\n\t\t} else {\n\t\t\t// Create a new entity\n\t\t\treturn self.httpInterface\n\t\t\t\t.post( configuration.collectionUri, wrappedEntity )\n\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when the entity was stored on the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction afterEntityStored( serverResponse ) {\n\t\t\t// Writing an entity to the backend will usually invoke an update event to be\n\t\t\t// broadcast over websockets, where we would also retrieve the updated record.\n\t\t\t// We still put the updated record we receive here into the cache to ensure early consistency.\n\t\t\t// TODO: This might actually not be optimal. Consider only handling the websocket update.\n\t\t\tif( serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tvar newEntity = self.deserializer( serverResponse.data[ configuration.entityName ] );\n\n\t\t\t\t// If early cache updates are forced, put the return entity into the cache.\n\t\t\t\tif( self.forceEarlyCacheUpdate ) {\n\t\t\t\t\tself.__updateCacheWithEntity( newEntity );\n\t\t\t\t}\n\t\t\t\treturn newEntity;\n\t\t\t}\n\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to store the entity on the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityStorageFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to store entity on the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.logInterface.error( serverResponse );\n\t\t}\n\t};\n\n\t/**\n\t * Creates a new entity and persists it to the backend and the cache.\n\t */\n\tCacheService.prototype.create = CacheService.prototype.update;\n\n\t/**\n\t * Remove an entity from the cache and have it deleted on the backend.\n\t * @param {Object} entity\n\t */\n\tCacheService.prototype.delete = function CacheService$delete( entity ) {\n\t\tvar self = this;\n\n\t\tvar entityId = entity.id;\n\t\treturn self.httpInterface\n\t\t\t.delete( configuration.entityUri + \"/\" + entityId )\n\t\t\t.then( onEntityDeleted )\n\t\t\t.catch( onEntityDeletionFailed );\n\n\t\t/**\n\t\t * Invoked when the entity was deleted from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeleted( serverResponse ) {\n\t\t\treturn self.__removeEntityFromCache( entityId );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to delete the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeletionFailed( serverResponse ) {\n\t\t\tself.logInterface.error( serverResponse.data );\n\t\t\tthrow new Error( \"Unable to delete entity.\" );\n\t\t}\n\t};\n\n\t/**\n\t * Put an entity into the cache or update the existing record if the entity was already in the cache.\n\t * @param {Object} entityToCache\n\t * @private\n\t */\n\tCacheService.prototype.__updateCacheWithEntity = function CacheService$updateCacheWithEntity( entityToCache ) {\n\t\tvar self = this;\n\n\t\tself.logInterface.info( self.logPrefix + \"Updating entity in cache…\" );\n\n\t\tvar found = false;\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == entityToCache.id ) {\n\t\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ],\n\t\t\t\t\t\tupdated : entityToCache\n\t\t\t\t\t} );\n\n\t\t\t\t// Use the \"copyFrom\" method on the entity, if it exists, otherwise use naive approach.\n\t\t\t\tvar targetEntity = self.entityCache[ entityIndex ];\n\t\t\t\tif( typeof targetEntity.copyFrom === \"function\" ) {\n\t\t\t\t\ttargetEntity.copyFrom( entityToCache );\n\n\t\t\t\t} else {\n\t\t\t\t\tangular.extend( targetEntity, entityToCache );\n\t\t\t\t}\n\n\t\t\t\tfound = true;\n\n\t\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ]\n\t\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the entity wasn't found in our records, it's a new entity.\n\t\tif( !found ) {\n\t\t\tself.entityCache.push( entityToCache );\n\t\t\tself.scope.$broadcast( \"entityNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache,\n\t\t\t\tentity  : entityToCache\n\t\t\t} );\n\t\t}\n\t};\n\n\t/**\n\t * Removes an entity from the internal cache. The entity is not removed from the backend.\n\t * @param {String} id The ID of the entity to remove from the cache.\n\t * @private\n\t */\n\tCacheService.prototype.__removeEntityFromCache = function CacheService$removeEntityFromCache( id ) {\n\t\tvar self = this;\n\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == id ) {\n\t\t\t\t// Before removing the entity, allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\n\t\t\t\t// Remove the entity from the cache.\n\t\t\t\tself.entityCache.splice( entityIndex, 1 );\n\n\t\t\t\t// Send another event to allow the user to take note of the removal.\n\t\t\t\tself.scope.$broadcast( \"entityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Retrieve an associative array of all cached entities, which uses the ID of the entity records as the key in the array.\n\t * This is a convenience method that is not utilized internally.\n\t * @returns {Array<configuration.model>}\n\t */\n\tCacheService.prototype.lookupTableById = function CacheService$lookupTableById() {\n\t\tvar self = this;\n\n\t\t// TODO: Keep a copy of the lookup table and only update it when the cached data updates\n\t\tvar lookupTable = [];\n\t\tfor( var entityIndex = 0;\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex ) {\n\t\t\tlookupTable[ self.entityCache[ entityIndex ].id ] = self.entityCache[ entityIndex ];\n\t\t}\n\t\treturn lookupTable;\n\t};\n\n\t/**\n\t * Reduce instances of complex types within an entity with their respective IDs.\n\t * Note that no type checks are being performed. Every nested object with an \"id\" property is treated as a complex type.\n\t * @param {Object} entity The entity that should have its complex member reduced.\n\t * @param {Boolean} [arrayInsteadOfObject=false] true if the manipulated entity is an array; false if it's an object.\n\t * @returns {Object|Array} A copy of the input entity, with complex type instances replaced with their respective ID.\n\t */\n\tCacheService.prototype.reduceComplex = function CacheService$reduceComplex( entity, arrayInsteadOfObject ) {\n\t\tvar self = this;\n\n\t\tvar result = arrayInsteadOfObject ? [] : {};\n\t\tfor( var propertyName in entity ) {\n\t\t\tif( !entity.hasOwnProperty( propertyName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Recurse for nested arrays.\n\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\tresult[ propertyName ] = self.reduceComplex( entity[ propertyName ], true );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Replace complex type with its ID.\n\t\t\tif( entity[ propertyName ] && entity[ propertyName ].id ) {\n\t\t\t\tresult[ propertyName ] = entity[ propertyName ].id;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Just copy over the plain property.\n\t\t\tresult[ propertyName ] = entity[ propertyName ];\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t * Populate references to complex types in an instance.\n\t * @param {Object} entity The entity that should be manipulated.\n\t * @param {String} propertyName The name of the property of entity which should be populated.\n\t * @param {CacheService} cache An instance of another caching service that can provide the complex\n\t * type instances which are being referenced in entity.\n\t * @param {Boolean} [force=false] If true, all complex types will be replaced with references to the\n\t * instances in cache; otherwise, only properties that are string representations of complex type IDs will be replaced.\n\t * @returns {IPromise<TResult>|IPromise<any[]>|IPromise<{}>}\n\t */\n\tCacheService.prototype.populateComplex = function CacheService$populateComplex( entity, propertyName, cache, force ) {\n\t\tvar self = this;\n\n\t\t// If the target property is an array, ...\n\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t// ...map the elements in the array to promises.\n\t\t\tvar promises = entity[ propertyName ].map( mapElementToPromise );\n\n\t\t\treturn self.q.all( promises );\n\n\t\t} else {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ] === \"object\" && typeof entity[ propertyName ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ] = entity[ propertyName ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ] )\n\t\t\t\t.then( onComplexRetrieved );\n\t\t}\n\n\t\tfunction mapElementToPromise( element, index ) {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ][ index ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ][ index ] === \"object\" && typeof entity[ propertyName ][ index ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ][ index ] = entity[ propertyName ][ index ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ][ index ] )\n\t\t\t\t.then( onComplexRetrieved );\n\n\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t// When the complex was retrieved, store it back into the array.\n\t\t\t\tentity[ propertyName ][ index ] = complex;\n\t\t\t}\n\t\t}\n\n\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t// When the complex was retrieved, store it back into the entity.\n\t\t\tentity[ propertyName ] = complex;\n\t\t}\n\t};\n\n\treturn CacheService;\n}\n\nfunction serializationNoop( model ) {\n\treturn model;\n}\n","angular\n\t.module( \"absync\" )\n\t.service( \"AbsyncServiceConfiguration\", AbsyncServiceConfigurationFactory );\n\nfunction AbsyncServiceConfigurationFactory() {\n\treturn AbsyncServiceConfiguration;\n}\n\n/**\n * Configuration for an absync service.\n * Using this type is entirely optional. Providing a hash with the same configuration options will work just fine.\n * @param {Object|String} model Reference to a constructor for the model type, or it's name.\n * If a name is given, absync will try to retrieve instances of the type through injection.\n * @param {String} collectionUri The REST API URI where the collection can be found.\n * Must not end with /\n * @param {String} entityUri The REST API URI where single entities out of the collection can be found.\n * Must not end with /\n * @param {String} [collectionName] The name of the collection. Uses the model name suffixed with \"s\" by default.\n * Using the default value is not recommended.\n * @param {String} [entityName] The name of an entity. Uses the model name by default.\n * Using the default value is not recommended.\n * @param {Function} [deserialize] A function that takes an object received from the server and turns it into a model.\n * By default, absync will just store the raw object without extending it to the model type.\n * Deserializers operate on the actual data received from the websocket.\n * @param {Function} [serialize] A function that takes a model and turns it into something the server expects.\n * By default, absync will just send the complete model.\n * Serializers operate on a copy of the actual model, which already had complex members reduced to their IDs.\n * @param {Function} [injector] An injector to use for model instantiation. Uses $injector by default.\n * Usually, you don't need to provide an alternative here.\n * @constructor\n */\nfunction AbsyncServiceConfiguration( model, collectionUri, entityUri, collectionName, entityName, deserialize, serialize, injector ) {\n\tthis.model         = model;\n\tthis.collectionUri = collectionUri;\n\tthis.entityUri     = entityUri;\n\n\tvar _modelName      = model.prototype.constructor.name.toLowerCase();\n\tthis.collectionName = collectionName || ( _modelName + \"s\" );\n\tthis.entityName     = entityName || _modelName;\n\n\tthis.deserialize = deserialize || undefined;\n\tthis.serialize   = serialize || undefined;\n\n\tthis.injector = injector || undefined;\n}\n"],"sourceRoot":"/source/"}
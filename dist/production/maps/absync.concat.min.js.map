{"version":3,"sources":["_absync.module.js","absync.js","absync.concat.js","cache-service.js","configuration.js","noop-log.js","uncached.js"],"names":["angular","module","getAbsyncProvider","$injector","$provide","absyncCache","AbsyncProvider","self","this","__injector","__provide","__absyncCache","__ioSocket","__registerLater","__listeners","__collections","__entities","debug","undefined","$inject","provider","prototype","configure","configuration","socket","isSocket","io","Socket","Error","length","forEach","__registerListener","bind","collection","entity","disconnect","disconnectSocket","listener","unregister","push","__handleEntityEvent","eventName","callback","name","constructor","service","on","removeListener","emit","data","apply","arguments","$get","getServiceConstructor","CacheService","$http","$log","$q","$rootScope","absyncNoopLog","absync","absyncUncachedFilter","_injector","injector","_injectorHasModel","has","model","_model","get","serializeModel","serialize","serializationNoop","deserializeModel","deserialize","entityCache","collectionName","__entityCacheRaw","enableRequestCache","__requestCache","allowBrowserCache","merge","extend","sync","request","__uncached","httpInterface","logInterface","scope","q","logPrefix","toLocaleUpperCase","forceEarlyCacheUpdate","throwFailures","serializer","deserializer","entityName","__onEntityOnWebsocket","__onCollectionOnWebsocket","$on","__onEntityReceived","__onCollectionReceived","info","afterEntityStored","returnResult","serverResponse","rawEntity","newEntity","__updateCacheWithEntity","onEntityStorageFailure","error","$emit","message","$broadcast","__onDataAvailable","rawData","deserializeCollectionEntry","Array","isArray","cache","deserialized","event","args","_entityReceived","Object","keys","hasOwnProperty","__removeEntityFromCache","id","addEntityToCache","entityReceived","_collectionReceived","ensureLoaded","forceReload","onCollectionReceived","splice","onCollectionRetrievalFailure","onSingleEntityReceived","onSingleEntityRetrievalFailure","collectionUri","then","entityUri","when","seed","read","onEntityRetrieved","onEntityRetrievalFailure","entityIndex","__requestEntity","removeRequestFromCache","requestUri","update","reduced","reduceComplex","serialized","wrappedEntity","put","post","patch","create","onEntityDeleted","entityId","onEntityDeletionFailed","entityToCache","updated","copyFrom","found","targetEntity","lookupTableById","lookupTable","arrayInsteadOfObject","result","propertyName","populateComplex","force","mapElementToPromise","element","index","onComplexRetrieved","complex","promises","map","all","reset","constant","AbsyncServiceConfigurationFactory","AbsyncServiceConfiguration","_modelName","toLowerCase","noop","uncachedFilterProvider","uncachedFilter","url","delimiter","indexOf","discriminator","Date","getTime","filter"],"mappings":"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","file":"absync.concat.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* globals angular */\n\nangular.module( \"absync\", [] );\n}());","(function() {\n\"use strict\";\n/* globals angular, io */\n\n/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.provider( \"absync\", getAbsyncProvider );\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IInjectorService|Object} $injector The $injector provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @ngInject\n */\nfunction getAbsyncProvider( $injector, $provide, absyncCache ) {\n\treturn new AbsyncProvider( $injector, $provide, absyncCache );\n}\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IInjectorService|Object} $injector The $injector provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider.\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @constructor\n */\nfunction AbsyncProvider( $injector, $provide, absyncCache ) {\n\tvar self = this;\n\n\t// Store a reference to the inject provider.\n\tself.__injector    = $injector;\n\t// Store a reference to the provide provider.\n\tself.__provide     = $provide;\n\t// Store a reference to the cache service constructor.\n\tself.__absyncCache = absyncCache;\n\n\t// A reference to the socket.io instance we're using to receive updates from the server.\n\tself.__ioSocket = null;\n\t// We usually register event listeners on the socket.io instance right away.\n\t// If socket.io was not connected when a service was constructed, we put the registration request\n\t// into this array and register it as soon as socket.io is configured.\n\tself.__registerLater = [];\n\t// References to all registered event listeners.\n\tself.__listeners     = [];\n\n\t// The collections that absync provides.\n\t// The keys are the names of the collections, the value contains the constructor of\n\t// the respective cache service.\n\tself.__collections = {};\n\n\t// The entities that absync provides.\n\t// The keys are the names of the entities, the value contains the constructor of\n\t// the respective cache service.\n\tself.__entities = {};\n\n\t// Debug should either be set through a configure() call, or on instantiated services.\n\tself.debug = undefined;\n}\n\n/**\n * Register the configurator on the provider itself to allow early configuration during setup phase.\n * It is recommended to configure absync within a configuration phase of a module.\n * @param {Object} configuration The configuration for the absync provider.\n * Can have a member `socket`, pointing to the socket.io instance or constructor to use.\n * Can have a member `debug`, enabling debugging, if set to true.\n */\nAbsyncProvider.prototype.configure = function AbsyncProvider$configure( configuration ) {\n\tvar self = this;\n\n\tif( typeof configuration.socket !== \"undefined\" ) {\n\t\tvar socket   = configuration.socket;\n\t\t// Determine if the socket is an io.Socket.\n\t\tvar isSocket = typeof io !== \"undefined\" && io.Socket && socket instanceof io.Socket;\n\n\t\tif( typeof socket == \"function\" ) {\n\t\t\t// Expect the passed socket to be a constructor.\n\t\t\tself.__ioSocket = new socket();// jscs:ignore requireCapitalizedConstructors\n\n\t\t} else if( isSocket ) {\n\t\t\t// Expect the passed socket to be an io.Socket instance.\n\t\t\tself.__ioSocket = socket;\n\n\t\t} else {\n\t\t\tthrow new Error( \"configure() expects input to be a function or a socket.io Socket instance.\" );\n\t\t}\n\n\t\t// Check if services already tried to register listeners, if so, register them now.\n\t\t// This can happen when a service was constructed before absync was configured.\n\t\tif( self.__registerLater.length ) {\n\t\t\tangular.forEach( self.__registerLater, self.__registerListener.bind( self ) );\n\t\t\tself.__registerLater = [];\n\t\t}\n\t}\n\n\tif( typeof configuration.debug !== \"undefined\" ) {\n\t\tself.debug = configuration.debug || false;\n\t}\n\n\tif( self.debug ) {\n\t\tangular.forEach( self.__collections, function enableDebugging( collection ) {\n\t\t\tcollection.configuration.debug = true;\n\t\t} );\n\t\tangular.forEach( self.__entities, function enableDebugging( entity ) {\n\t\t\tentity.configuration.debug = true;\n\t\t} );\n\t}\n};\n\n/**\n * Detaches absync from the websocket.\n * @param {Boolean} [disconnectSocket=false] Should the underlying socket.io connection be disconnected as well?\n */\nAbsyncProvider.prototype.disconnect = function AbsyncProvider$disconnect( disconnectSocket ) {\n\tvar self = this;\n\n\tdisconnectSocket = disconnectSocket || false;\n\n\tangular.forEach( self.__listeners, function unregisterListener( listener ) {\n\t\tlistener.unregister();\n\t\tdelete listener.unregister;\n\t\tself.__registerLater.push( listener );\n\t} );\n\n\tif( disconnectSocket ) {\n\t\tself.__ioSocket.disconnect();\n\t\tself.__ioSocket = null;\n\t}\n};\n\n/**\n * Register an event listener with socket.io.\n * @param {Object} listener\n * @private\n */\nAbsyncProvider.prototype.__registerListener = function AbsyncProvider$registerListener( listener ) {\n\tvar self = this;\n\n\t// Remember this listener.\n\tself.__listeners.push( listener );\n\n\t// Register the listener and remember the function to use when the listener should be unregistered.\n\tlistener.unregister = self.__handleEntityEvent( listener.eventName, listener.callback );\n};\n\n/**\n * Request a new synchronized collection.\n * This only registers the intent to use that collection. It will be constructed when it is first used.\n * @param {String} name The name of the collection and service name.\n * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this collection.\n */\nAbsyncProvider.prototype.collection = function AbsyncProvider$collection( name, configuration ) {\n\tvar self = this;\n\n\t// Collection/entity names (and, thus service names) have to be unique.\n\t// We can't create multiple services with the same name.\n\tif( self.__collections[ name ] ) {\n\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for collections must be unique.\" );\n\t}\n\tif( self.__entities[ name ] ) {\n\t\tthrow new Error( \"An entity with the name '\" + name + \"' was already requested. Names for collections must be unique and can't be shared with entities.\" );\n\t}\n\n\t// If no debug flag was set, use the value from the core absync provider.\n\tconfiguration.debug = typeof configuration.debug === \"undefined\" ? self.debug : configuration.debug;\n\n\t// Register the service configuration.\n\t// __absyncCache will return a constructor for a service with the given configuration.\n\tself.__collections[ name ] = {\n\t\tconstructor   : self.__absyncCache( name, configuration ),\n\t\tconfiguration : configuration\n\t};\n\n\t// Register the new service.\n\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\tself.__provide.service( name, self.__collections[ name ].constructor );\n};\n\n/**\n * Request a new synchronized entity.\n * This only registers the intent to use that entity. It will be constructed when it is first used.\n * @param {String} name The name of the entity and service name.\n * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this entity.\n */\nAbsyncProvider.prototype.entity = function AbsyncProvider$entity( name, configuration ) {\n\tvar self = this;\n\n\t// Collection/entity names (and, thus service names) have to be unique.\n\t// We can't create multiple services with the same name.\n\tif( self.__entities[ name ] ) {\n\t\tthrow new Error( \"An entity with the name '\" + name + \"' was already requested. Names for entities must be unique.\" );\n\t}\n\tif( self.__collections[ name ] ) {\n\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for entities must be unique and can't be shared with collections.\" );\n\t}\n\n\t// If no debug flag was set, use the value from the core absync provider.\n\tconfiguration.debug = typeof configuration.debug === \"undefined\" ? self.debug : configuration.debug;\n\n\t// Register the service configuration.\n\t// __absyncCache will return a constructor for a service with the given configuration.\n\tself.__entities[ name ] = {\n\t\tconstructor   : self.__absyncCache( name, configuration ),\n\t\tconfiguration : configuration\n\t};\n\n\t// Register the new service.\n\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\tself.__provide.service( name, self.__entities[ name ].constructor );\n};\n\n\n/**\n * Register an event listener that is called when a specific entity is received on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @return {Function|null} If the listener could be registered, it returns a function that, when called, removes\n * the event listener.\n * If the listener registration was delayed, null is returned.\n */\nAbsyncProvider.prototype.on = function AbsyncProvider$on( eventName, callback ) {\n\tvar self = this;\n\n\t// If we have no configured socket.io connection yet, remember to register it later.\n\tif( !self.__ioSocket ) {\n\n\t\tif( self.__registerLater.length > 8192 ) {\n\t\t\t// Be defensive, something is probably not right here.\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO: Use promises here, so that we can always return the event listener removal function.\n\t\tself.__registerLater.push( {\n\t\t\teventName : eventName,\n\t\t\tcallback  : callback\n\t\t} );\n\t\treturn null;\n\t}\n\n\treturn self.__registerListener( {\n\t\teventName : eventName,\n\t\tcallback  : callback\n\t} );\n};\n\n/**\n * Register an event listener on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @returns {Function}\n */\nAbsyncProvider.prototype.__handleEntityEvent = function AbsyncProvider$handleEntityEvent( eventName, callback ) {\n\tvar self = this;\n\n\t// Register the callback with socket.io.\n\tself.__ioSocket.on( eventName, callback );\n\n\t// Return a function that removes the listener.\n\treturn function removeListener() {\n\t\tself.__ioSocket.removeListener( eventName, callback );\n\t};\n};\n\n/**\n * Convenience method to allow the user to emit() from the socket.io connection.\n * This is not utilized in absync internally.\n * @param {String} eventName\n * @param {*} data\n * @param {Function} [callback]\n */\nAbsyncProvider.prototype.emit = function AbsyncProvider$emit( eventName, data, callback ) {\n\tvar self = this;\n\n\tif( !self.__ioSocket ) {\n\t\tthrow new Error( \"socket.io is not initialized.\" );\n\t}\n\n\tself.__ioSocket.emit( eventName, data, function afterEmit() {\n\t\tif( callback ) {\n\t\t\tcallback.apply( self.__ioSocket, arguments );\n\t\t}\n\t} );\n};\n\n/**\n * The service is just used as a convenience to access the provider.\n * @returns {AbsyncProvider}\n * @ngInject\n */\nAbsyncProvider.prototype.$get = function AbsyncProvider$$get() {\n\treturn this;\n};\n}());","(function() {\n\"use strict\";\n/* globals angular */\n\nangular.module( \"absync\", [] );\n}());;(function() {\n\"use strict\";\n/* globals angular, io */\n\n/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\ngetAbsyncProvider.$inject = [\"$injector\", \"$provide\", \"absyncCache\"];\nangular\n\t.module( \"absync\" )\n\t.provider( \"absync\", getAbsyncProvider );\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IInjectorService|Object} $injector The $injector provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @ngInject\n */\nfunction getAbsyncProvider( $injector, $provide, absyncCache ) {\n\treturn new AbsyncProvider( $injector, $provide, absyncCache );\n}\n\n/**\n * Retrieves the absync provider.\n * @param {angular.auto.IInjectorService|Object} $injector The $injector provider.\n * @param {angular.auto.IProvideService|Object} $provide The $provide provider.\n * @param {Function} absyncCache The AbsyncCache service constructor.\n * @constructor\n */\nfunction AbsyncProvider( $injector, $provide, absyncCache ) {\n\tvar self = this;\n\n\t// Store a reference to the inject provider.\n\tself.__injector    = $injector;\n\t// Store a reference to the provide provider.\n\tself.__provide     = $provide;\n\t// Store a reference to the cache service constructor.\n\tself.__absyncCache = absyncCache;\n\n\t// A reference to the socket.io instance we're using to receive updates from the server.\n\tself.__ioSocket = null;\n\t// We usually register event listeners on the socket.io instance right away.\n\t// If socket.io was not connected when a service was constructed, we put the registration request\n\t// into this array and register it as soon as socket.io is configured.\n\tself.__registerLater = [];\n\t// References to all registered event listeners.\n\tself.__listeners     = [];\n\n\t// The collections that absync provides.\n\t// The keys are the names of the collections, the value contains the constructor of\n\t// the respective cache service.\n\tself.__collections = {};\n\n\t// The entities that absync provides.\n\t// The keys are the names of the entities, the value contains the constructor of\n\t// the respective cache service.\n\tself.__entities = {};\n\n\t// Debug should either be set through a configure() call, or on instantiated services.\n\tself.debug = undefined;\n}\n\n/**\n * Register the configurator on the provider itself to allow early configuration during setup phase.\n * It is recommended to configure absync within a configuration phase of a module.\n * @param {Object} configuration The configuration for the absync provider.\n * Can have a member `socket`, pointing to the socket.io instance or constructor to use.\n * Can have a member `debug`, enabling debugging, if set to true.\n */\nAbsyncProvider.prototype.configure = function AbsyncProvider$configure( configuration ) {\n\tvar self = this;\n\n\tif( typeof configuration.socket !== \"undefined\" ) {\n\t\tvar socket   = configuration.socket;\n\t\t// Determine if the socket is an io.Socket.\n\t\tvar isSocket = typeof io !== \"undefined\" && io.Socket && socket instanceof io.Socket;\n\n\t\tif( typeof socket == \"function\" ) {\n\t\t\t// Expect the passed socket to be a constructor.\n\t\t\tself.__ioSocket = new socket();// jscs:ignore requireCapitalizedConstructors\n\n\t\t} else if( isSocket ) {\n\t\t\t// Expect the passed socket to be an io.Socket instance.\n\t\t\tself.__ioSocket = socket;\n\n\t\t} else {\n\t\t\tthrow new Error( \"configure() expects input to be a function or a socket.io Socket instance.\" );\n\t\t}\n\n\t\t// Check if services already tried to register listeners, if so, register them now.\n\t\t// This can happen when a service was constructed before absync was configured.\n\t\tif( self.__registerLater.length ) {\n\t\t\tangular.forEach( self.__registerLater, self.__registerListener.bind( self ) );\n\t\t\tself.__registerLater = [];\n\t\t}\n\t}\n\n\tif( typeof configuration.debug !== \"undefined\" ) {\n\t\tself.debug = configuration.debug || false;\n\t}\n\n\tif( self.debug ) {\n\t\tangular.forEach( self.__collections, function enableDebugging( collection ) {\n\t\t\tcollection.configuration.debug = true;\n\t\t} );\n\t\tangular.forEach( self.__entities, function enableDebugging( entity ) {\n\t\t\tentity.configuration.debug = true;\n\t\t} );\n\t}\n};\n\n/**\n * Detaches absync from the websocket.\n * @param {Boolean} [disconnectSocket=false] Should the underlying socket.io connection be disconnected as well?\n */\nAbsyncProvider.prototype.disconnect = function AbsyncProvider$disconnect( disconnectSocket ) {\n\tvar self = this;\n\n\tdisconnectSocket = disconnectSocket || false;\n\n\tangular.forEach( self.__listeners, function unregisterListener( listener ) {\n\t\tlistener.unregister();\n\t\tdelete listener.unregister;\n\t\tself.__registerLater.push( listener );\n\t} );\n\n\tif( disconnectSocket ) {\n\t\tself.__ioSocket.disconnect();\n\t\tself.__ioSocket = null;\n\t}\n};\n\n/**\n * Register an event listener with socket.io.\n * @param {Object} listener\n * @private\n */\nAbsyncProvider.prototype.__registerListener = function AbsyncProvider$registerListener( listener ) {\n\tvar self = this;\n\n\t// Remember this listener.\n\tself.__listeners.push( listener );\n\n\t// Register the listener and remember the function to use when the listener should be unregistered.\n\tlistener.unregister = self.__handleEntityEvent( listener.eventName, listener.callback );\n};\n\n/**\n * Request a new synchronized collection.\n * This only registers the intent to use that collection. It will be constructed when it is first used.\n * @param {String} name The name of the collection and service name.\n * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this collection.\n */\nAbsyncProvider.prototype.collection = function AbsyncProvider$collection( name, configuration ) {\n\tvar self = this;\n\n\t// Collection/entity names (and, thus service names) have to be unique.\n\t// We can't create multiple services with the same name.\n\tif( self.__collections[ name ] ) {\n\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for collections must be unique.\" );\n\t}\n\tif( self.__entities[ name ] ) {\n\t\tthrow new Error( \"An entity with the name '\" + name + \"' was already requested. Names for collections must be unique and can't be shared with entities.\" );\n\t}\n\n\t// If no debug flag was set, use the value from the core absync provider.\n\tconfiguration.debug = typeof configuration.debug === \"undefined\" ? self.debug : configuration.debug;\n\n\t// Register the service configuration.\n\t// __absyncCache will return a constructor for a service with the given configuration.\n\tself.__collections[ name ] = {\n\t\tconstructor   : self.__absyncCache( name, configuration ),\n\t\tconfiguration : configuration\n\t};\n\n\t// Register the new service.\n\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\tself.__provide.service( name, self.__collections[ name ].constructor );\n};\n\n/**\n * Request a new synchronized entity.\n * This only registers the intent to use that entity. It will be constructed when it is first used.\n * @param {String} name The name of the entity and service name.\n * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this entity.\n */\nAbsyncProvider.prototype.entity = function AbsyncProvider$entity( name, configuration ) {\n\tvar self = this;\n\n\t// Collection/entity names (and, thus service names) have to be unique.\n\t// We can't create multiple services with the same name.\n\tif( self.__entities[ name ] ) {\n\t\tthrow new Error( \"An entity with the name '\" + name + \"' was already requested. Names for entities must be unique.\" );\n\t}\n\tif( self.__collections[ name ] ) {\n\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for entities must be unique and can't be shared with collections.\" );\n\t}\n\n\t// If no debug flag was set, use the value from the core absync provider.\n\tconfiguration.debug = typeof configuration.debug === \"undefined\" ? self.debug : configuration.debug;\n\n\t// Register the service configuration.\n\t// __absyncCache will return a constructor for a service with the given configuration.\n\tself.__entities[ name ] = {\n\t\tconstructor   : self.__absyncCache( name, configuration ),\n\t\tconfiguration : configuration\n\t};\n\n\t// Register the new service.\n\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\tself.__provide.service( name, self.__entities[ name ].constructor );\n};\n\n\n/**\n * Register an event listener that is called when a specific entity is received on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @return {Function|null} If the listener could be registered, it returns a function that, when called, removes\n * the event listener.\n * If the listener registration was delayed, null is returned.\n */\nAbsyncProvider.prototype.on = function AbsyncProvider$on( eventName, callback ) {\n\tvar self = this;\n\n\t// If we have no configured socket.io connection yet, remember to register it later.\n\tif( !self.__ioSocket ) {\n\n\t\tif( self.__registerLater.length > 8192 ) {\n\t\t\t// Be defensive, something is probably not right here.\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO: Use promises here, so that we can always return the event listener removal function.\n\t\tself.__registerLater.push( {\n\t\t\teventName : eventName,\n\t\t\tcallback  : callback\n\t\t} );\n\t\treturn null;\n\t}\n\n\treturn self.__registerListener( {\n\t\teventName : eventName,\n\t\tcallback  : callback\n\t} );\n};\n\n/**\n * Register an event listener on the websocket.\n * @param {String} eventName The event name, usually the name of the entity.\n * @param {Function} callback The function to call when the entity is received.\n * @returns {Function}\n */\nAbsyncProvider.prototype.__handleEntityEvent = function AbsyncProvider$handleEntityEvent( eventName, callback ) {\n\tvar self = this;\n\n\t// Register the callback with socket.io.\n\tself.__ioSocket.on( eventName, callback );\n\n\t// Return a function that removes the listener.\n\treturn function removeListener() {\n\t\tself.__ioSocket.removeListener( eventName, callback );\n\t};\n};\n\n/**\n * Convenience method to allow the user to emit() from the socket.io connection.\n * This is not utilized in absync internally.\n * @param {String} eventName\n * @param {*} data\n * @param {Function} [callback]\n */\nAbsyncProvider.prototype.emit = function AbsyncProvider$emit( eventName, data, callback ) {\n\tvar self = this;\n\n\tif( !self.__ioSocket ) {\n\t\tthrow new Error( \"socket.io is not initialized.\" );\n\t}\n\n\tself.__ioSocket.emit( eventName, data, function afterEmit() {\n\t\tif( callback ) {\n\t\t\tcallback.apply( self.__ioSocket, arguments );\n\t\t}\n\t} );\n};\n\n/**\n * The service is just used as a convenience to access the provider.\n * @returns {AbsyncProvider}\n * @ngInject\n */\nAbsyncProvider.prototype.$get = function AbsyncProvider$$get() {\n\treturn this;\n};\n}());;(function() {\n\"use strict\";\n/* globals angular */\n\n/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.constant( \"absyncCache\", getServiceConstructor );\n\n/**\n * A closure to make the configuration available to the cache service.\n * @param {String} name The name of the service.\n * @param {AbsyncServiceConfiguration} configuration The configuration for this service.\n * @returns {CacheService}\n */\nfunction getServiceConstructor( name, configuration ) {\n\t// There is no code here, other than the CacheService definition, followed by \"return CacheService;\"\n\n\t/**\n\t * This service factory is the core of absync.\n\t * It returns a CacheService instance that is specialized to the given configuration.\n\t * This service will handle keep the stored collection in sync.\n\t * @param {angular.IHttpService|Object} $http\n\t * @param {angular.auto.IInjectorService|Object} $injector\n\t * @param {angular.ILogService|Object} $log\n\t * @param {angular.IQService|Object} $q\n\t * @param {angular.IRootScopeService|Object} $rootScope\n\t * @param {AbsyncProvider} absync\n\t * @param {Object} absyncNoopLog A log interface that does nothing.\n\t * @param {Object} absyncUncachedFilter A filter that mutates URLs so they will bypass the browser cache.\n\t * @returns {CacheService}\n\t * @ngInject\n\t */\n\tCacheService.$inject = [\"$http\", \"$injector\", \"$log\", \"$q\", \"$rootScope\", \"absyncNoopLog\", \"absync\", \"absyncUncachedFilter\"];\n\tfunction CacheService( $http, $injector, $log, $q, $rootScope, absyncNoopLog, absync, absyncUncachedFilter ) {\n\t\tvar self = this;\n\n\t\t// Retrieve a reference to the model of the collection that is being cached.\n\t\tvar _injector         = configuration.injector || $injector;\n\t\tvar _injectorHasModel = _injector.has( configuration.model );\n\t\tif( !_injectorHasModel ) {\n\t\t\tthrow new Error( \"Unable to construct the '\" + name + \"' service, because the referenced model '\" + configuration.model + \"' is not available for injection.\" );\n\t\t}\n\t\tvar _model = ( typeof configuration.model === \"string\" ) ? _injector.get( configuration.model ) : configuration.model;\n\n\t\t// Retrieve the serialization methods.\n\t\tvar serializeModel   = _model.serialize || configuration.serialize || serializationNoop;\n\t\tvar deserializeModel = _model.deserialize || configuration.deserialize || serializationNoop;\n\n\t\t// Store configuration.\n\t\tself.name          = name;\n\t\tself.configuration = configuration;\n\n\t\t// The entity cache must be constructed as an empty array or object, to allow the user to place watchers on it.\n\t\t// We must never replace the cache with a new array or object, we must always manipulate the existing one.\n\t\t// Otherwise watchers will not behave as the user expects them to.\n\t\t/* @type {Array<configuration.model>|configuration.model} */\n\t\tself.entityCache      = configuration.collectionName ? [] : {};\n\t\t// The raw cache is data that hasn't been deserialized and is used internally.\n\t\tself.__entityCacheRaw = null;\n\n\t\t// Should request caching be used at all?\n\t\tself.enableRequestCache = true;\n\t\t// Cache requests made to the backend to avoid multiple, simultaneous requests for the same resource.\n\t\tself.__requestCache     = {};\n\t\t// When we make HTTP requests, the browser is generally allowed to cache the responses.\n\t\t// The server can control this behavior with cache control HTTPS headers.\n\t\t// However, at times it may be desirable to force the browser to always fetch fresh data from the backend.\n\t\t// This hash controls this behavior.\n\t\tself.allowBrowserCache = ( angular.merge || angular.extend )( {}, {\n\t\t\t// Should browser caching be allowed for initial cache sync operations?\n\t\t\tsync    : true,\n\t\t\t// Should browser caching be allowed when we retrieve single entities from the backend?\n\t\t\trequest : true\n\t\t}, configuration.allowBrowserCache );\n\t\tself.__uncached        = absyncUncachedFilter;\n\n\t\t// Use $http by default and expose it on the service.\n\t\t// This allows the user to set a different, possibly decorated, HTTP interface for this service.\n\t\tself.httpInterface = $http;\n\t\t// Do the same for our logger.\n\t\tself.logInterface  = configuration.debug ? $log : absyncNoopLog;\n\t\t// The scope on which we broadcast all our relevant events.\n\t\tself.scope         = $rootScope;\n\t\t// Keep a reference to $q.\n\t\tself.q             = $q;\n\n\t\t// Prefix log messages with this string.\n\t\tself.logPrefix = \"absync:\" + name.toLocaleUpperCase() + \" \";\n\n\t\t// If enabled, entities received in response to a create or update API call, will be put into the cache.\n\t\t// Otherwise, absync will wait for them to be published through the websocket channel.\n\t\tself.forceEarlyCacheUpdate = false;\n\n\t\t// Throws failures so that they can be handled outside of absync.\n\t\tself.throwFailures = true;\n\n\t\t// Expose the serializer/deserializer so that they can be adjusted at any time.\n\t\tself.serializer   = serializeModel;\n\t\tself.deserializer = deserializeModel;\n\n\t\t// Tell absync to register an event listener for both our entity and its collection.\n\t\t// When we receive these events, we broadcast an equal Angular event on the root scope.\n\t\t// This way the user can already peek at the data (manipulating it is discouraged though).\n\t\tabsync.on( configuration.entityName, self.__onEntityOnWebsocket.bind( self ) );\n\t\tif( configuration.collectionName ) {\n\t\t\tabsync.on( configuration.collectionName, self.__onCollectionOnWebsocket.bind( self ) );\n\t\t}\n\n\t\t// Now we listen on the root scope for the same events we're firing above.\n\t\t// This is where our own absync synchronization logic kicks in.\n\t\t$rootScope.$on( configuration.entityName, self.__onEntityReceived.bind( self ) );\n\t\tif( configuration.collectionName ) {\n\t\t\t$rootScope.$on( configuration.collectionName, self.__onCollectionReceived.bind( self ) );\n\t\t}\n\n\t\tself.logInterface.info( self.logPrefix + \"service was instantiated.\" );\n\t}\n\n\t/**\n\t * Invoked when an entity is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityOnWebsocket = function CacheService$onEntityOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.entityName, message[ configuration.entityName ] );\n\t};\n\n\t/**\n\t * Invoked when a collection is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionOnWebsocket = function CacheService$onCollectionOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.collectionName, message[ configuration.collectionName ] );\n\t};\n\n\t/**\n\t * Event handler for when the initial badge of raw data becomes available.\n\t * @param {Array<Object>|Object} rawData\n\t * @private\n\t */\n\tCacheService.prototype.__onDataAvailable = function CacheService$onDataAvailable( rawData ) {\n\t\tvar self = this;\n\n\t\tif( Array.isArray( self.entityCache ) ) {\n\t\t\t// The symbol self.entityCache is expected to be an empty array.\n\t\t\t// We initialize it in the constructor to an empty array and we don't expect any writes to have\n\t\t\t// happened to it. In case writes *did* happen, we assume that whoever wrote to it knows what\n\t\t\t// they're doing.\n\t\t\tangular.forEach( rawData[ configuration.collectionName ], deserializeCollectionEntry );\n\n\t\t\t// Notify the rest of the application about a fresh collection.\n\t\t\tself.scope.$broadcast( \"collectionNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache\n\t\t\t} );\n\n\t\t} else {\n\t\t\tvar deserialized = self.deserializer( rawData[ configuration.entityName ] );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t}\n\n\t\treturn self.entityCache;\n\n\t\tfunction deserializeCollectionEntry( rawEntity ) {\n\t\t\tself.entityCache.push( self.deserializer( rawEntity ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when an entity is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Object} args The raw object as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityReceived = function CacheService$onEntityReceived( event, args ) {\n\t\tvar self            = this;\n\t\tvar _entityReceived = args;\n\n\t\t// Determine if the received record consists ONLY of an id property,\n\t\t// which would mean that this record was deleted from the backend.\n\t\tif( 1 === Object.keys( _entityReceived ).length && _entityReceived.hasOwnProperty( \"id\" ) ) {\n\t\t\tself.logInterface.info( self.logPrefix + \"Entity was deleted from the server. Updating cache…\" );\n\t\t\treturn self.__removeEntityFromCache( _entityReceived.id );\n\n\t\t} else {\n\t\t\tself.logInterface.debug( self.logPrefix + \"Entity was updated on the server. Updating cache…\" );\n\t\t\treturn self.__updateCacheWithEntity( self.deserializer( _entityReceived ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when a collection is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Array<Object>} args The raw collection as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionReceived = function CacheService$onCollectionReceived( event, args ) {\n\t\tvar self                = this;\n\t\tvar _collectionReceived = args;\n\n\t\t// When we're receiving a full collection, all data we currently have in our cache is useless.\n\t\t// We reset the length of the array here, because assigning a new array would possibly conflict\n\t\t// with watchers placed on the original object.\n\t\tself.entityCache.length = 0;\n\n\t\t// Deserialize the received data and place the models in our cache.\n\t\tangular.forEach( _collectionReceived, addEntityToCache );\n\n\t\tfunction addEntityToCache( entityReceived ) {\n\t\t\tvar deserialized = self.deserializer( entityReceived );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t}\n\t};\n\n\t/**\n\t * Ensure that the cached collection is retrieved from the server.\n\t * @param {Boolean} [forceReload=false] Should the data be loaded, even if the service already has a local cache?\n\t * @returns {Promise<Array<configuration.model>>|IPromise<Array>|IPromise<void>|Q.Promise<Array<configuration.model>>|angular.IPromise<TResult>}\n\t */\n\tCacheService.prototype.ensureLoaded = function CacheService$ensureLoaded( forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\t// We only perform any loading, if we don't have raw data cached yet, or if we're forced.\n\t\tif( null === self.__entityCacheRaw || forceReload ) {\n\t\t\tif( !configuration.collectionName || !configuration.collectionUri ) {\n\t\t\t\tif( configuration.entityName && configuration.entityUri ) {\n\t\t\t\t\treturn self.httpInterface\n\t\t\t\t\t\t.get( self.allowBrowserCache.sync ? configuration.entityUri : self.__uncached(\n\t\t\t\t\t\t\tconfiguration.entityUri ) )\n\t\t\t\t\t\t.then( onSingleEntityReceived, onSingleEntityRetrievalFailure );\n\n\t\t\t\t} else {\n\t\t\t\t\t// If the user did not provide information necessary to work with a collection, immediately return\n\t\t\t\t\t// a promise for an empty collection. The user could still use read() to grab individual entities.\n\t\t\t\t\treturn self.q.when( [] );\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tself.logInterface.info( self.logPrefix + \"Retrieving '\" + configuration.collectionName + \"' collection…\" );\n\t\t\t\treturn self.httpInterface\n\t\t\t\t\t.get( self.allowBrowserCache.sync ? configuration.collectionUri : self.__uncached(\n\t\t\t\t\t\tconfiguration.collectionUri ) )\n\t\t\t\t\t.then( onCollectionReceived, onCollectionRetrievalFailure );\n\t\t\t}\n\t\t}\n\n\t\treturn self.q.when( self.entityCache );\n\n\t\t/**\n\t\t * Invoked when the collection was received from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionReceived( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.collectionName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.collectionName + \"'.\" );\n\t\t\t}\n\n\t\t\tself.__entityCacheRaw = serverResponse.data;\n\t\t\tself.entityCache.splice( 0, self.entityCache.length );\n\t\t\treturn self.__onDataAvailable( serverResponse.data );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the collection from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve the collection from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.__entityCacheRaw = null;\n\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Invoked when the entity was received from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onSingleEntityReceived( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\tself.__entityCacheRaw = serverResponse.data;\n\t\t\tself.__onDataAvailable( serverResponse.data );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onSingleEntityRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve the entity from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.__entityCacheRaw = null;\n\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Pre-seed the cache with the given value.\n\t * Usually, you'd want to follow this up with a sync() to get fully in sync with the backend.\n\t * @param {Object|Array<Object>} cache\n\t * @returns {CacheService}\n\t */\n\tCacheService.prototype.seed = function CacheService$seed( cache ) {\n\t\tvar self              = this;\n\t\tself.__entityCacheRaw = cache;\n\n\t\treturn self.__onDataAvailable( self.__entityCacheRaw );\n\t};\n\n\tCacheService.prototype.sync = function CacheService$sync() {\n\t\tvar self = this;\n\n\t\tself.__entityCacheRaw = null;\n\n\t\treturn self.ensureLoaded( true );\n\t};\n\n\t/**\n\t * Read a single entity from the cache, or load it from the server if required.\n\t * The entity will be placed into the cache.\n\t * @param {String} id The ID of the entity to retrieve.\n\t * @param {Boolean} [forceReload=false] Should the entity be retrieved from the server, even if it is already in the cache?\n\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>|angular.IPromise<TResult>}\n\t */\n\tCacheService.prototype.read = function CacheService$read( id, forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\tself.logInterface.debug( self.logPrefix + \"Requesting entity '\" + id + \"' (forceReload:\" + forceReload + \")…\" );\n\n\t\tif( !forceReload ) {\n\t\t\t// Check if the entity is in the cache and return instantly if found.\n\t\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t\t     entityIndex < self.entityCache.length;\n\t\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id === id ) {\n\t\t\t\t\tself.logInterface.debug( self.logPrefix + \"Requested entity  '\" + id + \"' is served from cache.\" );\n\t\t\t\t\treturn self.q.when( entity );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.logInterface.debug( self.logPrefix + \"Requested entity  '\" + id + \"' is fetched from backend.\" );\n\n\t\treturn self.__requestEntity( id )\n\t\t\t.then( onEntityRetrieved, onEntityRetrievalFailure );\n\n\t\t/**\n\t\t * Invoked when the entity was retrieved from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrieved( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\t// Deserialize the object and place it into the cache.\n\t\t\t// We do not need to check here if the object already exists in the cache.\n\t\t\t// While it could be possible that the same entity is retrieved multiple times, __updateCacheWithEntity\n\t\t\t// will not insert duplicated into the cache.\n\t\t\tvar deserialized = self.deserializer( serverResponse.data[ configuration.entityName ] );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t\treturn deserialized;\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve entity with ID '\" + id + \"' from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Request an entity from the backend.\n\t * @param {String} id The ID of the entity.\n\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>|angular.IPromise<TResult>}\n\t * @private\n\t */\n\tCacheService.prototype.__requestEntity = function CacheService$requestEntity( id ) {\n\t\tvar self = this;\n\n\t\tif( self.enableRequestCache && self.__requestCache && self.__requestCache[ id ] ) {\n\t\t\tself.logInterface.debug( self.logPrefix + \"Entity request    '\" + id + \"' served from request cache.\" );\n\t\t\treturn self.__requestCache[ id ];\n\t\t}\n\n\t\tvar requestUri = configuration.entityUri + ( id ? ( \"/\" + id ) : \"\" );\n\n\t\t// Grab the entity from the backend.\n\t\tvar request = self.httpInterface\n\t\t\t.get( self.allowBrowserCache.request ? requestUri : self.__uncached( requestUri ) )\n\t\t\t.then( removeRequestFromCache.bind( self, id ) );\n\n\t\tif( self.enableRequestCache && self.__requestCache ) {\n\t\t\tself.__requestCache[ id ] = request;\n\t\t}\n\n\t\treturn request;\n\n\t\tfunction removeRequestFromCache( id, serverResponse ) {\n\t\t\tdelete self.__requestCache[ id ];\n\t\t\treturn serverResponse;\n\t\t}\n\t};\n\n\t/**\n\t * Updates an entity and persists it to the backend and the cache.\n\t * @param {configuration.model} entity\n\t * @param {Boolean} [returnResult=false] Should the result of the query be returned?\n\t * @return {Promise<configuration.model>|IPromise<TResult>|angular.IPromise<TResult>} A promise that will be resolved with the updated entity.\n\t */\n\tCacheService.prototype.update = function CacheService$update( entity, returnResult ) {\n\t\tvar self = this;\n\n\t\treturnResult = returnResult || false;\n\n\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\tvar reduced    = self.reduceComplex( entity );\n\t\t// Now serialize the object.\n\t\tvar serialized = self.serializer( reduced );\n\n\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\tvar wrappedEntity                         = {};\n\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\tif( \"undefined\" !== typeof entity.id ) {\n\t\t\treturn self.httpInterface\n\t\t\t\t.put( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t.then( afterEntityStored.bind( self, returnResult ), onEntityStorageFailure.bind( self ) );\n\n\t\t} else {\n\t\t\t// Create a new entity\n\t\t\treturn self.httpInterface\n\t\t\t\t.post( configuration.collectionUri, wrappedEntity )\n\t\t\t\t.then( afterEntityStored.bind( self, returnResult ), onEntityStorageFailure.bind( self ) );\n\t\t}\n\t};\n\n\tCacheService.prototype.patch = function CacheService$patch( entity ) {\n\t\tvar self = this;\n\n\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\tvar reduced    = self.reduceComplex( entity );\n\t\t// Now serialize the object.\n\t\tvar serialized = self.serializer( reduced );\n\n\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\tvar wrappedEntity                         = {};\n\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\tif( \"undefined\" !== typeof entity.id ) {\n\t\t\treturn self.httpInterface\n\t\t\t\t.patch( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t.then( afterEntityStored.bind( self ), onEntityStorageFailure.bind( self ) );\n\n\t\t} else {\n\t\t\tthrow new Error( \"Attempted to patch an entity that was never stored on the server.\" );\n\t\t}\n\t};\n\n\t/**\n\t * Creates a new entity and persists it to the backend and the cache.\n\t */\n\tCacheService.prototype.create = CacheService.prototype.update;\n\n\t/**\n\t * Invoked when the entity was stored on the server.\n\t * @param {Boolean} returnResult Should we return the parsed entity that is contained in the response?\n\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t */\n\tfunction afterEntityStored( returnResult, serverResponse ) {\n\t\tvar self = this;\n\n\t\t// Writing an entity to the backend will usually invoke an update event to be\n\t\t// broadcast over websockets, where we would also retrieve the updated record.\n\t\t// We still put the updated record we receive here into the cache to ensure early consistency, if that is requested.\n\t\tif( !returnResult && !self.forceEarlyCacheUpdate ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif( serverResponse.data[ configuration.entityName ] ) {\n\t\t\tvar rawEntity = serverResponse.data[ configuration.entityName ];\n\t\t\t// If early cache updates are forced, put the return entity into the cache.\n\t\t\tif( self.forceEarlyCacheUpdate ) {\n\t\t\t\tvar newEntity = self.deserializer( rawEntity );\n\t\t\t\tself.__updateCacheWithEntity( newEntity );\n\n\t\t\t\tif( returnResult ) {\n\t\t\t\t\treturn newEntity;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( returnResult ) {\n\t\t\t\treturn rawEntity;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Invoked when there was an error while trying to store the entity on the server.\n\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t */\n\tfunction onEntityStorageFailure( serverResponse ) {\n\t\tvar self = this;\n\n\t\tself.logInterface.error( self.logPrefix + \"Unable to store entity on the server.\",\n\t\t\tserverResponse );\n\t\tself.logInterface.error( serverResponse );\n\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\tif( self.throwFailures ) {\n\t\t\tthrow serverResponse;\n\t\t}\n\t}\n\n\t/**\n\t * Remove an entity from the cache and have it deleted on the backend.\n\t * @param {Object} entity\n\t */\n\tCacheService.prototype.delete = function CacheService$delete( entity ) {\n\t\tvar self = this;\n\n\t\tvar entityId = entity.id;\n\t\treturn self.httpInterface\n\t\t\t.delete( configuration.entityUri + \"/\" + entityId )\n\t\t\t.then( onEntityDeleted )\n\t\t\t.catch( onEntityDeletionFailed );\n\n\t\t/**\n\t\t * Invoked when the entity was deleted from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeleted( serverResponse ) {\n\t\t\treturn self.__removeEntityFromCache( entityId );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to delete the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeletionFailed( serverResponse ) {\n\t\t\tself.logInterface.error( serverResponse.data );\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Put an entity into the cache or update the existing record if the entity was already in the cache.\n\t * @param {Object} entityToCache\n\t * @private\n\t */\n\tCacheService.prototype.__updateCacheWithEntity = function CacheService$updateCacheWithEntity( entityToCache ) {\n\t\tvar self = this;\n\n\t\tself.logInterface.info( self.logPrefix + \"Updating entity '\" + ( entityToCache.id || self.name ) + \"' in cache…\",\n\t\t\tentityToCache );\n\n\t\tif( !Array.isArray( self.entityCache ) ) {\n\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\tself.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t{\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : self.entityCache,\n\t\t\t\t\tupdated : entityToCache\n\t\t\t\t} );\n\n\t\t\tif( typeof self.entityCache.copyFrom === \"function\" ) {\n\t\t\t\tself.entityCache.copyFrom( entityToCache );\n\n\t\t\t} else {\n\t\t\t\tangular.extend( self.entityCache, entityToCache );\n\t\t\t}\n\n\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\tself.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t{\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : self.entityCache\n\t\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\tvar found = false;\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == entityToCache.id ) {\n\t\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ],\n\t\t\t\t\t\tupdated : entityToCache\n\t\t\t\t\t} );\n\n\t\t\t\t// Use the \"copyFrom\" method on the entity, if it exists, otherwise use naive approach.\n\t\t\t\tvar targetEntity = self.entityCache[ entityIndex ];\n\t\t\t\tif( typeof targetEntity.copyFrom === \"function\" ) {\n\t\t\t\t\ttargetEntity.copyFrom( entityToCache );\n\n\t\t\t\t} else {\n\t\t\t\t\tangular.extend( targetEntity, entityToCache );\n\t\t\t\t}\n\n\t\t\t\tfound = true;\n\n\t\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ]\n\t\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the entity wasn't found in our records, it's a new entity.\n\t\tif( !found ) {\n\t\t\tself.scope.$broadcast( \"beforeEntityNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache,\n\t\t\t\tentity  : entityToCache\n\t\t\t} );\n\n\t\t\tself.entityCache.push( entityToCache );\n\n\t\t\tself.scope.$broadcast( \"entityNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache,\n\t\t\t\tentity  : entityToCache\n\t\t\t} );\n\t\t}\n\t};\n\n\t/**\n\t * Removes an entity from the internal cache. The entity is not removed from the backend.\n\t * @param {String} id The ID of the entity to remove from the cache.\n\t * @private\n\t */\n\tCacheService.prototype.__removeEntityFromCache = function CacheService$removeEntityFromCache( id ) {\n\t\tvar self = this;\n\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == id ) {\n\t\t\t\t// Before removing the entity, allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\n\t\t\t\t// Remove the entity from the cache.\n\t\t\t\tself.entityCache.splice( entityIndex, 1 );\n\n\t\t\t\t// Send another event to allow the user to take note of the removal.\n\t\t\t\tself.scope.$broadcast( \"entityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Retrieve an associative array of all cached entities, which uses the ID of the entity records as the key in the array.\n\t * This is a convenience method that is not utilized internally.\n\t * @returns {Array<configuration.model>}\n\t */\n\tCacheService.prototype.lookupTableById = function CacheService$lookupTableById() {\n\t\tvar self = this;\n\n\t\t// TODO: Keep a copy of the lookup table and only update it when the cached data updates\n\t\tvar lookupTable = [];\n\t\tfor( var entityIndex = 0;\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex ) {\n\t\t\tlookupTable[ self.entityCache[ entityIndex ].id ] = self.entityCache[ entityIndex ];\n\t\t}\n\t\treturn lookupTable;\n\t};\n\n\t/**\n\t * Reduce instances of complex types within an entity with their respective IDs.\n\t * Note that no type checks are being performed. Every nested object with an \"id\" property is treated as a complex type.\n\t * @param {Object} entity The entity that should have its complex member reduced.\n\t * @param {Boolean} [arrayInsteadOfObject=false] true if the manipulated entity is an array; false if it's an object.\n\t * @returns {Object|Array} A copy of the input entity, with complex type instances replaced with their respective ID.\n\t */\n\tCacheService.prototype.reduceComplex = function CacheService$reduceComplex( entity, arrayInsteadOfObject ) {\n\t\tvar self = this;\n\n\t\tvar result = arrayInsteadOfObject ? [] : {};\n\t\tfor( var propertyName in entity ) {\n\t\t\tif( !entity.hasOwnProperty( propertyName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Recurse for nested arrays.\n\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\tresult[ propertyName ] = self.reduceComplex( entity[ propertyName ], true );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Replace complex type with its ID.\n\t\t\tif( entity[ propertyName ] && entity[ propertyName ].id ) {\n\t\t\t\tresult[ propertyName ] = entity[ propertyName ].id;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Just copy over the plain property.\n\t\t\tresult[ propertyName ] = entity[ propertyName ];\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t * Populate references to complex types in an instance.\n\t * @param {Object} entity The entity that should be manipulated.\n\t * @param {String} propertyName The name of the property of entity which should be populated.\n\t * @param {CacheService} cache An instance of another caching service that can provide the complex\n\t * type instances which are being referenced in entity.\n\t * @param {Boolean} [force=false] If true, all complex types will be replaced with references to the\n\t * instances in cache; otherwise, only properties that are string representations of complex type IDs will be replaced.\n\t * @returns {IPromise<TResult>|IPromise<any[]>|IPromise<{}>|angular.IPromise<TResult>}\n\t */\n\tCacheService.prototype.populateComplex = function CacheService$populateComplex( entity, propertyName, cache, force ) {\n\t\tvar self = this;\n\n\t\t// If the target property is an array, ...\n\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t// ...map the elements in the array to promises.\n\t\t\tvar promises = entity[ propertyName ].map( mapElementToPromise );\n\n\t\t\treturn self.q.all( promises );\n\n\t\t} else {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ] === \"object\" && typeof entity[ propertyName ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ] = entity[ propertyName ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ] )\n\t\t\t\t.then( onComplexRetrieved );\n\t\t}\n\n\t\tfunction mapElementToPromise( element, index ) {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ][ index ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ][ index ] === \"object\" && typeof entity[ propertyName ][ index ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ][ index ] = entity[ propertyName ][ index ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ][ index ] )\n\t\t\t\t.then( onComplexRetrieved );\n\n\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t// When the complex was retrieved, store it back into the array.\n\t\t\t\tentity[ propertyName ][ index ] = complex;\n\t\t\t\treturn entity;\n\t\t\t}\n\t\t}\n\n\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t// When the complex was retrieved, store it back into the entity.\n\t\t\tentity[ propertyName ] = complex;\n\t\t}\n\t};\n\n\t/**\n\t * Reset the state of the cache service to when it was first instantiated.\n\t * Assumes that the configuration was not touched.\n\t * This method is primarily targeted at testing, but can be useful in production as well.\n\t */\n\tCacheService.prototype.reset = function CacheService$reset() {\n\t\tvar self = this;\n\n\t\tself.entityCache      = self.configuration.collectionName ? [] : {};\n\t\tself.__entityCacheRaw = null;\n\t\tself.__requestCache   = {};\n\t};\n\n\treturn CacheService;\n}\n\nfunction serializationNoop( model ) {\n\treturn model;\n}\n}());;(function() {\n\"use strict\";\n/* globals angular */\n\nangular\n\t.module( \"absync\" )\n\t.service( \"AbsyncServiceConfiguration\", AbsyncServiceConfigurationFactory );\n\nfunction AbsyncServiceConfigurationFactory() {\n\treturn AbsyncServiceConfiguration;\n}\n\n/**\n * Configuration for an absync service.\n * Using this type is entirely optional. Providing a hash with the same configuration options will work just fine.\n * @param {Object|String} model Reference to a constructor for the model type, or it's name.\n * If a name is given, absync will try to retrieve instances of the type through injection.\n * @param {String} collectionUri The REST API URI where the collection can be found.\n * Must not end with /\n * @param {String} entityUri The REST API URI where single entities out of the collection can be found.\n * Must not end with /\n * @param {String} [collectionName] The name of the collection. Uses the model name suffixed with \"s\" by default.\n * Using the default value is not recommended.\n * @param {String} [entityName] The name of an entity. Uses the model name by default.\n * Using the default value is not recommended.\n * @param {Function} [deserialize] A function that takes an object received from the server and turns it into a model.\n * By default, absync will just store the raw object without extending it to the model type.\n * Deserializers operate on the actual data received from the websocket.\n * @param {Function} [serialize] A function that takes a model and turns it into something the server expects.\n * By default, absync will just send the complete model.\n * Serializers operate on a copy of the actual model, which already had complex members reduced to their IDs.\n * @param {Function} [injector] An injector to use for model instantiation. Uses $injector by default.\n * Usually, you don't need to provide an alternative here.\n * @param {Boolean} [debug=false] Should additional debugging output be enabled?\n * @param {Object} [allowBrowserCache] A hash that controls the browsing caching behavior.\n * @constructor\n */\nfunction AbsyncServiceConfiguration( model, collectionUri, entityUri, collectionName, entityName, deserialize, serialize, injector, debug, allowBrowserCache ) {\n\tthis.model         = model;\n\tthis.collectionUri = collectionUri;\n\tthis.entityUri     = entityUri;\n\n\tvar _modelName      = model.prototype.constructor.name.toLowerCase();\n\tthis.collectionName = collectionName || ( _modelName + \"s\" );\n\tthis.entityName     = entityName || _modelName;\n\n\tthis.deserialize = deserialize || undefined;\n\tthis.serialize   = serialize || undefined;\n\n\tthis.injector = injector || undefined;\n\n\tthis.debug = debug || false;\n\n\tthis.allowBrowserCache = angular.merge( {}, {\n\t\tsync    : true,\n\t\trequest : true\n\t}, allowBrowserCache );\n}\n}());;(function() {\n\"use strict\";\n/* globals angular */\n\nangular\n\t.module( \"absync\" )\n\t.constant( \"absyncNoopLog\", {\n\t\tdebug : angular.noop,\n\t\tinfo  : angular.noop,\n\t\terror : angular.noop\n\t} );\n}());;(function() {\n\"use strict\";\n/* globals angular */\n\nangular\n\t.module( \"absync\" )\n\t.filter( \"absyncUncached\", uncachedFilterProvider );\n\nfunction uncachedFilterProvider() {\n\treturn uncachedFilter;\n\n\tfunction uncachedFilter( url ) {\n\t\tif( !url ) {\n\t\t\treturn url;\n\t\t}\n\n\t\tvar delimiter     = -1 < url.indexOf( \"?\" ) ? \"&\" : \"?\";\n\t\tvar discriminator = new Date().getTime();\n\n\t\treturn url + delimiter + \"t=\" + discriminator;\n\t}\n}\n}());","(function() {\n\"use strict\";\n/* globals angular */\n\n/**\n * Please make note of the following conventions:\n * 1. Function-scope local variables must be prefixed with a single underscore.\n *    This indicates a temporary variable.\n * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n *    This indicates a publicly visible, private variable.\n *    Hiding private variables, by using closures, is discouraged.\n *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n */\n\nangular\n\t.module( \"absync\" )\n\t.constant( \"absyncCache\", getServiceConstructor );\n\n/**\n * A closure to make the configuration available to the cache service.\n * @param {String} name The name of the service.\n * @param {AbsyncServiceConfiguration} configuration The configuration for this service.\n * @returns {CacheService}\n */\nfunction getServiceConstructor( name, configuration ) {\n\t// There is no code here, other than the CacheService definition, followed by \"return CacheService;\"\n\n\t/**\n\t * This service factory is the core of absync.\n\t * It returns a CacheService instance that is specialized to the given configuration.\n\t * This service will handle keep the stored collection in sync.\n\t * @param {angular.IHttpService|Object} $http\n\t * @param {angular.auto.IInjectorService|Object} $injector\n\t * @param {angular.ILogService|Object} $log\n\t * @param {angular.IQService|Object} $q\n\t * @param {angular.IRootScopeService|Object} $rootScope\n\t * @param {AbsyncProvider} absync\n\t * @param {Object} absyncNoopLog A log interface that does nothing.\n\t * @param {Object} absyncUncachedFilter A filter that mutates URLs so they will bypass the browser cache.\n\t * @returns {CacheService}\n\t * @ngInject\n\t */\n\tfunction CacheService( $http, $injector, $log, $q, $rootScope, absyncNoopLog, absync, absyncUncachedFilter ) {\n\t\tvar self = this;\n\n\t\t// Retrieve a reference to the model of the collection that is being cached.\n\t\tvar _injector         = configuration.injector || $injector;\n\t\tvar _injectorHasModel = _injector.has( configuration.model );\n\t\tif( !_injectorHasModel ) {\n\t\t\tthrow new Error( \"Unable to construct the '\" + name + \"' service, because the referenced model '\" + configuration.model + \"' is not available for injection.\" );\n\t\t}\n\t\tvar _model = ( typeof configuration.model === \"string\" ) ? _injector.get( configuration.model ) : configuration.model;\n\n\t\t// Retrieve the serialization methods.\n\t\tvar serializeModel   = _model.serialize || configuration.serialize || serializationNoop;\n\t\tvar deserializeModel = _model.deserialize || configuration.deserialize || serializationNoop;\n\n\t\t// Store configuration.\n\t\tself.name          = name;\n\t\tself.configuration = configuration;\n\n\t\t// The entity cache must be constructed as an empty array or object, to allow the user to place watchers on it.\n\t\t// We must never replace the cache with a new array or object, we must always manipulate the existing one.\n\t\t// Otherwise watchers will not behave as the user expects them to.\n\t\t/* @type {Array<configuration.model>|configuration.model} */\n\t\tself.entityCache      = configuration.collectionName ? [] : {};\n\t\t// The raw cache is data that hasn't been deserialized and is used internally.\n\t\tself.__entityCacheRaw = null;\n\n\t\t// Should request caching be used at all?\n\t\tself.enableRequestCache = true;\n\t\t// Cache requests made to the backend to avoid multiple, simultaneous requests for the same resource.\n\t\tself.__requestCache     = {};\n\t\t// When we make HTTP requests, the browser is generally allowed to cache the responses.\n\t\t// The server can control this behavior with cache control HTTPS headers.\n\t\t// However, at times it may be desirable to force the browser to always fetch fresh data from the backend.\n\t\t// This hash controls this behavior.\n\t\tself.allowBrowserCache = ( angular.merge || angular.extend )( {}, {\n\t\t\t// Should browser caching be allowed for initial cache sync operations?\n\t\t\tsync    : true,\n\t\t\t// Should browser caching be allowed when we retrieve single entities from the backend?\n\t\t\trequest : true\n\t\t}, configuration.allowBrowserCache );\n\t\tself.__uncached        = absyncUncachedFilter;\n\n\t\t// Use $http by default and expose it on the service.\n\t\t// This allows the user to set a different, possibly decorated, HTTP interface for this service.\n\t\tself.httpInterface = $http;\n\t\t// Do the same for our logger.\n\t\tself.logInterface  = configuration.debug ? $log : absyncNoopLog;\n\t\t// The scope on which we broadcast all our relevant events.\n\t\tself.scope         = $rootScope;\n\t\t// Keep a reference to $q.\n\t\tself.q             = $q;\n\n\t\t// Prefix log messages with this string.\n\t\tself.logPrefix = \"absync:\" + name.toLocaleUpperCase() + \" \";\n\n\t\t// If enabled, entities received in response to a create or update API call, will be put into the cache.\n\t\t// Otherwise, absync will wait for them to be published through the websocket channel.\n\t\tself.forceEarlyCacheUpdate = false;\n\n\t\t// Throws failures so that they can be handled outside of absync.\n\t\tself.throwFailures = true;\n\n\t\t// Expose the serializer/deserializer so that they can be adjusted at any time.\n\t\tself.serializer   = serializeModel;\n\t\tself.deserializer = deserializeModel;\n\n\t\t// Tell absync to register an event listener for both our entity and its collection.\n\t\t// When we receive these events, we broadcast an equal Angular event on the root scope.\n\t\t// This way the user can already peek at the data (manipulating it is discouraged though).\n\t\tabsync.on( configuration.entityName, self.__onEntityOnWebsocket.bind( self ) );\n\t\tif( configuration.collectionName ) {\n\t\t\tabsync.on( configuration.collectionName, self.__onCollectionOnWebsocket.bind( self ) );\n\t\t}\n\n\t\t// Now we listen on the root scope for the same events we're firing above.\n\t\t// This is where our own absync synchronization logic kicks in.\n\t\t$rootScope.$on( configuration.entityName, self.__onEntityReceived.bind( self ) );\n\t\tif( configuration.collectionName ) {\n\t\t\t$rootScope.$on( configuration.collectionName, self.__onCollectionReceived.bind( self ) );\n\t\t}\n\n\t\tself.logInterface.info( self.logPrefix + \"service was instantiated.\" );\n\t}\n\n\t/**\n\t * Invoked when an entity is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityOnWebsocket = function CacheService$onEntityOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.entityName, message[ configuration.entityName ] );\n\t};\n\n\t/**\n\t * Invoked when a collection is received on a websocket.\n\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t * @param {Object} message\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionOnWebsocket = function CacheService$onCollectionOnWebsocket( message ) {\n\t\tvar self = this;\n\t\tself.scope.$broadcast( configuration.collectionName, message[ configuration.collectionName ] );\n\t};\n\n\t/**\n\t * Event handler for when the initial badge of raw data becomes available.\n\t * @param {Array<Object>|Object} rawData\n\t * @private\n\t */\n\tCacheService.prototype.__onDataAvailable = function CacheService$onDataAvailable( rawData ) {\n\t\tvar self = this;\n\n\t\tif( Array.isArray( self.entityCache ) ) {\n\t\t\t// The symbol self.entityCache is expected to be an empty array.\n\t\t\t// We initialize it in the constructor to an empty array and we don't expect any writes to have\n\t\t\t// happened to it. In case writes *did* happen, we assume that whoever wrote to it knows what\n\t\t\t// they're doing.\n\t\t\tangular.forEach( rawData[ configuration.collectionName ], deserializeCollectionEntry );\n\n\t\t\t// Notify the rest of the application about a fresh collection.\n\t\t\tself.scope.$broadcast( \"collectionNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache\n\t\t\t} );\n\n\t\t} else {\n\t\t\tvar deserialized = self.deserializer( rawData[ configuration.entityName ] );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t}\n\n\t\treturn self.entityCache;\n\n\t\tfunction deserializeCollectionEntry( rawEntity ) {\n\t\t\tself.entityCache.push( self.deserializer( rawEntity ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when an entity is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Object} args The raw object as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onEntityReceived = function CacheService$onEntityReceived( event, args ) {\n\t\tvar self            = this;\n\t\tvar _entityReceived = args;\n\n\t\t// Determine if the received record consists ONLY of an id property,\n\t\t// which would mean that this record was deleted from the backend.\n\t\tif( 1 === Object.keys( _entityReceived ).length && _entityReceived.hasOwnProperty( \"id\" ) ) {\n\t\t\tself.logInterface.info( self.logPrefix + \"Entity was deleted from the server. Updating cache…\" );\n\t\t\treturn self.__removeEntityFromCache( _entityReceived.id );\n\n\t\t} else {\n\t\t\tself.logInterface.debug( self.logPrefix + \"Entity was updated on the server. Updating cache…\" );\n\t\t\treturn self.__updateCacheWithEntity( self.deserializer( _entityReceived ) );\n\t\t}\n\t};\n\n\t/**\n\t * Event handler for when a collection is received on the root scope.\n\t * @param {Object} event The event object.\n\t * @param {Array<Object>} args The raw collection as it was read from the wire.\n\t * @private\n\t */\n\tCacheService.prototype.__onCollectionReceived = function CacheService$onCollectionReceived( event, args ) {\n\t\tvar self                = this;\n\t\tvar _collectionReceived = args;\n\n\t\t// When we're receiving a full collection, all data we currently have in our cache is useless.\n\t\t// We reset the length of the array here, because assigning a new array would possibly conflict\n\t\t// with watchers placed on the original object.\n\t\tself.entityCache.length = 0;\n\n\t\t// Deserialize the received data and place the models in our cache.\n\t\tangular.forEach( _collectionReceived, addEntityToCache );\n\n\t\tfunction addEntityToCache( entityReceived ) {\n\t\t\tvar deserialized = self.deserializer( entityReceived );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t}\n\t};\n\n\t/**\n\t * Ensure that the cached collection is retrieved from the server.\n\t * @param {Boolean} [forceReload=false] Should the data be loaded, even if the service already has a local cache?\n\t * @returns {Promise<Array<configuration.model>>|IPromise<Array>|IPromise<void>|Q.Promise<Array<configuration.model>>|angular.IPromise<TResult>}\n\t */\n\tCacheService.prototype.ensureLoaded = function CacheService$ensureLoaded( forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\t// We only perform any loading, if we don't have raw data cached yet, or if we're forced.\n\t\tif( null === self.__entityCacheRaw || forceReload ) {\n\t\t\tif( !configuration.collectionName || !configuration.collectionUri ) {\n\t\t\t\tif( configuration.entityName && configuration.entityUri ) {\n\t\t\t\t\treturn self.httpInterface\n\t\t\t\t\t\t.get( self.allowBrowserCache.sync ? configuration.entityUri : self.__uncached(\n\t\t\t\t\t\t\tconfiguration.entityUri ) )\n\t\t\t\t\t\t.then( onSingleEntityReceived, onSingleEntityRetrievalFailure );\n\n\t\t\t\t} else {\n\t\t\t\t\t// If the user did not provide information necessary to work with a collection, immediately return\n\t\t\t\t\t// a promise for an empty collection. The user could still use read() to grab individual entities.\n\t\t\t\t\treturn self.q.when( [] );\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tself.logInterface.info( self.logPrefix + \"Retrieving '\" + configuration.collectionName + \"' collection…\" );\n\t\t\t\treturn self.httpInterface\n\t\t\t\t\t.get( self.allowBrowserCache.sync ? configuration.collectionUri : self.__uncached(\n\t\t\t\t\t\tconfiguration.collectionUri ) )\n\t\t\t\t\t.then( onCollectionReceived, onCollectionRetrievalFailure );\n\t\t\t}\n\t\t}\n\n\t\treturn self.q.when( self.entityCache );\n\n\t\t/**\n\t\t * Invoked when the collection was received from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionReceived( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.collectionName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.collectionName + \"'.\" );\n\t\t\t}\n\n\t\t\tself.__entityCacheRaw = serverResponse.data;\n\t\t\tself.entityCache.splice( 0, self.entityCache.length );\n\t\t\treturn self.__onDataAvailable( serverResponse.data );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the collection from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onCollectionRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve the collection from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.__entityCacheRaw = null;\n\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Invoked when the entity was received from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onSingleEntityReceived( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\tself.__entityCacheRaw = serverResponse.data;\n\t\t\tself.__onDataAvailable( serverResponse.data );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onSingleEntityRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve the entity from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.__entityCacheRaw = null;\n\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Pre-seed the cache with the given value.\n\t * Usually, you'd want to follow this up with a sync() to get fully in sync with the backend.\n\t * @param {Object|Array<Object>} cache\n\t * @returns {CacheService}\n\t */\n\tCacheService.prototype.seed = function CacheService$seed( cache ) {\n\t\tvar self              = this;\n\t\tself.__entityCacheRaw = cache;\n\n\t\treturn self.__onDataAvailable( self.__entityCacheRaw );\n\t};\n\n\tCacheService.prototype.sync = function CacheService$sync() {\n\t\tvar self = this;\n\n\t\tself.__entityCacheRaw = null;\n\n\t\treturn self.ensureLoaded( true );\n\t};\n\n\t/**\n\t * Read a single entity from the cache, or load it from the server if required.\n\t * The entity will be placed into the cache.\n\t * @param {String} id The ID of the entity to retrieve.\n\t * @param {Boolean} [forceReload=false] Should the entity be retrieved from the server, even if it is already in the cache?\n\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>|angular.IPromise<TResult>}\n\t */\n\tCacheService.prototype.read = function CacheService$read( id, forceReload ) {\n\t\tvar self = this;\n\n\t\tforceReload = forceReload === true;\n\n\t\tself.logInterface.debug( self.logPrefix + \"Requesting entity '\" + id + \"' (forceReload:\" + forceReload + \")…\" );\n\n\t\tif( !forceReload ) {\n\t\t\t// Check if the entity is in the cache and return instantly if found.\n\t\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t\t     entityIndex < self.entityCache.length;\n\t\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id === id ) {\n\t\t\t\t\tself.logInterface.debug( self.logPrefix + \"Requested entity  '\" + id + \"' is served from cache.\" );\n\t\t\t\t\treturn self.q.when( entity );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.logInterface.debug( self.logPrefix + \"Requested entity  '\" + id + \"' is fetched from backend.\" );\n\n\t\treturn self.__requestEntity( id )\n\t\t\t.then( onEntityRetrieved, onEntityRetrievalFailure );\n\n\t\t/**\n\t\t * Invoked when the entity was retrieved from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrieved( serverResponse ) {\n\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\t// Deserialize the object and place it into the cache.\n\t\t\t// We do not need to check here if the object already exists in the cache.\n\t\t\t// While it could be possible that the same entity is retrieved multiple times, __updateCacheWithEntity\n\t\t\t// will not insert duplicated into the cache.\n\t\t\tvar deserialized = self.deserializer( serverResponse.data[ configuration.entityName ] );\n\t\t\tself.__updateCacheWithEntity( deserialized );\n\t\t\treturn deserialized;\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityRetrievalFailure( serverResponse ) {\n\t\t\tself.logInterface.error( self.logPrefix + \"Unable to retrieve entity with ID '\" + id + \"' from the server.\",\n\t\t\t\tserverResponse );\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Request an entity from the backend.\n\t * @param {String} id The ID of the entity.\n\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>|angular.IPromise<TResult>}\n\t * @private\n\t */\n\tCacheService.prototype.__requestEntity = function CacheService$requestEntity( id ) {\n\t\tvar self = this;\n\n\t\tif( self.enableRequestCache && self.__requestCache && self.__requestCache[ id ] ) {\n\t\t\tself.logInterface.debug( self.logPrefix + \"Entity request    '\" + id + \"' served from request cache.\" );\n\t\t\treturn self.__requestCache[ id ];\n\t\t}\n\n\t\tvar requestUri = configuration.entityUri + ( id ? ( \"/\" + id ) : \"\" );\n\n\t\t// Grab the entity from the backend.\n\t\tvar request = self.httpInterface\n\t\t\t.get( self.allowBrowserCache.request ? requestUri : self.__uncached( requestUri ) )\n\t\t\t.then( removeRequestFromCache.bind( self, id ) );\n\n\t\tif( self.enableRequestCache && self.__requestCache ) {\n\t\t\tself.__requestCache[ id ] = request;\n\t\t}\n\n\t\treturn request;\n\n\t\tfunction removeRequestFromCache( id, serverResponse ) {\n\t\t\tdelete self.__requestCache[ id ];\n\t\t\treturn serverResponse;\n\t\t}\n\t};\n\n\t/**\n\t * Updates an entity and persists it to the backend and the cache.\n\t * @param {configuration.model} entity\n\t * @param {Boolean} [returnResult=false] Should the result of the query be returned?\n\t * @return {Promise<configuration.model>|IPromise<TResult>|angular.IPromise<TResult>} A promise that will be resolved with the updated entity.\n\t */\n\tCacheService.prototype.update = function CacheService$update( entity, returnResult ) {\n\t\tvar self = this;\n\n\t\treturnResult = returnResult || false;\n\n\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\tvar reduced    = self.reduceComplex( entity );\n\t\t// Now serialize the object.\n\t\tvar serialized = self.serializer( reduced );\n\n\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\tvar wrappedEntity                         = {};\n\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\tif( \"undefined\" !== typeof entity.id ) {\n\t\t\treturn self.httpInterface\n\t\t\t\t.put( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t.then( afterEntityStored.bind( self, returnResult ), onEntityStorageFailure.bind( self ) );\n\n\t\t} else {\n\t\t\t// Create a new entity\n\t\t\treturn self.httpInterface\n\t\t\t\t.post( configuration.collectionUri, wrappedEntity )\n\t\t\t\t.then( afterEntityStored.bind( self, returnResult ), onEntityStorageFailure.bind( self ) );\n\t\t}\n\t};\n\n\tCacheService.prototype.patch = function CacheService$patch( entity ) {\n\t\tvar self = this;\n\n\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\tvar reduced    = self.reduceComplex( entity );\n\t\t// Now serialize the object.\n\t\tvar serialized = self.serializer( reduced );\n\n\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\tvar wrappedEntity                         = {};\n\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\tif( \"undefined\" !== typeof entity.id ) {\n\t\t\treturn self.httpInterface\n\t\t\t\t.patch( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t.then( afterEntityStored.bind( self ), onEntityStorageFailure.bind( self ) );\n\n\t\t} else {\n\t\t\tthrow new Error( \"Attempted to patch an entity that was never stored on the server.\" );\n\t\t}\n\t};\n\n\t/**\n\t * Creates a new entity and persists it to the backend and the cache.\n\t */\n\tCacheService.prototype.create = CacheService.prototype.update;\n\n\t/**\n\t * Invoked when the entity was stored on the server.\n\t * @param {Boolean} returnResult Should we return the parsed entity that is contained in the response?\n\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t */\n\tfunction afterEntityStored( returnResult, serverResponse ) {\n\t\tvar self = this;\n\n\t\t// Writing an entity to the backend will usually invoke an update event to be\n\t\t// broadcast over websockets, where we would also retrieve the updated record.\n\t\t// We still put the updated record we receive here into the cache to ensure early consistency, if that is requested.\n\t\tif( !returnResult && !self.forceEarlyCacheUpdate ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif( serverResponse.data[ configuration.entityName ] ) {\n\t\t\tvar rawEntity = serverResponse.data[ configuration.entityName ];\n\t\t\t// If early cache updates are forced, put the return entity into the cache.\n\t\t\tif( self.forceEarlyCacheUpdate ) {\n\t\t\t\tvar newEntity = self.deserializer( rawEntity );\n\t\t\t\tself.__updateCacheWithEntity( newEntity );\n\n\t\t\t\tif( returnResult ) {\n\t\t\t\t\treturn newEntity;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( returnResult ) {\n\t\t\t\treturn rawEntity;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Invoked when there was an error while trying to store the entity on the server.\n\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t */\n\tfunction onEntityStorageFailure( serverResponse ) {\n\t\tvar self = this;\n\n\t\tself.logInterface.error( self.logPrefix + \"Unable to store entity on the server.\",\n\t\t\tserverResponse );\n\t\tself.logInterface.error( serverResponse );\n\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\tif( self.throwFailures ) {\n\t\t\tthrow serverResponse;\n\t\t}\n\t}\n\n\t/**\n\t * Remove an entity from the cache and have it deleted on the backend.\n\t * @param {Object} entity\n\t */\n\tCacheService.prototype.delete = function CacheService$delete( entity ) {\n\t\tvar self = this;\n\n\t\tvar entityId = entity.id;\n\t\treturn self.httpInterface\n\t\t\t.delete( configuration.entityUri + \"/\" + entityId )\n\t\t\t.then( onEntityDeleted )\n\t\t\t.catch( onEntityDeletionFailed );\n\n\t\t/**\n\t\t * Invoked when the entity was deleted from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeleted( serverResponse ) {\n\t\t\treturn self.__removeEntityFromCache( entityId );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when there was an error while trying to delete the entity from the server.\n\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t */\n\t\tfunction onEntityDeletionFailed( serverResponse ) {\n\t\t\tself.logInterface.error( serverResponse.data );\n\t\t\tself.scope.$emit( \"absyncError\", serverResponse );\n\n\t\t\tif( self.throwFailures ) {\n\t\t\t\tthrow serverResponse;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Put an entity into the cache or update the existing record if the entity was already in the cache.\n\t * @param {Object} entityToCache\n\t * @private\n\t */\n\tCacheService.prototype.__updateCacheWithEntity = function CacheService$updateCacheWithEntity( entityToCache ) {\n\t\tvar self = this;\n\n\t\tself.logInterface.info( self.logPrefix + \"Updating entity '\" + ( entityToCache.id || self.name ) + \"' in cache…\",\n\t\t\tentityToCache );\n\n\t\tif( !Array.isArray( self.entityCache ) ) {\n\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\tself.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t{\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : self.entityCache,\n\t\t\t\t\tupdated : entityToCache\n\t\t\t\t} );\n\n\t\t\tif( typeof self.entityCache.copyFrom === \"function\" ) {\n\t\t\t\tself.entityCache.copyFrom( entityToCache );\n\n\t\t\t} else {\n\t\t\t\tangular.extend( self.entityCache, entityToCache );\n\t\t\t}\n\n\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\tself.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t{\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : self.entityCache\n\t\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\tvar found = false;\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == entityToCache.id ) {\n\t\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ],\n\t\t\t\t\t\tupdated : entityToCache\n\t\t\t\t\t} );\n\n\t\t\t\t// Use the \"copyFrom\" method on the entity, if it exists, otherwise use naive approach.\n\t\t\t\tvar targetEntity = self.entityCache[ entityIndex ];\n\t\t\t\tif( typeof targetEntity.copyFrom === \"function\" ) {\n\t\t\t\t\ttargetEntity.copyFrom( entityToCache );\n\n\t\t\t\t} else {\n\t\t\t\t\tangular.extend( targetEntity, entityToCache );\n\t\t\t\t}\n\n\t\t\t\tfound = true;\n\n\t\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t\t{\n\t\t\t\t\t\tservice : self,\n\t\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\t\tentity  : self.entityCache[ entityIndex ]\n\t\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the entity wasn't found in our records, it's a new entity.\n\t\tif( !found ) {\n\t\t\tself.scope.$broadcast( \"beforeEntityNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache,\n\t\t\t\tentity  : entityToCache\n\t\t\t} );\n\n\t\t\tself.entityCache.push( entityToCache );\n\n\t\t\tself.scope.$broadcast( \"entityNew\", {\n\t\t\t\tservice : self,\n\t\t\t\tcache   : self.entityCache,\n\t\t\t\tentity  : entityToCache\n\t\t\t} );\n\t\t}\n\t};\n\n\t/**\n\t * Removes an entity from the internal cache. The entity is not removed from the backend.\n\t * @param {String} id The ID of the entity to remove from the cache.\n\t * @private\n\t */\n\tCacheService.prototype.__removeEntityFromCache = function CacheService$removeEntityFromCache( id ) {\n\t\tvar self = this;\n\n\t\tfor( var entityIndex = 0, entity = self.entityCache[ 0 ];\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex, entity = self.entityCache[ entityIndex ] ) {\n\t\t\tif( entity.id == id ) {\n\t\t\t\t// Before removing the entity, allow the user to react.\n\t\t\t\tself.scope.$broadcast( \"beforeEntityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\n\t\t\t\t// Remove the entity from the cache.\n\t\t\t\tself.entityCache.splice( entityIndex, 1 );\n\n\t\t\t\t// Send another event to allow the user to take note of the removal.\n\t\t\t\tself.scope.$broadcast( \"entityRemoved\", {\n\t\t\t\t\tservice : self,\n\t\t\t\t\tcache   : self.entityCache,\n\t\t\t\t\tentity  : entity\n\t\t\t\t} );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Retrieve an associative array of all cached entities, which uses the ID of the entity records as the key in the array.\n\t * This is a convenience method that is not utilized internally.\n\t * @returns {Array<configuration.model>}\n\t */\n\tCacheService.prototype.lookupTableById = function CacheService$lookupTableById() {\n\t\tvar self = this;\n\n\t\t// TODO: Keep a copy of the lookup table and only update it when the cached data updates\n\t\tvar lookupTable = [];\n\t\tfor( var entityIndex = 0;\n\t\t     entityIndex < self.entityCache.length;\n\t\t     ++entityIndex ) {\n\t\t\tlookupTable[ self.entityCache[ entityIndex ].id ] = self.entityCache[ entityIndex ];\n\t\t}\n\t\treturn lookupTable;\n\t};\n\n\t/**\n\t * Reduce instances of complex types within an entity with their respective IDs.\n\t * Note that no type checks are being performed. Every nested object with an \"id\" property is treated as a complex type.\n\t * @param {Object} entity The entity that should have its complex member reduced.\n\t * @param {Boolean} [arrayInsteadOfObject=false] true if the manipulated entity is an array; false if it's an object.\n\t * @returns {Object|Array} A copy of the input entity, with complex type instances replaced with their respective ID.\n\t */\n\tCacheService.prototype.reduceComplex = function CacheService$reduceComplex( entity, arrayInsteadOfObject ) {\n\t\tvar self = this;\n\n\t\tvar result = arrayInsteadOfObject ? [] : {};\n\t\tfor( var propertyName in entity ) {\n\t\t\tif( !entity.hasOwnProperty( propertyName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Recurse for nested arrays.\n\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\tresult[ propertyName ] = self.reduceComplex( entity[ propertyName ], true );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Replace complex type with its ID.\n\t\t\tif( entity[ propertyName ] && entity[ propertyName ].id ) {\n\t\t\t\tresult[ propertyName ] = entity[ propertyName ].id;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Just copy over the plain property.\n\t\t\tresult[ propertyName ] = entity[ propertyName ];\n\t\t}\n\t\treturn result;\n\t};\n\n\t/**\n\t * Populate references to complex types in an instance.\n\t * @param {Object} entity The entity that should be manipulated.\n\t * @param {String} propertyName The name of the property of entity which should be populated.\n\t * @param {CacheService} cache An instance of another caching service that can provide the complex\n\t * type instances which are being referenced in entity.\n\t * @param {Boolean} [force=false] If true, all complex types will be replaced with references to the\n\t * instances in cache; otherwise, only properties that are string representations of complex type IDs will be replaced.\n\t * @returns {IPromise<TResult>|IPromise<any[]>|IPromise<{}>|angular.IPromise<TResult>}\n\t */\n\tCacheService.prototype.populateComplex = function CacheService$populateComplex( entity, propertyName, cache, force ) {\n\t\tvar self = this;\n\n\t\t// If the target property is an array, ...\n\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t// ...map the elements in the array to promises.\n\t\t\tvar promises = entity[ propertyName ].map( mapElementToPromise );\n\n\t\t\treturn self.q.all( promises );\n\n\t\t} else {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ] === \"object\" && typeof entity[ propertyName ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ] = entity[ propertyName ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ] )\n\t\t\t\t.then( onComplexRetrieved );\n\t\t}\n\n\t\tfunction mapElementToPromise( element, index ) {\n\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\tif( typeof entity[ propertyName ][ index ] !== \"string\" ) {\n\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\tif( force && typeof entity[ propertyName ][ index ] === \"object\" && typeof entity[ propertyName ][ index ].id === \"string\" ) {\n\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\tentity[ propertyName ][ index ] = entity[ propertyName ][ index ].id;\n\n\t\t\t\t} else {\n\t\t\t\t\treturn self.q.when( false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\treturn cache.read( entity[ propertyName ][ index ] )\n\t\t\t\t.then( onComplexRetrieved );\n\n\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t// When the complex was retrieved, store it back into the array.\n\t\t\t\tentity[ propertyName ][ index ] = complex;\n\t\t\t\treturn entity;\n\t\t\t}\n\t\t}\n\n\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t// When the complex was retrieved, store it back into the entity.\n\t\t\tentity[ propertyName ] = complex;\n\t\t}\n\t};\n\n\t/**\n\t * Reset the state of the cache service to when it was first instantiated.\n\t * Assumes that the configuration was not touched.\n\t * This method is primarily targeted at testing, but can be useful in production as well.\n\t */\n\tCacheService.prototype.reset = function CacheService$reset() {\n\t\tvar self = this;\n\n\t\tself.entityCache      = self.configuration.collectionName ? [] : {};\n\t\tself.__entityCacheRaw = null;\n\t\tself.__requestCache   = {};\n\t};\n\n\treturn CacheService;\n}\n\nfunction serializationNoop( model ) {\n\treturn model;\n}\n}());","(function() {\n\"use strict\";\n/* globals angular */\n\nangular\n\t.module( \"absync\" )\n\t.service( \"AbsyncServiceConfiguration\", AbsyncServiceConfigurationFactory );\n\nfunction AbsyncServiceConfigurationFactory() {\n\treturn AbsyncServiceConfiguration;\n}\n\n/**\n * Configuration for an absync service.\n * Using this type is entirely optional. Providing a hash with the same configuration options will work just fine.\n * @param {Object|String} model Reference to a constructor for the model type, or it's name.\n * If a name is given, absync will try to retrieve instances of the type through injection.\n * @param {String} collectionUri The REST API URI where the collection can be found.\n * Must not end with /\n * @param {String} entityUri The REST API URI where single entities out of the collection can be found.\n * Must not end with /\n * @param {String} [collectionName] The name of the collection. Uses the model name suffixed with \"s\" by default.\n * Using the default value is not recommended.\n * @param {String} [entityName] The name of an entity. Uses the model name by default.\n * Using the default value is not recommended.\n * @param {Function} [deserialize] A function that takes an object received from the server and turns it into a model.\n * By default, absync will just store the raw object without extending it to the model type.\n * Deserializers operate on the actual data received from the websocket.\n * @param {Function} [serialize] A function that takes a model and turns it into something the server expects.\n * By default, absync will just send the complete model.\n * Serializers operate on a copy of the actual model, which already had complex members reduced to their IDs.\n * @param {Function} [injector] An injector to use for model instantiation. Uses $injector by default.\n * Usually, you don't need to provide an alternative here.\n * @param {Boolean} [debug=false] Should additional debugging output be enabled?\n * @param {Object} [allowBrowserCache] A hash that controls the browsing caching behavior.\n * @constructor\n */\nfunction AbsyncServiceConfiguration( model, collectionUri, entityUri, collectionName, entityName, deserialize, serialize, injector, debug, allowBrowserCache ) {\n\tthis.model         = model;\n\tthis.collectionUri = collectionUri;\n\tthis.entityUri     = entityUri;\n\n\tvar _modelName      = model.prototype.constructor.name.toLowerCase();\n\tthis.collectionName = collectionName || ( _modelName + \"s\" );\n\tthis.entityName     = entityName || _modelName;\n\n\tthis.deserialize = deserialize || undefined;\n\tthis.serialize   = serialize || undefined;\n\n\tthis.injector = injector || undefined;\n\n\tthis.debug = debug || false;\n\n\tthis.allowBrowserCache = angular.merge( {}, {\n\t\tsync    : true,\n\t\trequest : true\n\t}, allowBrowserCache );\n}\n}());","(function() {\n\"use strict\";\n/* globals angular */\n\nangular\n\t.module( \"absync\" )\n\t.constant( \"absyncNoopLog\", {\n\t\tdebug : angular.noop,\n\t\tinfo  : angular.noop,\n\t\terror : angular.noop\n\t} );\n}());","(function() {\n\"use strict\";\n/* globals angular */\n\nangular\n\t.module( \"absync\" )\n\t.filter( \"absyncUncached\", uncachedFilterProvider );\n\nfunction uncachedFilterProvider() {\n\treturn uncachedFilter;\n\n\tfunction uncachedFilter( url ) {\n\t\tif( !url ) {\n\t\t\treturn url;\n\t\t}\n\n\t\tvar delimiter     = -1 < url.indexOf( \"?\" ) ? \"&\" : \"?\";\n\t\tvar discriminator = new Date().getTime();\n\n\t\treturn url + delimiter + \"t=\" + discriminator;\n\t}\n}\n}());"],"sourceRoot":"/source/"}
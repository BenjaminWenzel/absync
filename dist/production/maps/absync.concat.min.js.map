{"version":3,"sources":["_absync.module.js","absync.js","absync.concat.js","cache-service.js","configuration.js"],"names":["angular","module","undefined","getAbsyncProvider","$provide","absyncCache","AbsyncProvider","_absyncProvider","this","__provide","__absyncCache","__ioSocket","__registerLater","__collections","AbsyncService","parentProvider","__absyncProvider","provider","$inject","prototype","configure","configuration","socket","isSocket","io","Socket","Error","length","forEach","__registerListener","listener","__handleEntityEvent","eventName","callback","collection","name","service","$get","on","_absyncService","push","removeListener","emit","data","apply","arguments","getServiceConstructor","CacheService","$http","$injector","$log","$q","$rootScope","absync","_cacheService","_injector","injector","_injectorHasModel","has","model","_model","get","serializeModel","serialize","serializationNoop","deserializeModel","deserialize","entityCache","__entityCacheRaw","__dataAvailableDeferred","defer","__objectsAvailableDeferred","dataAvailable","promise","objectsAvailable","httpInterface","logInterface","scope","q","logPrefix","toLocaleUpperCase","forceEarlyCacheUpdate","serializer","deserializer","entityName","__onEntityOnWebsocket","bind","collectionName","__onCollectionOnWebsocket","$on","__onEntityReceived","__onCollectionReceived","then","__onDataAvailable","info","message","$broadcast","rawData","deserializeCollectionEntry","rawEntity","resolve","cache","event","args","_entityReceived","Object","keys","hasOwnProperty","__removeEntityFromCache","id","debug","__updateCacheWithEntity","addEntityToCache","entityReceived","deserialized","_collectionReceived","ensureLoaded","forceReload","onCollectionReceived","serverResponse","onCollectionRetrievalFailure","error","$emit","collectionUri","when","all","read","onEntityRetrieved","onEntityRetrievalFailure","entityIndex","entity","entityUri","update","afterEntityStored","newEntity","onEntityStorageFailure","reduced","reduceComplex","serialized","wrappedEntity","put","post","create","onEntityDeleted","entityId","onEntityDeletionFailed","success","entityToCache","found","updated","targetEntity","copyFrom","extend","splice","lookupTableById","lookupTable","arrayInsteadOfObject","result","propertyName","Array","isArray","populateComplex","force","mapElementToPromise","element","index","onComplexRetrieved","complex","promises","map","constant","AbsyncServiceConfigurationFactory","AbsyncServiceConfiguration","_modelName","constructor","toLowerCase"],"mappings":"CAAA,WACC,YAEAA,SAAQC,OAAQ,gBCHhB,SAAUC,GACV,YAsBA,SAASC,GAAmBC,EAAUC,GACrC,MAAO,IAAIC,GAAgBF,EAAUC,GAStC,QAASC,GAAgBF,EAAUC,GAClC,GAAIE,GAAkBC,IAGtBD,GAAgBE,UAAYL,EAE5BG,EAAgBG,cAAgBL,EAGhCE,EAAgBI,WAAa,KAI7BJ,EAAgBK,mBAKhBL,EAAgBM,iBAyFjB,QAASC,GAAeC,GACvBP,KAAKQ,iBAAmBD,EAhIzBf,QACEC,OAAQ,UACRgB,SAAU,SAAUd,GCiBtBA,EAAkBe,SAAW,WAAY,eD6BzCZ,EAAea,UAAUC,UAAY,SAAmCC,GACvE,GAAId,GAAkBC,KAIlBc,EAASD,EAAcC,QAAUD,EAGjCE,EAAWC,IAAMA,GAAGC,QAAUH,YAAkBE,IAAGC,MAEvD,IAAqB,kBAAVH,GAEVf,EAAgBI,WAAaW,QAEvB,CAAA,IAAIC,EAKV,KAAM,IAAIG,OAAO,6EAHjBnB,GAAgBI,WAAaW,EAQ1Bf,EAAgBK,gBAAgBe,SACnCpB,EAAgBK,gBAAgBgB,QAASrB,EAAgBsB,oBACzDtB,EAAgBK,qBAIlBN,EAAea,UAAUU,mBAAqB,SAA4CC,GACzF,GAAIvB,GAAkBC,IACtBD,GAAgBwB,oBAAqBD,EAASE,UAAWF,EAASG,WAWnE3B,EAAea,UAAUe,WAAa,SAAoCC,EAAMd,GAC/E,GAAId,GAAkBC,IAItB,IAAID,EAAgBM,cAAesB,GAClC,KAAM,IAAIT,OAAO,+BAAiCS,EAAO,iEAK1D5B,GAAgBM,cAAesB,GAAS5B,EAAgBG,cAAeyB,EAAMd,GAI7Ed,EAAgBE,UAAU2B,QAASD,EAAM5B,EAAgBM,cAAesB,KASzE7B,EAAea,UAAUkB,KAAO,WAC/B,MAAO,IAAIvB,GAAeN,OAqB3BM,EAAcK,UAAUC,UAAY,SAAkCC,GACrE,GAAId,GAAkBC,KAAKQ,gBAC3BT,GAAgBa,UAAWC,IAW5BP,EAAcK,UAAUmB,GAAK,SAA2BN,EAAWC,GAClE,GAAI1B,GAAkBC,KAAKQ,iBACvBuB,EAAiB/B,IAGrB,OAAKD,GAAgBI,WAed4B,EAAeR,oBAAqBC,EAAWC,GAbjD1B,EAAgBK,gBAAgBe,OAAS,KAErC,MAIRpB,EAAgBK,gBAAgB4B,MAC/BR,UAAYA,EACZC,SAAYA,IAEN,OAYTnB,EAAcK,UAAUY,oBAAsB,SAA4CC,EAAWC,GACpG,GAAI1B,GAAkBC,KAAKQ,gBAM3B,OAHAT,GAAgBI,WAAW2B,GAAIN,EAAWC,GAGnC,WACN1B,EAAgBI,WAAW8B,eAAgBT,EAAWC,KAWxDnB,EAAcK,UAAUuB,KAAO,SAA6BV,EAAWW,EAAMV,GAC5E,GAAI1B,GAAkBC,KAAKQ,gBAE3B,KAAKT,EAAgBI,WACpB,KAAM,IAAIe,OAAO,gCAGlBnB,GAAgBI,WAAW+B,KAAMV,EAAWW,EAAM,WAC7CV,GACHA,EAASW,MAAOrC,EAAgBI,WAAYkC,iBE5N/C,SAAU3C,GACV,YAwBA,SAAS4C,GAAuBX,EAAMd,GAiBrC,QAAS0B,GAAcC,EAAOC,EAAWC,EAAMC,EAAIC,EAAYC,GAC9D,GAAIC,GAAgB9C,KAGhB+C,EAAYlC,EAAcmC,UAAYP,EACtCQ,EAAoBF,EAAUG,IAAKrC,EAAcsC,MACrD,KAAKF,EACJ,KAAM,IAAI/B,OAAO,4BAA8BS,EAAO,4CAA8Cd,EAAcsC,MAAQ,oCAE3H,IAAIC,GAAyC,gBAAxBvC,GAAcsC,MAAuBJ,EAAUM,IAAKxC,EAAcsC,OAAUtC,EAAcsC,MAG3GG,EAAiBF,EAAOG,WAAa1C,EAAc0C,WAAaC,EAChEC,EAAmBL,EAAOM,aAAe7C,EAAc6C,aAAeF,CAG1EV,GAAcnB,KAAOA,EACrBmB,EAAcjC,cAAgBA,EAM9BiC,EAAca,eAEdb,EAAcc,iBAAmB,KAGjCd,EAAce,wBAA0BlB,EAAGmB,QAC3ChB,EAAciB,2BAA6BpB,EAAGmB,QAE9ChB,EAAckB,cAAgBlB,EAAce,wBAAwBI,QAEpEnB,EAAcoB,iBAAmBpB,EAAciB,2BAA2BE,QAI1EnB,EAAcqB,cAAgB3B,EAE9BM,EAAcsB,aAAe1B,EAE7BI,EAAcuB,MAAQzB,EAEtBE,EAAcwB,EAAI3B,EAGlBG,EAAcyB,UAAY,UAAY5C,EAAK6C,oBAAsB,IAIjE1B,EAAc2B,uBAAwB,EAGtC3B,EAAc4B,WAAapB,EAC3BR,EAAc6B,aAAelB,EAK7BZ,EAAOf,GAAIjB,EAAc+D,WAAY9B,EAAc+B,sBAAsBC,KAAMhC,IAC/ED,EAAOf,GAAIjB,EAAckE,eAAgBjC,EAAckC,0BAA0BF,KAAMhC,IAIvFF,EAAWqC,IAAKpE,EAAc+D,WAAY9B,EAAcoC,mBAAmBJ,KAAMhC,IACjFF,EAAWqC,IAAKpE,EAAckE,eAAgBjC,EAAcqC,uBAAuBL,KAAMhC,IAGzFA,EAAckB,cACZoB,KAAMtC,EAAcuC,kBAAkBP,KAAMhC,IAE9CA,EAAcsB,aAAakB,KAAMxC,EAAcyB,UAAY,6BAsiB5D,MD5TAhC,GAAa7B,SAAW,QAAS,YAAa,OAAQ,KAAM,aAAc,UCjO1E6B,EAAa5B,UAAUkE,sBAAwB,SAA6CU,GAC3F,GAAIzC,GAAgB9C,IACpB8C,GAAcuB,MAAMmB,WAAY3E,EAAc+D,WAAYW,EAAS1E,EAAc+D,cASlFrC,EAAa5B,UAAUqE,0BAA4B,SAAiDO,GACnG,GAAIzC,GAAgB9C,IACpB8C,GAAcuB,MAAMmB,WAAY3E,EAAckE,eAAgBQ,EAAS1E,EAAckE,kBAQtFxC,EAAa5B,UAAU0E,kBAAoB,SAAyCI,GAmBnF,QAASC,GAA4BC,GACpC7C,EAAca,YAAY3B,KAAMc,EAAc6B,aAAcgB,IAnB7D,GAAI7C,GAAgB9C,IAMpByF,GAAS5E,EAAckE,gBAAiB3D,QAASsE,GAIjD5C,EAAciB,2BAA2B6B,QAAS9C,EAAca,aAGhEb,EAAcuB,MAAMmB,WAAY,iBAC/B5D,QAAUkB,EACV+C,MAAU/C,EAAca,eAc1BpB,EAAa5B,UAAUuE,mBAAqB,SAA0CY,EAAOC,GAC5F,GAAIjD,GAAgB9C,KAChBgG,EAAkBD,CAIlB,KAAME,OAAOC,KAAMF,GAAkB7E,QAAU6E,EAAgBG,eAAgB,OAClFrD,EAAcsB,aAAakB,KAAMxC,EAAcyB,UAAY,uDAC3DzB,EAAcsD,wBAAyBJ,EAAgBK,MAGvDvD,EAAcsB,aAAakC,MAAOxD,EAAcyB,UAAY,qDAC5DzB,EAAcyD,wBAAyBzD,EAAc6B,aAAcqB,MAUrEzD,EAAa5B,UAAUwE,uBAAyB,SAA8CW,EAAOC,GAYpG,QAASS,GAAkBC,GAC1B,GAAIC,GAAe5D,EAAc6B,aAAc8B,EAC/C3D,GAAcyD,wBAAyBG,GAbxC,GAAI5D,GAAgB9C,KAChB2G,EAAsBZ,CAK1BjD,GAAca,YAAYxC,OAAS,EAGnCwF,EAAoBvF,QAASoF,IAc9BjE,EAAa5B,UAAUiG,aAAe,SAAoCC,GAwCzE,QAASC,GAAsBC,GAC9B,IAAKA,EAAe5E,KAAMtB,EAAckE,gBACvC,KAAM,IAAI7D,OAAO,+FAAiGL,EAAckE,eAAiB,KAGlJjC,GAAcc,iBAAmBmD,EAAe5E,KAChDW,EAAce,wBAAwB+B,QAASmB,EAAe5E,MAO/D,QAAS6E,GAA8BD,GACtCjE,EAAcsB,aAAa6C,MAAOnE,EAAcyB,UAAY,qDAAsDwC,GAClHjE,EAAcc,iBAAmB,KACjCd,EAAcuB,MAAM6C,MAAO,cAAeH,GAvD3C,GAAIjE,GAAgB9C,IAKpB,IAHA6G,EAAeA,KAAgB,EAG3B,OAAS/D,EAAcc,kBAAoBiD,EAAc,CAK5D,GAJA/D,EAAcc,qBAIT/C,EAAckE,iBAAmBlE,EAAcsG,cAGnD,MAAOrE,GAAcwB,EAAE8C,QAGxBtE,GAAcsB,aAAakB,KAAMxC,EAAcyB,UAAY,eAAiB1D,EAAckE,eAAiB,iBAC3GjC,EAAcqB,cACZd,IAAKxC,EAAcsG,eACnB/B,KAAM0B,EAAsBE,GAO/B,MAAOlE,GAAcwB,EAAE+C,KAErBvE,EAAckB,cACdlB,EAAcoB,mBAEdkB,KAAM,WACN,MAAOtC,GAAca,eAkCxBpB,EAAa5B,UAAU2G,KAAO,SAA4BjB,EAAIQ,GA6B7D,QAASU,GAAmBR,GAC3B,IAAKA,EAAe5E,KAAMtB,EAAc+D,YACvC,KAAM,IAAI1D,OAAO,+FAAiGL,EAAc+D,WAAa,KAO9I,IAAI8B,GAAe5D,EAAc6B,aAAcoC,EAAe5E,KAAMtB,EAAc+D,YAElF,OADA9B,GAAcyD,wBAAyBG,GAChCA,EAOR,QAASc,GAA0BT,GAClCjE,EAAcsB,aAAa6C,MAAOnE,EAAcyB,UAAY,sCAAwC8B,EAAK,qBAAsBU,GAC/HjE,EAAcuB,MAAM6C,MAAO,cAAeH,GAhD3C,GAAIjE,GAAgB9C,IAIpB,IAFA6G,EAAeA,KAAgB,GAE1BA,EAEJ,IAAK,GAAIY,GAAc,EAAGC,EAAS5E,EAAca,YAAa,GACzD8D,EAAc3E,EAAca,YAAYxC,SACtCsG,EAAaC,EAAS5E,EAAca,YAAa8D,GACvD,GAAIC,EAAOrB,KAAOA,EAGjB,MAAOvD,GAAcwB,EAAE8C,KAAMM,EAQhC,OAAO5E,GAAcqB,cACnBd,IAAKxC,EAAc8G,UAAY,IAAMtB,GACrCjB,KAAMmC,EAAmBC,IAmC5BjF,EAAa5B,UAAUiH,OAAS,SAA8BF,GAkC7D,QAASG,GAAmBd,GAK3B,GAAIA,EAAe5E,KAAMtB,EAAc+D,YAAe,CACrD,GAAIkD,GAAYhF,EAAc6B,aAAcoC,EAAe5E,KAAMtB,EAAc+D,YAM/E,OAHI9B,GAAc2B,uBACjB3B,EAAcyD,wBAAyBuB,GAEjCA,EAER,KAAM,IAAI5G,OAAO,+FAAiGL,EAAc+D,WAAa,MAO9I,QAASmD,GAAwBhB,GAChCjE,EAAcsB,aAAa6C,MAAOnE,EAAcyB,UAAY,wCAAyCwC,GACrGjE,EAAcsB,aAAa6C,MAAOF,GAxDnC,GAAIjE,GAAgB9C,KAGhBgI,EAAUlF,EAAcmF,cAAeP,GAEvCQ,EAAapF,EAAc4B,WAAYsD,GAGvCG,IAKJ,OAJAA,GAAetH,EAAc+D,YAAesD,EAIxC,mBAAwBR,GAAO,GAG3B5E,EAAcqB,cACnBiE,IAAKvH,EAAc8G,UAAY,IAAMD,EAAOrB,GAAI8B,GAChD/C,KAAMyC,EAAmBE,GAMpBjF,EAAcqB,cACnBkE,KAAMxH,EAAcsG,cAAegB,GACnC/C,KAAMyC,EAAmBE,IAsC7BxF,EAAa5B,UAAU2H,OAAS/F,EAAa5B,UAAUiH,OAMvDrF,EAAa5B,UAAb4B,UAAgC,SAA8BmF,GAc7D,QAASa,GAAiBxB,GACzB,MAAOjE,GAAcsD,wBAAyBoC,GAO/C,QAASC,GAAwB1B,GAEhC,KADAjE,GAAcsB,aAAa6C,MAAOF,EAAe5E,MAC3C,GAAIjB,OAAO,4BAvBlB,GAAI4B,GAAgB9C,KAEhBwI,EAAWd,EAAOrB,EACtB,OAAOvD,GAAcqB,cAAdrB,UACGjC,EAAc8G,UAAY,IAAMa,GACxCE,QAASH,GACTtB,MAAOwB,IA0BVlG,EAAa5B,UAAU4F,wBAA0B,SAA+CoC,GAC/F,GAAI7F,GAAgB9C,IAEpB8C,GAAcsB,aAAakB,KAAMxC,EAAcyB,UAAY,4BAG3D,KAAK,GADDqE,IAAQ,EACHnB,EAAc,EAAGC,EAAS5E,EAAca,YAAa,GACzD8D,EAAc3E,EAAca,YAAYxC,SACtCsG,EAAaC,EAAS5E,EAAca,YAAa8D,GACvD,GAAIC,EAAOrB,IAAMsC,EAActC,GAAK,CAEnCvD,EAAcuB,MAAMmB,WAAY,uBAE9B5D,QAAUkB,EACV+C,MAAU/C,EAAca,YACxB+D,OAAU5E,EAAca,YAAa8D,GACrCoB,QAAUF,GAIZ,IAAIG,GAAehG,EAAca,YAAa8D,EAET,mBAA1BqB,GAAaC,SAEvBD,EAAaC,SAAUJ,GAGvBnJ,QAAQwJ,OAAQF,EAAcH,GAG/BC,GAAQ,EAGR9F,EAAcuB,MAAMmB,WAAY,iBAE9B5D,QAAUkB,EACV+C,MAAU/C,EAAca,YACxB+D,OAAU5E,EAAca,YAAa8D,IAEvC,OAKGmB,IACJ9F,EAAca,YAAY3B,KAAM2G,GAChC7F,EAAcuB,MAAMmB,WAAY,aAC/B5D,QAAUkB,EACV+C,MAAU/C,EAAca,YACxB+D,OAAUiB,MAUbpG,EAAa5B,UAAUyF,wBAA0B,SAA+CC,GAG/F,IAAK,GAFDvD,GAAgB9C,KAEXyH,EAAc,EAAGC,EAAS5E,EAAca,YAAa,GACzD8D,EAAc3E,EAAca,YAAYxC,SACtCsG,EAAaC,EAAS5E,EAAca,YAAa8D,GACvD,GAAIC,EAAOrB,IAAMA,EAAK,CAErBvD,EAAcuB,MAAMmB,WAAY,uBAC/B5D,QAAUkB,EACV+C,MAAU/C,EAAca,YACxB+D,OAAUA,IAIX5E,EAAca,YAAYsF,OAAQxB,EAAa,GAG/C3E,EAAcuB,MAAMmB,WAAY,iBAC/B5D,QAAUkB,EACV+C,MAAU/C,EAAca,YACxB+D,OAAUA,GAEX,SAWHnF,EAAa5B,UAAUuI,gBAAkB,WAKxC,IAAK,GAJDpG,GAAgB9C,KAGhBmJ,KACK1B,EAAc,EAClBA,EAAc3E,EAAca,YAAYxC,SACtCsG,EACN0B,EAAarG,EAAca,YAAa8D,GAAcpB,IAAOvD,EAAca,YAAa8D,EAEzF,OAAO0B,IAUR5G,EAAa5B,UAAUsH,cAAgB,SAAqCP,EAAQ0B,GACnF,GAAItG,GAAgB9C,KAEhBqJ,EAASD,OACb,KAAK,GAAIE,KAAgB5B,GACnBA,EAAOvB,eAAgBmD,KAM3BD,EAAQC,GADLC,MAAMC,QAAS9B,EAAQ4B,IACDxG,EAAcmF,cAAeP,EAAQ4B,IAAgB,GAK3E5B,EAAQ4B,IAAkB5B,EAAQ4B,GAAejD,GAC3BqB,EAAQ4B,GAAejD,GAKxBqB,EAAQ4B,GAElC,OAAOD,IAcR9G,EAAa5B,UAAU8I,gBAAkB,SAAuC/B,EAAQ4B,EAAczD,EAAO6D,GAmC5G,QAASC,GAAqBC,EAASC,GAiBtC,QAASC,GAAoBC,GAE5BrC,EAAQ4B,GAAgBO,GAAUE,EAjBnC,GAA+C,gBAApCrC,GAAQ4B,GAAgBO,GAAuB,CAEzD,IAAIH,GAAoD,gBAApChC,GAAQ4B,GAAgBO,IAAsE,gBAAvCnC,GAAQ4B,GAAgBO,GAAQxD,GAK1G,MAAOvD,GAAcwB,EAAE8C,MAAM,EAH7BM,GAAQ4B,GAAgBO,GAAUnC,EAAQ4B,GAAgBO,GAAQxD,GAQpE,MAAOR,GAAMyB,KAAMI,EAAQ4B,GAAgBO,IACzCzE,KAAM0E,GAQT,QAASA,GAAoBC,GAE5BrC,EAAQ4B,GAAiBS,EA3D1B,GAAIjH,GAAgB9C,IAGpB,IAAIuJ,MAAMC,QAAS9B,EAAQ4B,IAAmB,CAE7C,GAAIU,GAAWtC,EAAQ4B,GAAeW,IAAKN,EAI3C,OAAO7G,GAAcwB,EAAE+C,IAAK2C,GAI5B,GAAsC,gBAA3BtC,GAAQ4B,GAA8B,CAEhD,IAAII,GAA2C,gBAA3BhC,GAAQ4B,IAAoE,gBAA9B5B,GAAQ4B,GAAejD,GAOxF,MAAOvD,GAAcwB,EAAE8C,MAAM,EAL7BM,GAAQ4B,GAAiB5B,EAAQ4B,GAAejD,GAYlD,MAAOR,GAAMyB,KAAMI,EAAQ4B,IACzBlE,KAAM0E,IAiCHvH,EAGR,QAASiB,GAAmBL,GAC3B,MAAOA,GA9oBR3D,QACEC,OAAQ,UACRyK,SAAU,cAAe5H,MCf3B,SAAU5C,GACV,YAMA,SAASyK,KACR,MAAOC,GA0BR,QAASA,GAA4BjH,EAAOgE,EAAeQ,EAAW5C,EAAgBH,EAAYlB,EAAaH,EAAWP,GACzHhD,KAAKmD,MAAQA,EACbnD,KAAKmH,cAAgBA,EACrBnH,KAAK2H,UAAYA,CAEjB,IAAI0C,GAAalH,EAAMxC,UAAU2J,YAAY3I,KAAK4I,aAClDvK,MAAK+E,eAAiBA,GAAoBsF,EAAa,IACvDrK,KAAK4E,WAAaA,GAAcyF,EAEhCrK,KAAK0D,YAAcA,GAAehE,EAClCM,KAAKuD,UAAYA,GAAa7D,EAE9BM,KAAKgD,SAAWA,GAAYtD,EA3C7BF,QACEC,OAAQ,UACRmC,QAAS,6BAA8BuI","file":"absync.concat.min.js","sourcesContent":["(function() {\n\t\"use strict\";\n\n\tangular.module( \"absync\", [\n\t] );\n})();\n","(function( undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * Please make note of the following conventions:\n\t * 1. Function-scope local variables must be prefixed with a single underscore.\n\t *    This indicates a temporary variable.\n\t * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n\t *    This indicates a publicly visible, private variable.\n\t *    Hiding private variables, by using closures, is discouraged.\n\t *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n\t */\n\n\tangular\n\t\t.module( \"absync\" )\n\t\t.provider( \"absync\", getAbsyncProvider );\n\n\t/**\n\t * Retrieves the absync provider.\n\t * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n\t * @param {Function} absyncCache The AbsyncCache service constructor.\n\t * @ngInject\n\t */\n\tfunction getAbsyncProvider( $provide, absyncCache ) {\n\t\treturn new AbsyncProvider( $provide, absyncCache );\n\t}\n\n\t/**\n\t * Retrieves the absync provider.\n\t * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n\t * @param {Function} absyncCache The AbsyncCache service constructor.\n\t * @constructor\n\t */\n\tfunction AbsyncProvider( $provide, absyncCache ) {\n\t\tvar _absyncProvider = this;\n\n\t\t// Store a reference to the provide provider.\n\t\t_absyncProvider.__provide = $provide;\n\t\t// Store a reference to the cache service constructor.\n\t\t_absyncProvider.__absyncCache = absyncCache;\n\n\t\t// A reference to the socket.io instance we're using to receive updates from the server.\n\t\t_absyncProvider.__ioSocket = null;\n\t\t// We usually register event listeners on the socket.io instance right away.\n\t\t// If socket.io was not connected when a service was constructed, we put the registration request\n\t\t// into this array and register it as soon as socket.io is configured.\n\t\t_absyncProvider.__registerLater = [];\n\n\t\t// The collections that absync provides.\n\t\t// The keys are the names of the collections, the value contains the constructor of\n\t\t// the respective cache service.\n\t\t_absyncProvider.__collections = {};\n\t}\n\n\t/**\n\t * Register the configurator on the provider itself to allow early configuration during setup phase.\n\t * It is recommended to configure absync within a configuration phase of a module.\n\t * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n\t * Can also be a constructor for a socket.\n\t * Can also be an object with a \"socket\" member that provides either of the above.\n\t */\n\tAbsyncProvider.prototype.configure = function AbsyncProvider$configure( configuration ) {\n\t\tvar _absyncProvider = this;\n\n\t\t// If the configuration has a \"socket\" member, unpack it.\n\t\t//noinspection JSUnresolvedVariable\n\t\tvar socket = configuration.socket || configuration;\n\t\t// Determine if the socket is an io.Socket.\n\t\t//noinspection JSUnresolvedVariable\n\t\tvar isSocket = io && io.Socket && socket instanceof io.Socket;\n\n\t\tif( typeof socket == \"function\" ) {\n\t\t\t// Expect the passed socket to be a constructor.\n\t\t\t_absyncProvider.__ioSocket = socket();\n\n\t\t} else if( isSocket ) {\n\t\t\t// Expect the passed socket to be an io.Socket instance.\n\t\t\t_absyncProvider.__ioSocket = socket;\n\n\t\t} else {\n\t\t\tthrow new Error( \"configure() expects input to be a function or a socket.io Socket instance.\" );\n\t\t}\n\n\t\t// Check if services already tried to register listeners, if so, register them now.\n\t\t// This can happen when a service was constructed before absync was configured.\n\t\tif( _absyncProvider.__registerLater.length ) {\n\t\t\t_absyncProvider.__registerLater.forEach( _absyncProvider.__registerListener );\n\t\t\t_absyncProvider.__registerLater = [];\n\t\t}\n\t};\n\n\tAbsyncProvider.prototype.__registerListener = function AbsyncProvider$__registerListener( listener ) {\n\t\tvar _absyncProvider = this;\n\t\t_absyncProvider.__handleEntityEvent( listener.eventName, listener.callback );\n\t};\n\n\t//TODO: Remove this noinspection when WebStorm 11 is available.\n\t//noinspection JSValidateJSDoc\n\t/**\n\t * Request a new synchronized collection.\n\t * This only registers the intent to use that collection. It will be constructed when it is first used.\n\t * @param {String} name The name of the collection and service name.\n\t * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this collection.\n\t */\n\tAbsyncProvider.prototype.collection = function AbsyncProvider$collection( name, configuration ) {\n\t\tvar _absyncProvider = this;\n\n\t\t// Collection names (and, thus service names) have to be unique.\n\t\t// We can't create multiple services with the same name.\n\t\tif( _absyncProvider.__collections[ name ] ) {\n\t\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for collections must be unique.\" );\n\t\t}\n\n\t\t// Register the service configuration.\n\t\t// __absyncCache will return a constructor for a service with the given configuration.\n\t\t_absyncProvider.__collections[ name ] = _absyncProvider.__absyncCache( name, configuration );\n\n\t\t// Register the new service.\n\t\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\t\t_absyncProvider.__provide.service( name, _absyncProvider.__collections[ name ] );\n\t};\n\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Register the service factory.\n\t * @returns {AbsyncService}\n\t * @ngInject\n\t */\n\tAbsyncProvider.prototype.$get = function AbsyncProvider$$get() {\n\t\treturn new AbsyncService( this );\n\t};\n\n\n\t/**\n\t * The service that is received when injecting \"absync\".\n\t * This service is primarily used internally to set up the connection between socket.io and the individual\n\t * caching services.\n\t * @param {AbsyncProvider|Object} parentProvider The AbsyncProvider that provides this service.\n\t * @constructor\n\t */\n\tfunction AbsyncService( parentProvider ) {\n\t\tthis.__absyncProvider = parentProvider;\n\t}\n\n\t/**\n\t * Configure the socket.io connection for absync.\n\t * This configuration of absync should usually be performed through the absyncProvider in the configuration\n\t * phase of a module.\n\t * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n\t */\n\tAbsyncService.prototype.configure = function AbsyncService$configure( configuration ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\t\t_absyncProvider.configure( configuration );\n\t};\n\n\t/**\n\t * Register an event listener that is called when a specific entity is received on the websocket.\n\t * @param {String} eventName The event name, usually the name of the entity.\n\t * @param {Function} callback The function to call when the entity is received.\n\t * @return {Function|null} If the listener could be registered, it returns a function that, when called, removes\n\t * the event listener.\n\t * If the listener registration was delayed, null is returned.\n\t */\n\tAbsyncService.prototype.on = function AbsyncService$on( eventName, callback ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\t\tvar _absyncService = this;\n\n\t\t// If we have no configured socket.io connection yet, remember to register it later.\n\t\tif( !_absyncProvider.__ioSocket ) {\n\n\t\t\tif( _absyncProvider.__registerLater.length > 8192 ) {\n\t\t\t\t// Be defensive, something is probably not right here.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// TODO: Use promises here, so that we can always return the event listener removal function.\n\t\t\t_absyncProvider.__registerLater.push( {\n\t\t\t\teventName : eventName,\n\t\t\t\tcallback  : callback\n\t\t\t} );\n\t\t\treturn null;\n\t\t}\n\n\t\treturn _absyncService.__handleEntityEvent( eventName, callback );\n\t};\n\n\t/**\n\t * Register an event listener on the websocket.\n\t * @param {String} eventName The event name, usually the name of the entity.\n\t * @param {Function} callback The function to call when the entity is received.\n\t * @returns {Function}\n\t */\n\tAbsyncService.prototype.__handleEntityEvent = function AbsyncService$__handleEntityEvent( eventName, callback ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\n\t\t// Register the callback with socket.io.\n\t\t_absyncProvider.__ioSocket.on( eventName, callback );\n\n\t\t// Return a function that removes the listener.\n\t\treturn function removeListener() {\n\t\t\t_absyncProvider.__ioSocket.removeListener( eventName, callback );\n\t\t};\n\t};\n\n\t/**\n\t * Convenience method to allow the user to emit() from the websocket.\n\t * This is not utilized in absync internally.\n\t * @param {String} eventName\n\t * @param {*} data\n\t * @param {Function} [callback]\n\t */\n\tAbsyncService.prototype.emit = function AbsyncService$emit( eventName, data, callback ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\n\t\tif( !_absyncProvider.__ioSocket ) {\n\t\t\tthrow new Error( \"socket.io is not initialized.\" );\n\t\t}\n\n\t\t_absyncProvider.__ioSocket.emit( eventName, data, function afterEmit() {\n\t\t\tif( callback ) {\n\t\t\t\tcallback.apply( _absyncProvider.__ioSocket, arguments );\n\t\t\t}\n\t\t} );\n\t};\n}());\n","(function() {\n\t\"use strict\";\n\n\tangular.module( \"absync\", [\n\t] );\n})();\n;(function( undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * Please make note of the following conventions:\n\t * 1. Function-scope local variables must be prefixed with a single underscore.\n\t *    This indicates a temporary variable.\n\t * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n\t *    This indicates a publicly visible, private variable.\n\t *    Hiding private variables, by using closures, is discouraged.\n\t *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n\t */\n\n\tangular\n\t\t.module( \"absync\" )\n\t\t.provider( \"absync\", getAbsyncProvider );\n\n\t/**\n\t * Retrieves the absync provider.\n\t * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n\t * @param {Function} absyncCache The AbsyncCache service constructor.\n\t * @ngInject\n\t */\n\tfunction getAbsyncProvider( $provide, absyncCache ) {\n\t\treturn new AbsyncProvider( $provide, absyncCache );\n\t}\r\n\tgetAbsyncProvider.$inject = [\"$provide\", \"absyncCache\"];\n\n\t/**\n\t * Retrieves the absync provider.\n\t * @param {angular.auto.IProvideService|Object} $provide The $provide provider\n\t * @param {Function} absyncCache The AbsyncCache service constructor.\n\t * @constructor\n\t */\n\tfunction AbsyncProvider( $provide, absyncCache ) {\n\t\tvar _absyncProvider = this;\n\n\t\t// Store a reference to the provide provider.\n\t\t_absyncProvider.__provide = $provide;\n\t\t// Store a reference to the cache service constructor.\n\t\t_absyncProvider.__absyncCache = absyncCache;\n\n\t\t// A reference to the socket.io instance we're using to receive updates from the server.\n\t\t_absyncProvider.__ioSocket = null;\n\t\t// We usually register event listeners on the socket.io instance right away.\n\t\t// If socket.io was not connected when a service was constructed, we put the registration request\n\t\t// into this array and register it as soon as socket.io is configured.\n\t\t_absyncProvider.__registerLater = [];\n\n\t\t// The collections that absync provides.\n\t\t// The keys are the names of the collections, the value contains the constructor of\n\t\t// the respective cache service.\n\t\t_absyncProvider.__collections = {};\n\t}\n\n\t/**\n\t * Register the configurator on the provider itself to allow early configuration during setup phase.\n\t * It is recommended to configure absync within a configuration phase of a module.\n\t * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n\t * Can also be a constructor for a socket.\n\t * Can also be an object with a \"socket\" member that provides either of the above.\n\t */\n\tAbsyncProvider.prototype.configure = function AbsyncProvider$configure( configuration ) {\n\t\tvar _absyncProvider = this;\n\n\t\t// If the configuration has a \"socket\" member, unpack it.\n\t\t//noinspection JSUnresolvedVariable\n\t\tvar socket = configuration.socket || configuration;\n\t\t// Determine if the socket is an io.Socket.\n\t\t//noinspection JSUnresolvedVariable\n\t\tvar isSocket = io && io.Socket && socket instanceof io.Socket;\n\n\t\tif( typeof socket == \"function\" ) {\n\t\t\t// Expect the passed socket to be a constructor.\n\t\t\t_absyncProvider.__ioSocket = socket();\n\n\t\t} else if( isSocket ) {\n\t\t\t// Expect the passed socket to be an io.Socket instance.\n\t\t\t_absyncProvider.__ioSocket = socket;\n\n\t\t} else {\n\t\t\tthrow new Error( \"configure() expects input to be a function or a socket.io Socket instance.\" );\n\t\t}\n\n\t\t// Check if services already tried to register listeners, if so, register them now.\n\t\t// This can happen when a service was constructed before absync was configured.\n\t\tif( _absyncProvider.__registerLater.length ) {\n\t\t\t_absyncProvider.__registerLater.forEach( _absyncProvider.__registerListener );\n\t\t\t_absyncProvider.__registerLater = [];\n\t\t}\n\t};\n\n\tAbsyncProvider.prototype.__registerListener = function AbsyncProvider$__registerListener( listener ) {\n\t\tvar _absyncProvider = this;\n\t\t_absyncProvider.__handleEntityEvent( listener.eventName, listener.callback );\n\t};\n\n\t//TODO: Remove this noinspection when WebStorm 11 is available.\n\t//noinspection JSValidateJSDoc\n\t/**\n\t * Request a new synchronized collection.\n\t * This only registers the intent to use that collection. It will be constructed when it is first used.\n\t * @param {String} name The name of the collection and service name.\n\t * @param {AbsyncServiceConfiguration|Object} configuration The configuration for this collection.\n\t */\n\tAbsyncProvider.prototype.collection = function AbsyncProvider$collection( name, configuration ) {\n\t\tvar _absyncProvider = this;\n\n\t\t// Collection names (and, thus service names) have to be unique.\n\t\t// We can't create multiple services with the same name.\n\t\tif( _absyncProvider.__collections[ name ] ) {\n\t\t\tthrow new Error( \"A collection with the name '\" + name + \"' was already requested. Names for collections must be unique.\" );\n\t\t}\n\n\t\t// Register the service configuration.\n\t\t// __absyncCache will return a constructor for a service with the given configuration.\n\t\t_absyncProvider.__collections[ name ] = _absyncProvider.__absyncCache( name, configuration );\n\n\t\t// Register the new service.\n\t\t// Yes, we want an Angular \"service\" here, because we want it constructed with \"new\".\n\t\t_absyncProvider.__provide.service( name, _absyncProvider.__collections[ name ] );\n\t};\n\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Register the service factory.\n\t * @returns {AbsyncService}\n\t * @ngInject\n\t */\n\tAbsyncProvider.prototype.$get = function AbsyncProvider$$get() {\n\t\treturn new AbsyncService( this );\n\t};\n\n\n\t/**\n\t * The service that is received when injecting \"absync\".\n\t * This service is primarily used internally to set up the connection between socket.io and the individual\n\t * caching services.\n\t * @param {AbsyncProvider|Object} parentProvider The AbsyncProvider that provides this service.\n\t * @constructor\n\t */\n\tfunction AbsyncService( parentProvider ) {\n\t\tthis.__absyncProvider = parentProvider;\n\t}\n\n\t/**\n\t * Configure the socket.io connection for absync.\n\t * This configuration of absync should usually be performed through the absyncProvider in the configuration\n\t * phase of a module.\n\t * @param {io.Socket|Function|Object} configuration The socket.io instance to use.\n\t */\n\tAbsyncService.prototype.configure = function AbsyncService$configure( configuration ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\t\t_absyncProvider.configure( configuration );\n\t};\n\n\t/**\n\t * Register an event listener that is called when a specific entity is received on the websocket.\n\t * @param {String} eventName The event name, usually the name of the entity.\n\t * @param {Function} callback The function to call when the entity is received.\n\t * @return {Function|null} If the listener could be registered, it returns a function that, when called, removes\n\t * the event listener.\n\t * If the listener registration was delayed, null is returned.\n\t */\n\tAbsyncService.prototype.on = function AbsyncService$on( eventName, callback ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\t\tvar _absyncService = this;\n\n\t\t// If we have no configured socket.io connection yet, remember to register it later.\n\t\tif( !_absyncProvider.__ioSocket ) {\n\n\t\t\tif( _absyncProvider.__registerLater.length > 8192 ) {\n\t\t\t\t// Be defensive, something is probably not right here.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// TODO: Use promises here, so that we can always return the event listener removal function.\n\t\t\t_absyncProvider.__registerLater.push( {\n\t\t\t\teventName : eventName,\n\t\t\t\tcallback  : callback\n\t\t\t} );\n\t\t\treturn null;\n\t\t}\n\n\t\treturn _absyncService.__handleEntityEvent( eventName, callback );\n\t};\n\n\t/**\n\t * Register an event listener on the websocket.\n\t * @param {String} eventName The event name, usually the name of the entity.\n\t * @param {Function} callback The function to call when the entity is received.\n\t * @returns {Function}\n\t */\n\tAbsyncService.prototype.__handleEntityEvent = function AbsyncService$__handleEntityEvent( eventName, callback ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\n\t\t// Register the callback with socket.io.\n\t\t_absyncProvider.__ioSocket.on( eventName, callback );\n\n\t\t// Return a function that removes the listener.\n\t\treturn function removeListener() {\n\t\t\t_absyncProvider.__ioSocket.removeListener( eventName, callback );\n\t\t};\n\t};\n\n\t/**\n\t * Convenience method to allow the user to emit() from the websocket.\n\t * This is not utilized in absync internally.\n\t * @param {String} eventName\n\t * @param {*} data\n\t * @param {Function} [callback]\n\t */\n\tAbsyncService.prototype.emit = function AbsyncService$emit( eventName, data, callback ) {\n\t\tvar _absyncProvider = this.__absyncProvider;\n\n\t\tif( !_absyncProvider.__ioSocket ) {\n\t\t\tthrow new Error( \"socket.io is not initialized.\" );\n\t\t}\n\n\t\t_absyncProvider.__ioSocket.emit( eventName, data, function afterEmit() {\n\t\t\tif( callback ) {\n\t\t\t\tcallback.apply( _absyncProvider.__ioSocket, arguments );\n\t\t\t}\n\t\t} );\n\t};\n}());\n;(function( undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * Please make note of the following conventions:\n\t * 1. Function-scope local variables must be prefixed with a single underscore.\n\t *    This indicates a temporary variable.\n\t * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n\t *    This indicates a publicly visible, private variable.\n\t *    Hiding private variables, by using closures, is discouraged.\n\t *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n\t */\n\n\tangular\n\t\t.module( \"absync\" )\n\t\t.constant( \"absyncCache\", getServiceConstructor );\n\n\t//TODO: Remove this noinspection when WebStorm 11 is available.\n\t//noinspection JSValidateJSDoc\n\t/**\n\t * A closure to make the configuration available to the cache service.\n\t * @param {String} name The name of the service.\n\t * @param {AbsyncServiceConfiguration} configuration The configuration for this service.\n\t * @returns {CacheService}\n\t */\n\tfunction getServiceConstructor( name, configuration ) {\n\t\t// There is no code here, other than the CacheService definition, followed by \"return CacheService;\"\n\n\t\t//noinspection JSValidateJSDoc\n\t\t/**\n\t\t * This service factory is the core of absync.\n\t\t * It returns a CacheService instance that is specialized to the given configuration.\n\t\t * This service will handle keep the stored collection in sync.\n\t\t * @param {angular.IHttpService|Object} $http\n\t\t * @param {angular.auto.IInjectorService|Object} $injector\n\t\t * @param {angular.ILogService|Object} $log\n\t\t * @param {angular.IQService|Object} $q\n\t\t * @param {angular.IRootScopeService|Object} $rootScope\n\t\t * @param {AbsyncService} absync\n\t\t * @returns {CacheService}\n\t\t * @ngInject\n\t\t */\n\t\tfunction CacheService( $http, $injector, $log, $q, $rootScope, absync ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// Retrieve a reference to the model of the collection that is being cached.\n\t\t\tvar _injector = configuration.injector || $injector;\n\t\t\tvar _injectorHasModel = _injector.has( configuration.model );\n\t\t\tif( !_injectorHasModel ) {\n\t\t\t\tthrow new Error( \"Unable to construct the '\" + name + \"' service, because the referenced model '\" + configuration.model + \"' is not available for injection.\" );\n\t\t\t}\n\t\t\tvar _model = (typeof configuration.model === \"string\" ) ? _injector.get( configuration.model ) : configuration.model;\n\n\t\t\t// Retrieve the serialization methods.\n\t\t\tvar serializeModel = _model.serialize || configuration.serialize || serializationNoop;\n\t\t\tvar deserializeModel = _model.deserialize || configuration.deserialize || serializationNoop;\n\n\t\t\t// Store configuration.\n\t\t\t_cacheService.name = name;\n\t\t\t_cacheService.configuration = configuration;\n\n\t\t\t// The entity cache must be constructed as an empty array, to allow the user to place watchers on it.\n\t\t\t// We must never replace the cache with a new array, we must always manipulate the existing one.\n\t\t\t// Otherwise watchers will not behave as the user expects them to.\n\t\t\t/* @type {Array<configuration.model>} */\n\t\t\t_cacheService.entityCache = [];\n\t\t\t// The raw cache is data that hasn't been deserialized and is used internally.\n\t\t\t_cacheService.__entityCacheRaw = null;\n\n\t\t\t// TODO: Using deferreds is an anti-pattern and probably provides no value here.\n\t\t\t_cacheService.__dataAvailableDeferred = $q.defer();\n\t\t\t_cacheService.__objectsAvailableDeferred = $q.defer();\n\t\t\t// A promise that is resolved once initial data synchronization has taken place.\n\t\t\t_cacheService.dataAvailable = _cacheService.__dataAvailableDeferred.promise;\n\t\t\t// A promise that is resolved once the received data is extended to models.\n\t\t\t_cacheService.objectsAvailable = _cacheService.__objectsAvailableDeferred.promise;\n\n\t\t\t// Use $http by default and expose it on the service.\n\t\t\t// This allows the user to set a different, possibly decorated, HTTP interface for this service.\n\t\t\t_cacheService.httpInterface = $http;\n\t\t\t// Do the same for our logger.\n\t\t\t_cacheService.logInterface = $log;\n\t\t\t// The scope on which we broadcast all our relevant events.\n\t\t\t_cacheService.scope = $rootScope;\n\t\t\t// Keep a reference to $q.\n\t\t\t_cacheService.q = $q;\n\n\t\t\t// Prefix log messages with this string.\n\t\t\t_cacheService.logPrefix = \"absync:\" + name.toLocaleUpperCase() + \" \";\n\n\t\t\t// If enabled, entities received in response to a create or update API call, will be put into the cache.\n\t\t\t// Otherwise, absync will wait for them to be published through the websocket channel.\n\t\t\t_cacheService.forceEarlyCacheUpdate = false;\n\n\t\t\t// Expose the serializer/deserializer so that they can be adjusted at any time.\n\t\t\t_cacheService.serializer = serializeModel;\n\t\t\t_cacheService.deserializer = deserializeModel;\n\n\t\t\t// Tell absync to register an event listener for both our entity and its collection.\n\t\t\t// When we receive these events, we broadcast an equal Angular event on the root scope.\n\t\t\t// This way the user can already peek at the data (manipulating it is discouraged though).\n\t\t\tabsync.on( configuration.entityName, _cacheService.__onEntityOnWebsocket.bind( _cacheService ) );\n\t\t\tabsync.on( configuration.collectionName, _cacheService.__onCollectionOnWebsocket.bind( _cacheService ) );\n\n\t\t\t// Now we listen on the root scope for the same events we're firing above.\n\t\t\t// This is where our own absync synchronization logic kicks in.\n\t\t\t$rootScope.$on( configuration.entityName, _cacheService.__onEntityReceived.bind( _cacheService ) );\n\t\t\t$rootScope.$on( configuration.collectionName, _cacheService.__onCollectionReceived.bind( _cacheService ) );\n\n\t\t\t// Wait for data to be available.\n\t\t\t_cacheService.dataAvailable\n\t\t\t\t.then( _cacheService.__onDataAvailable.bind( _cacheService ) );\n\n\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"service was instantiated.\" );\n\t\t}\r\n\t\tCacheService.$inject = [\"$http\", \"$injector\", \"$log\", \"$q\", \"$rootScope\", \"absync\"];\n\n\t\t/**\n\t\t * Invoked when an entity is received on a websocket.\n\t\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t\t * @param {Object} message\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onEntityOnWebsocket = function CacheService$__onEntityOnWebsocket( message ) {\n\t\t\tvar _cacheService = this;\n\t\t\t_cacheService.scope.$broadcast( configuration.entityName, message[ configuration.entityName ] );\n\t\t};\n\n\t\t/**\n\t\t * Invoked when a collection is received on a websocket.\n\t\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t\t * @param {Object} message\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onCollectionOnWebsocket = function CacheService$__onCollectionOnWebsocket( message ) {\n\t\t\tvar _cacheService = this;\n\t\t\t_cacheService.scope.$broadcast( configuration.collectionName, message[ configuration.collectionName ] );\n\t\t};\n\n\t\t/**\n\t\t * Event handler for when the initial badge of raw data becomes available.\n\t\t * @param {Array<Object>} rawData\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onDataAvailable = function CacheService$__onDataAvailable( rawData ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// _cacheService.entityCache is expected to be an empty array.\n\t\t\t// We initialize it in the constructor to an empty array and we don't expect any writes to have\n\t\t\t// happened to it. In case writes *did* happen, we assume that whoever wrote to it knows what\n\t\t\t// they're doing.\n\t\t\trawData[ configuration.collectionName ].forEach( deserializeCollectionEntry );\n\n\t\t\t// Resolve our \"objects are available\" deferred.\n\t\t\t// TODO: We could just as well initialize objectAvailable to the return value of this call block.\n\t\t\t_cacheService.__objectsAvailableDeferred.resolve( _cacheService.entityCache );\n\n\t\t\t// Notify the rest of the application about a fresh collection.\n\t\t\t_cacheService.scope.$broadcast( \"collectionNew\", {\n\t\t\t\tservice : _cacheService,\n\t\t\t\tcache   : _cacheService.entityCache\n\t\t\t} );\n\n\t\t\tfunction deserializeCollectionEntry( rawEntity ) {\n\t\t\t\t_cacheService.entityCache.push( _cacheService.deserializer( rawEntity ) );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Event handler for when an entity is received on the root scope.\n\t\t * @param {Object} event The event object.\n\t\t * @param {Object} args The raw object as it was read from the wire.\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onEntityReceived = function CacheService$__onEntityReceived( event, args ) {\n\t\t\tvar _cacheService = this;\n\t\t\tvar _entityReceived = args;\n\n\t\t\t// Determine if the received record consists ONLY of an id property,\n\t\t\t// which would mean that this record was deleted from the backend.\n\t\t\tif( 1 === Object.keys( _entityReceived ).length && _entityReceived.hasOwnProperty( \"id\" ) ) {\n\t\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"Entity was deleted from the server. Updating cache…\" );\n\t\t\t\t_cacheService.__removeEntityFromCache( _entityReceived.id );\n\n\t\t\t} else {\n\t\t\t\t_cacheService.logInterface.debug( _cacheService.logPrefix + \"Entity was updated on the server. Updating cache…\" );\n\t\t\t\t_cacheService.__updateCacheWithEntity( _cacheService.deserializer( _entityReceived ) );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Event handler for when a collection is received on the root scope.\n\t\t * @param {Object} event The event object.\n\t\t * @param {Array<Object>} args The raw collection as it was read from the wire.\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onCollectionReceived = function CacheService$__onCollectionReceived( event, args ) {\n\t\t\tvar _cacheService = this;\n\t\t\tvar _collectionReceived = args;\n\n\t\t\t// When we're receiving a full collection, all data we currently have in our cache is useless.\n\t\t\t// We reset the length of the array here, because assigning a new array would possibly conflict\n\t\t\t// with watchers placed on the original object.\n\t\t\t_cacheService.entityCache.length = 0;\n\n\t\t\t// Deserialize the received data and place the models in our cache.\n\t\t\t_collectionReceived.forEach( addEntityToCache );\n\n\t\t\tfunction addEntityToCache( entityReceived ) {\n\t\t\t\tvar deserialized = _cacheService.deserializer( entityReceived );\n\t\t\t\t_cacheService.__updateCacheWithEntity( deserialized );\n\t\t\t}\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Ensure that the cached collection is retrieved from the server.\n\t\t * @param {Boolean} [forceReload=false] Should the data be loaded, even if the service already has a local cache?\n\t\t * @returns {Promise<Array<configuration.model>>|IPromise<Array>|IPromise<void>}\n\t\t */\n\t\tCacheService.prototype.ensureLoaded = function CacheService$ensureLoaded( forceReload ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tforceReload = (forceReload === true);\n\n\t\t\t// We only perform any loading, if we don't have raw data cached yet, or if we're forced.\n\t\t\tif( null === _cacheService.__entityCacheRaw || forceReload ) {\n\t\t\t\t_cacheService.__entityCacheRaw = [];\n\n\t\t\t\t// If the user did not provide information necessary to work with a collection, immediately return\n\t\t\t\t// a promise for an empty collection. The user could still use read() to grab individual entities.\n\t\t\t\tif( !configuration.collectionName || !configuration.collectionUri ) {\n\t\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\t\treturn _cacheService.q.when( [] );\n\t\t\t\t}\n\n\t\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"Retrieving '\" + configuration.collectionName + \"' collection…\" );\n\t\t\t\t_cacheService.httpInterface\n\t\t\t\t\t.get( configuration.collectionUri )\n\t\t\t\t\t.then( onCollectionReceived, onCollectionRetrievalFailure );\n\t\t\t}\n\n\t\t\t// Return a promise that is resolved once the data was read and converted to models.\n\t\t\t// When the promise is resolved, it will return a reference to the entity cache.\n\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t//noinspection JSValidateTypes\n\t\t\treturn _cacheService.q.all(\n\t\t\t\t[\n\t\t\t\t\t_cacheService.dataAvailable,\n\t\t\t\t\t_cacheService.objectsAvailable\n\t\t\t\t] )\n\t\t\t\t.then( function dataAvailable() {\n\t\t\t\t\treturn _cacheService.entityCache;\n\t\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Invoked when the collection was received from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onCollectionReceived( serverResponse ) {\n\t\t\t\tif( !serverResponse.data[ configuration.collectionName ] ) {\n\t\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.collectionName + \"'.\" );\n\t\t\t\t}\n\n\t\t\t\t_cacheService.__entityCacheRaw = serverResponse.data;\n\t\t\t\t_cacheService.__dataAvailableDeferred.resolve( serverResponse.data );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to retrieve the collection from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onCollectionRetrievalFailure( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( _cacheService.logPrefix + \"Unable to retrieve the collection from the server.\", serverResponse );\n\t\t\t\t_cacheService.__entityCacheRaw = null;\n\t\t\t\t_cacheService.scope.$emit( \"absyncError\", serverResponse );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Read a single entity from the cache, or load it from the server if required.\n\t\t * The entity will be placed into the cache.\n\t\t * @param {String} id The ID of the entity to retrieve.\n\t\t * @param {Boolean} [forceReload=false] Should the entity be retrieved from the server, even if it is already in the cache?\n\t\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>}\n\t\t */\n\t\tCacheService.prototype.read = function CacheService$read( id, forceReload ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tforceReload = (forceReload === true);\n\n\t\t\tif( !forceReload ) {\n\t\t\t\t// Check if the entity is in the cache and return instantly if found.\n\t\t\t\tfor( var entityIndex = 0, entity = _cacheService.entityCache[ 0 ];\n\t\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t\t     ++entityIndex, entity = _cacheService.entityCache[ entityIndex ] ) {\n\t\t\t\t\tif( entity.id === id ) {\n\t\t\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\t\t\treturn _cacheService.q.when( entity );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Grab the entity from the backend.\n\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t//noinspection JSValidateTypes\n\t\t\treturn _cacheService.httpInterface\n\t\t\t\t.get( configuration.entityUri + \"/\" + id )\n\t\t\t\t.then( onEntityRetrieved, onEntityRetrievalFailure );\n\n\t\t\t/**\n\t\t\t * Invoked when the entity was retrieved from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityRetrieved( serverResponse ) {\n\t\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t\t}\n\n\t\t\t\t// Deserialize the object and place it into the cache.\n\t\t\t\t// We do not need to check here if the object already exists in the cache.\n\t\t\t\t// While it could be possible that the same entity is retrieved multiple times, __updateCacheWithEntity\n\t\t\t\t// will not insert duplicated into the cache.\n\t\t\t\tvar deserialized = _cacheService.deserializer( serverResponse.data[ configuration.entityName ] );\n\t\t\t\t_cacheService.__updateCacheWithEntity( deserialized );\n\t\t\t\treturn deserialized;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityRetrievalFailure( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( _cacheService.logPrefix + \"Unable to retrieve entity with ID '\" + id + \"' from the server.\", serverResponse );\n\t\t\t\t_cacheService.scope.$emit( \"absyncError\", serverResponse );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Updates an entity and persists it to the backend and the cache.\n\t\t * @param {configuration.model} entity\n\t\t * @return {Promise<configuration.model>|IPromise<TResult>} A promise that will be resolved with the updated entity.\n\t\t */\n\t\tCacheService.prototype.update = function CacheService$update( entity ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\t\tvar reduced = _cacheService.reduceComplex( entity );\n\t\t\t// Now serialize the object.\n\t\t\tvar serialized = _cacheService.serializer( reduced );\n\n\t\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\t\tvar wrappedEntity = {};\n\t\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\t\t//noinspection JSUnresolvedVariable\n\t\t\tif( \"undefined\" !== typeof( entity.id ) ) {\n\t\t\t\t// TODO: Remove the JSValidateTypes noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes,JSUnresolvedVariable\n\t\t\t\treturn _cacheService.httpInterface\n\t\t\t\t\t.put( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\n\t\t\t} else {\n\t\t\t\t// Create a new entity\n\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\treturn _cacheService.httpInterface\n\t\t\t\t\t.post( configuration.collectionUri, wrappedEntity )\n\t\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when the entity was stored on the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction afterEntityStored( serverResponse ) {\n\t\t\t\t// Writing an entity to the backend will usually invoke an update event to be\n\t\t\t\t// broadcast over websockets, where we would also retrieve the updated record.\n\t\t\t\t// We still put the updated record we receive here into the cache to ensure early consistency.\n\t\t\t\t// TODO: This might actually not be optimal. Consider only handling the websocket update.\n\t\t\t\tif( serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\t\tvar newEntity = _cacheService.deserializer( serverResponse.data[ configuration.entityName ] );\n\n\t\t\t\t\t// If early cache updates are forced, put the return entity into the cache.\n\t\t\t\t\tif( _cacheService.forceEarlyCacheUpdate ) {\n\t\t\t\t\t\t_cacheService.__updateCacheWithEntity( newEntity );\n\t\t\t\t\t}\n\t\t\t\t\treturn newEntity;\n\t\t\t\t}\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to store the entity on the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityStorageFailure( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( _cacheService.logPrefix + \"Unable to store entity on the server.\", serverResponse );\n\t\t\t\t_cacheService.logInterface.error( serverResponse );\n\t\t\t}\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Creates a new entity and persists it to the backend and the cache.\n\t\t */\n\t\tCacheService.prototype.create = CacheService.prototype.update;\n\n\t\t/**\n\t\t * Remove an entity from the cache and have it deleted on the backend.\n\t\t * @param {Object} entity\n\t\t */\n\t\tCacheService.prototype.delete = function CacheService$delete( entity ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tvar entityId = entity.id;\n\t\t\treturn _cacheService.httpInterface\n\t\t\t\t.delete( configuration.entityUri + \"/\" + entityId )\n\t\t\t\t.success( onEntityDeleted )\n\t\t\t\t.error( onEntityDeletionFailed );\n\n\t\t\t//noinspection JSUnusedLocalSymbols\n\t\t\t/**\n\t\t\t * Invoked when the entity was deleted from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityDeleted( serverResponse ) {\n\t\t\t\treturn _cacheService.__removeEntityFromCache( entityId );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to delete the entity from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityDeletionFailed( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( serverResponse.data );\n\t\t\t\tthrow new Error( \"Unable to delete entity.\" );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Put an entity into the cache or update the existing record if the entity was already in the cache.\n\t\t * @param {Object} entityToCache\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__updateCacheWithEntity = function CacheService$__updateCacheWithEntity( entityToCache ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"Updating entity in cache…\" );\n\n\t\t\tvar found = false;\n\t\t\tfor( var entityIndex = 0, entity = _cacheService.entityCache[ 0 ];\n\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t     ++entityIndex, entity = _cacheService.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id == entityToCache.id ) {\n\t\t\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\t\tentity  : _cacheService.entityCache[ entityIndex ],\n\t\t\t\t\t\t\tupdated : entityToCache\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t// Use the \"copyFrom\" method on the entity, if it exists, otherwise use naive approach.\n\t\t\t\t\tvar targetEntity = _cacheService.entityCache[ entityIndex ];\n\t\t\t\t\t//noinspection JSUnresolvedVariable\n\t\t\t\t\tif( typeof targetEntity.copyFrom === \"function\" ) {\n\t\t\t\t\t\t//noinspection JSUnresolvedFunction\n\t\t\t\t\t\ttargetEntity.copyFrom( entityToCache );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangular.extend( targetEntity, entityToCache );\n\t\t\t\t\t}\n\n\t\t\t\t\tfound = true;\n\n\t\t\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\t\tentity  : _cacheService.entityCache[ entityIndex ]\n\t\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the entity wasn't found in our records, it's a new entity.\n\t\t\tif( !found ) {\n\t\t\t\t_cacheService.entityCache.push( entityToCache );\n\t\t\t\t_cacheService.scope.$broadcast( \"entityNew\", {\n\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\tentity  : entityToCache\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Removes an entity from the internal cache. The entity is not removed from the backend.\n\t\t * @param {String} id The ID of the entity to remove from the cache.\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__removeEntityFromCache = function CacheService$__removeEntityFromCache( id ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tfor( var entityIndex = 0, entity = _cacheService.entityCache[ 0 ];\n\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t     ++entityIndex, entity = _cacheService.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id == id ) {\n\t\t\t\t\t// Before removing the entity, allow the user to react.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"beforeEntityRemoved\", {\n\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\tentity  : entity\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Remove the entity from the cache.\n\t\t\t\t\t_cacheService.entityCache.splice( entityIndex, 1 );\n\n\t\t\t\t\t// Send another event to allow the user to take note of the removal.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"entityRemoved\", {\n\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\tentity  : entity\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Retrieve an associative array of all cached entities, which uses the ID of the entity records as the key in the array.\n\t\t * This is a convenience method that is not utilized internally.\n\t\t * @returns {Array<configuration.model>}\n\t\t */\n\t\tCacheService.prototype.lookupTableById = function CacheService$lookupTableById() {\n\t\t\tvar _cacheService = this;\n\n\t\t\t//TODO: Keep a copy of the lookup table and only update it when the cached data updates\n\t\t\tvar lookupTable = [];\n\t\t\tfor( var entityIndex = 0;\n\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t     ++entityIndex ) {\n\t\t\t\tlookupTable[ _cacheService.entityCache[ entityIndex ].id ] = _cacheService.entityCache[ entityIndex ];\n\t\t\t}\n\t\t\treturn lookupTable;\n\t\t};\n\n\t\t/**\n\t\t * Reduce instances of complex types within an entity with their respective IDs.\n\t\t * Note that no type checks are being performed. Every nested object with an \"id\" property is treated as a complex type.\n\t\t * @param {Object} entity The entity that should have its complex member reduced.\n\t\t * @param {Boolean} [arrayInsteadOfObject=false] true if the manipulated entity is an array; false if it's an object.\n\t\t * @returns {Object|Array} A copy of the input entity, with complex type instances replaced with their respective ID.\n\t\t */\n\t\tCacheService.prototype.reduceComplex = function CacheService$reduceComplex( entity, arrayInsteadOfObject ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tvar result = arrayInsteadOfObject ? [] : {};\n\t\t\tfor( var propertyName in entity ) {\n\t\t\t\tif( !entity.hasOwnProperty( propertyName ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse for nested arrays.\n\t\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\t\tresult[ propertyName ] = _cacheService.reduceComplex( entity[ propertyName ], true );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Replace complex type with its ID.\n\t\t\t\tif( entity[ propertyName ] && entity[ propertyName ].id ) {\n\t\t\t\t\tresult[ propertyName ] = entity[ propertyName ].id;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Just copy over the plain property.\n\t\t\t\tresult[ propertyName ] = entity[ propertyName ];\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Populate references to complex types in an instance.\n\t\t * @param {Object} entity The entity that should be manipulated.\n\t\t * @param {String} propertyName The name of the property of entity which should be populated.\n\t\t * @param {CacheService} cache An instance of another caching service that can provide the complex\n\t\t * type instances which are being referenced in entity.\n\t\t * @param {Boolean} [force=false] If true, all complex types will be replaced with references to the\n\t\t * instances in cache; otherwise, only properties that are string representations of complex type IDs will be replaced.\n\t\t * @returns {IPromise<TResult>|IPromise<any[]>|IPromise<{}>}\n\t\t */\n\t\tCacheService.prototype.populateComplex = function CacheService$populateComplex( entity, propertyName, cache, force ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// If the target property is an array, ...\n\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\t// ...map the elements in the array to promises.\n\t\t\t\tvar promises = entity[ propertyName ].map( mapElementToPromise );\n\n\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\treturn _cacheService.q.all( promises );\n\n\t\t\t} else {\n\t\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\t\tif( typeof entity[ propertyName ] !== \"string\" ) {\n\t\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\t\tif( force && typeof entity[ propertyName ] === \"object\" && typeof entity[ propertyName ].id === \"string\" ) {\n\t\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\t\tentity[ propertyName ] = entity[ propertyName ].id;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\t\t\treturn _cacheService.q.when( false );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\treturn cache.read( entity[ propertyName ] )\n\t\t\t\t\t.then( onComplexRetrieved );\n\t\t\t}\n\n\t\t\t//noinspection JSUnusedLocalSymbols\n\t\t\tfunction mapElementToPromise( element, index ) {\n\t\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\t\tif( typeof entity[ propertyName ][ index ] !== \"string\" ) {\n\t\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\t\tif( force && typeof entity[ propertyName ][ index ] === \"object\" && typeof entity[ propertyName ][ index ].id === \"string\" ) {\n\t\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\t\tentity[ propertyName ][ index ] = entity[ propertyName ][ index ].id;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _cacheService.q.when( false );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\t\treturn cache.read( entity[ propertyName ][ index ] )\n\t\t\t\t\t.then( onComplexRetrieved );\n\n\t\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t\t// When the complex was retrieved, store it back into the array.\n\t\t\t\t\tentity[ propertyName ][ index ] = complex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t// When the complex was retrieved, store it back into the entity.\n\t\t\t\tentity[ propertyName ] = complex;\n\t\t\t}\n\t\t};\n\n\t\treturn CacheService;\n\t}\n\n\tfunction serializationNoop( model ) {\n\t\treturn model;\n\t}\n\n}());\n;(function( undefined ) {\n\t\"use strict\";\n\n\tangular\n\t\t.module( \"absync\" )\n\t\t.service( \"AbsyncServiceConfiguration\", AbsyncServiceConfigurationFactory );\n\n\tfunction AbsyncServiceConfigurationFactory() {\n\t\treturn AbsyncServiceConfiguration;\n\t}\n\n\t/**\n\t * Configuration for an absync service.\n\t * Using this type is entirely optional. Providing a hash with the same configuration options will work just fine.\n\t * @param {Object|String} model Reference to a constructor for the model type, or it's name.\n\t * If a name is given, absync will try to retrieve instances of the type through injection.\n\t * @param {String} collectionUri The REST API URI where the collection can be found.\n\t * Must not end with /\n\t * @param {String} entityUri The REST API URI where single entities out of the collection can be found.\n\t * Must not end with /\n\t * @param {String} [collectionName] The name of the collection. Uses the model name suffixed with \"s\" by default.\n\t * Using the default value is not recommended.\n\t * @param {String} [entityName] The name of an entity. Uses the model name by default.\n\t * Using the default value is not recommended.\n\t * @param {Function} [deserialize] A function that takes an object received from the server and turns it into a model.\n\t * By default, absync will just store the raw object without extending it to the model type.\n\t * Deserializers operate on the actual data received from the websocket.\n\t * @param {Function} [serialize] A function that takes a model and turns it into something the server expects.\n\t * By default, absync will just send the complete model.\n\t * Serializers operate on a copy of the actual model, which already had complex members reduced to their IDs.\n\t * @param {Function} [injector] An injector to use for model instantiation. Uses $injector by default.\n\t * Usually, you don't need to provide an alternative here.\n\t * @constructor\n\t */\n\tfunction AbsyncServiceConfiguration( model, collectionUri, entityUri, collectionName, entityName, deserialize, serialize, injector ) {\n\t\tthis.model = model;\n\t\tthis.collectionUri = collectionUri;\n\t\tthis.entityUri = entityUri;\n\n\t\tvar _modelName = model.prototype.constructor.name.toLowerCase();\n\t\tthis.collectionName = collectionName || ( _modelName + \"s\" );\n\t\tthis.entityName = entityName || _modelName;\n\n\t\tthis.deserialize = deserialize || undefined;\n\t\tthis.serialize = serialize || undefined;\n\n\t\tthis.injector = injector || undefined;\n\t}\n\n}());\n","(function( undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * Please make note of the following conventions:\n\t * 1. Function-scope local variables must be prefixed with a single underscore.\n\t *    This indicates a temporary variable.\n\t * 2. Private variables that are persisted onto publicly accessible entities must be prefixed with two underscores.\n\t *    This indicates a publicly visible, private variable.\n\t *    Hiding private variables, by using closures, is discouraged.\n\t *    Modifying these values from outside of absync is discouraged, but should be respected whenever possible.\n\t */\n\n\tangular\n\t\t.module( \"absync\" )\n\t\t.constant( \"absyncCache\", getServiceConstructor );\n\n\t//TODO: Remove this noinspection when WebStorm 11 is available.\n\t//noinspection JSValidateJSDoc\n\t/**\n\t * A closure to make the configuration available to the cache service.\n\t * @param {String} name The name of the service.\n\t * @param {AbsyncServiceConfiguration} configuration The configuration for this service.\n\t * @returns {CacheService}\n\t */\n\tfunction getServiceConstructor( name, configuration ) {\n\t\t// There is no code here, other than the CacheService definition, followed by \"return CacheService;\"\n\n\t\t//noinspection JSValidateJSDoc\n\t\t/**\n\t\t * This service factory is the core of absync.\n\t\t * It returns a CacheService instance that is specialized to the given configuration.\n\t\t * This service will handle keep the stored collection in sync.\n\t\t * @param {angular.IHttpService|Object} $http\n\t\t * @param {angular.auto.IInjectorService|Object} $injector\n\t\t * @param {angular.ILogService|Object} $log\n\t\t * @param {angular.IQService|Object} $q\n\t\t * @param {angular.IRootScopeService|Object} $rootScope\n\t\t * @param {AbsyncService} absync\n\t\t * @returns {CacheService}\n\t\t * @ngInject\n\t\t */\n\t\tfunction CacheService( $http, $injector, $log, $q, $rootScope, absync ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// Retrieve a reference to the model of the collection that is being cached.\n\t\t\tvar _injector = configuration.injector || $injector;\n\t\t\tvar _injectorHasModel = _injector.has( configuration.model );\n\t\t\tif( !_injectorHasModel ) {\n\t\t\t\tthrow new Error( \"Unable to construct the '\" + name + \"' service, because the referenced model '\" + configuration.model + \"' is not available for injection.\" );\n\t\t\t}\n\t\t\tvar _model = (typeof configuration.model === \"string\" ) ? _injector.get( configuration.model ) : configuration.model;\n\n\t\t\t// Retrieve the serialization methods.\n\t\t\tvar serializeModel = _model.serialize || configuration.serialize || serializationNoop;\n\t\t\tvar deserializeModel = _model.deserialize || configuration.deserialize || serializationNoop;\n\n\t\t\t// Store configuration.\n\t\t\t_cacheService.name = name;\n\t\t\t_cacheService.configuration = configuration;\n\n\t\t\t// The entity cache must be constructed as an empty array, to allow the user to place watchers on it.\n\t\t\t// We must never replace the cache with a new array, we must always manipulate the existing one.\n\t\t\t// Otherwise watchers will not behave as the user expects them to.\n\t\t\t/* @type {Array<configuration.model>} */\n\t\t\t_cacheService.entityCache = [];\n\t\t\t// The raw cache is data that hasn't been deserialized and is used internally.\n\t\t\t_cacheService.__entityCacheRaw = null;\n\n\t\t\t// TODO: Using deferreds is an anti-pattern and probably provides no value here.\n\t\t\t_cacheService.__dataAvailableDeferred = $q.defer();\n\t\t\t_cacheService.__objectsAvailableDeferred = $q.defer();\n\t\t\t// A promise that is resolved once initial data synchronization has taken place.\n\t\t\t_cacheService.dataAvailable = _cacheService.__dataAvailableDeferred.promise;\n\t\t\t// A promise that is resolved once the received data is extended to models.\n\t\t\t_cacheService.objectsAvailable = _cacheService.__objectsAvailableDeferred.promise;\n\n\t\t\t// Use $http by default and expose it on the service.\n\t\t\t// This allows the user to set a different, possibly decorated, HTTP interface for this service.\n\t\t\t_cacheService.httpInterface = $http;\n\t\t\t// Do the same for our logger.\n\t\t\t_cacheService.logInterface = $log;\n\t\t\t// The scope on which we broadcast all our relevant events.\n\t\t\t_cacheService.scope = $rootScope;\n\t\t\t// Keep a reference to $q.\n\t\t\t_cacheService.q = $q;\n\n\t\t\t// Prefix log messages with this string.\n\t\t\t_cacheService.logPrefix = \"absync:\" + name.toLocaleUpperCase() + \" \";\n\n\t\t\t// If enabled, entities received in response to a create or update API call, will be put into the cache.\n\t\t\t// Otherwise, absync will wait for them to be published through the websocket channel.\n\t\t\t_cacheService.forceEarlyCacheUpdate = false;\n\n\t\t\t// Expose the serializer/deserializer so that they can be adjusted at any time.\n\t\t\t_cacheService.serializer = serializeModel;\n\t\t\t_cacheService.deserializer = deserializeModel;\n\n\t\t\t// Tell absync to register an event listener for both our entity and its collection.\n\t\t\t// When we receive these events, we broadcast an equal Angular event on the root scope.\n\t\t\t// This way the user can already peek at the data (manipulating it is discouraged though).\n\t\t\tabsync.on( configuration.entityName, _cacheService.__onEntityOnWebsocket.bind( _cacheService ) );\n\t\t\tabsync.on( configuration.collectionName, _cacheService.__onCollectionOnWebsocket.bind( _cacheService ) );\n\n\t\t\t// Now we listen on the root scope for the same events we're firing above.\n\t\t\t// This is where our own absync synchronization logic kicks in.\n\t\t\t$rootScope.$on( configuration.entityName, _cacheService.__onEntityReceived.bind( _cacheService ) );\n\t\t\t$rootScope.$on( configuration.collectionName, _cacheService.__onCollectionReceived.bind( _cacheService ) );\n\n\t\t\t// Wait for data to be available.\n\t\t\t_cacheService.dataAvailable\n\t\t\t\t.then( _cacheService.__onDataAvailable.bind( _cacheService ) );\n\n\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"service was instantiated.\" );\n\t\t}\n\n\t\t/**\n\t\t * Invoked when an entity is received on a websocket.\n\t\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t\t * @param {Object} message\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onEntityOnWebsocket = function CacheService$__onEntityOnWebsocket( message ) {\n\t\t\tvar _cacheService = this;\n\t\t\t_cacheService.scope.$broadcast( configuration.entityName, message[ configuration.entityName ] );\n\t\t};\n\n\t\t/**\n\t\t * Invoked when a collection is received on a websocket.\n\t\t * Translates the websocket event to an Angular event and broadcasts it on the scope.\n\t\t * @param {Object} message\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onCollectionOnWebsocket = function CacheService$__onCollectionOnWebsocket( message ) {\n\t\t\tvar _cacheService = this;\n\t\t\t_cacheService.scope.$broadcast( configuration.collectionName, message[ configuration.collectionName ] );\n\t\t};\n\n\t\t/**\n\t\t * Event handler for when the initial badge of raw data becomes available.\n\t\t * @param {Array<Object>} rawData\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onDataAvailable = function CacheService$__onDataAvailable( rawData ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// _cacheService.entityCache is expected to be an empty array.\n\t\t\t// We initialize it in the constructor to an empty array and we don't expect any writes to have\n\t\t\t// happened to it. In case writes *did* happen, we assume that whoever wrote to it knows what\n\t\t\t// they're doing.\n\t\t\trawData[ configuration.collectionName ].forEach( deserializeCollectionEntry );\n\n\t\t\t// Resolve our \"objects are available\" deferred.\n\t\t\t// TODO: We could just as well initialize objectAvailable to the return value of this call block.\n\t\t\t_cacheService.__objectsAvailableDeferred.resolve( _cacheService.entityCache );\n\n\t\t\t// Notify the rest of the application about a fresh collection.\n\t\t\t_cacheService.scope.$broadcast( \"collectionNew\", {\n\t\t\t\tservice : _cacheService,\n\t\t\t\tcache   : _cacheService.entityCache\n\t\t\t} );\n\n\t\t\tfunction deserializeCollectionEntry( rawEntity ) {\n\t\t\t\t_cacheService.entityCache.push( _cacheService.deserializer( rawEntity ) );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Event handler for when an entity is received on the root scope.\n\t\t * @param {Object} event The event object.\n\t\t * @param {Object} args The raw object as it was read from the wire.\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onEntityReceived = function CacheService$__onEntityReceived( event, args ) {\n\t\t\tvar _cacheService = this;\n\t\t\tvar _entityReceived = args;\n\n\t\t\t// Determine if the received record consists ONLY of an id property,\n\t\t\t// which would mean that this record was deleted from the backend.\n\t\t\tif( 1 === Object.keys( _entityReceived ).length && _entityReceived.hasOwnProperty( \"id\" ) ) {\n\t\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"Entity was deleted from the server. Updating cache…\" );\n\t\t\t\t_cacheService.__removeEntityFromCache( _entityReceived.id );\n\n\t\t\t} else {\n\t\t\t\t_cacheService.logInterface.debug( _cacheService.logPrefix + \"Entity was updated on the server. Updating cache…\" );\n\t\t\t\t_cacheService.__updateCacheWithEntity( _cacheService.deserializer( _entityReceived ) );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Event handler for when a collection is received on the root scope.\n\t\t * @param {Object} event The event object.\n\t\t * @param {Array<Object>} args The raw collection as it was read from the wire.\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__onCollectionReceived = function CacheService$__onCollectionReceived( event, args ) {\n\t\t\tvar _cacheService = this;\n\t\t\tvar _collectionReceived = args;\n\n\t\t\t// When we're receiving a full collection, all data we currently have in our cache is useless.\n\t\t\t// We reset the length of the array here, because assigning a new array would possibly conflict\n\t\t\t// with watchers placed on the original object.\n\t\t\t_cacheService.entityCache.length = 0;\n\n\t\t\t// Deserialize the received data and place the models in our cache.\n\t\t\t_collectionReceived.forEach( addEntityToCache );\n\n\t\t\tfunction addEntityToCache( entityReceived ) {\n\t\t\t\tvar deserialized = _cacheService.deserializer( entityReceived );\n\t\t\t\t_cacheService.__updateCacheWithEntity( deserialized );\n\t\t\t}\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Ensure that the cached collection is retrieved from the server.\n\t\t * @param {Boolean} [forceReload=false] Should the data be loaded, even if the service already has a local cache?\n\t\t * @returns {Promise<Array<configuration.model>>|IPromise<Array>|IPromise<void>}\n\t\t */\n\t\tCacheService.prototype.ensureLoaded = function CacheService$ensureLoaded( forceReload ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tforceReload = (forceReload === true);\n\n\t\t\t// We only perform any loading, if we don't have raw data cached yet, or if we're forced.\n\t\t\tif( null === _cacheService.__entityCacheRaw || forceReload ) {\n\t\t\t\t_cacheService.__entityCacheRaw = [];\n\n\t\t\t\t// If the user did not provide information necessary to work with a collection, immediately return\n\t\t\t\t// a promise for an empty collection. The user could still use read() to grab individual entities.\n\t\t\t\tif( !configuration.collectionName || !configuration.collectionUri ) {\n\t\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\t\treturn _cacheService.q.when( [] );\n\t\t\t\t}\n\n\t\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"Retrieving '\" + configuration.collectionName + \"' collection…\" );\n\t\t\t\t_cacheService.httpInterface\n\t\t\t\t\t.get( configuration.collectionUri )\n\t\t\t\t\t.then( onCollectionReceived, onCollectionRetrievalFailure );\n\t\t\t}\n\n\t\t\t// Return a promise that is resolved once the data was read and converted to models.\n\t\t\t// When the promise is resolved, it will return a reference to the entity cache.\n\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t//noinspection JSValidateTypes\n\t\t\treturn _cacheService.q.all(\n\t\t\t\t[\n\t\t\t\t\t_cacheService.dataAvailable,\n\t\t\t\t\t_cacheService.objectsAvailable\n\t\t\t\t] )\n\t\t\t\t.then( function dataAvailable() {\n\t\t\t\t\treturn _cacheService.entityCache;\n\t\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Invoked when the collection was received from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onCollectionReceived( serverResponse ) {\n\t\t\t\tif( !serverResponse.data[ configuration.collectionName ] ) {\n\t\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.collectionName + \"'.\" );\n\t\t\t\t}\n\n\t\t\t\t_cacheService.__entityCacheRaw = serverResponse.data;\n\t\t\t\t_cacheService.__dataAvailableDeferred.resolve( serverResponse.data );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to retrieve the collection from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onCollectionRetrievalFailure( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( _cacheService.logPrefix + \"Unable to retrieve the collection from the server.\", serverResponse );\n\t\t\t\t_cacheService.__entityCacheRaw = null;\n\t\t\t\t_cacheService.scope.$emit( \"absyncError\", serverResponse );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Read a single entity from the cache, or load it from the server if required.\n\t\t * The entity will be placed into the cache.\n\t\t * @param {String} id The ID of the entity to retrieve.\n\t\t * @param {Boolean} [forceReload=false] Should the entity be retrieved from the server, even if it is already in the cache?\n\t\t * @returns {Promise<configuration.model>|IPromise<TResult>|IPromise<void>}\n\t\t */\n\t\tCacheService.prototype.read = function CacheService$read( id, forceReload ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tforceReload = (forceReload === true);\n\n\t\t\tif( !forceReload ) {\n\t\t\t\t// Check if the entity is in the cache and return instantly if found.\n\t\t\t\tfor( var entityIndex = 0, entity = _cacheService.entityCache[ 0 ];\n\t\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t\t     ++entityIndex, entity = _cacheService.entityCache[ entityIndex ] ) {\n\t\t\t\t\tif( entity.id === id ) {\n\t\t\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\t\t\treturn _cacheService.q.when( entity );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Grab the entity from the backend.\n\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t//noinspection JSValidateTypes\n\t\t\treturn _cacheService.httpInterface\n\t\t\t\t.get( configuration.entityUri + \"/\" + id )\n\t\t\t\t.then( onEntityRetrieved, onEntityRetrievalFailure );\n\n\t\t\t/**\n\t\t\t * Invoked when the entity was retrieved from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityRetrieved( serverResponse ) {\n\t\t\t\tif( !serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t\t}\n\n\t\t\t\t// Deserialize the object and place it into the cache.\n\t\t\t\t// We do not need to check here if the object already exists in the cache.\n\t\t\t\t// While it could be possible that the same entity is retrieved multiple times, __updateCacheWithEntity\n\t\t\t\t// will not insert duplicated into the cache.\n\t\t\t\tvar deserialized = _cacheService.deserializer( serverResponse.data[ configuration.entityName ] );\n\t\t\t\t_cacheService.__updateCacheWithEntity( deserialized );\n\t\t\t\treturn deserialized;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to retrieve the entity from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityRetrievalFailure( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( _cacheService.logPrefix + \"Unable to retrieve entity with ID '\" + id + \"' from the server.\", serverResponse );\n\t\t\t\t_cacheService.scope.$emit( \"absyncError\", serverResponse );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Updates an entity and persists it to the backend and the cache.\n\t\t * @param {configuration.model} entity\n\t\t * @return {Promise<configuration.model>|IPromise<TResult>} A promise that will be resolved with the updated entity.\n\t\t */\n\t\tCacheService.prototype.update = function CacheService$update( entity ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// First create a copy of the object, which has complex properties reduced to their respective IDs.\n\t\t\tvar reduced = _cacheService.reduceComplex( entity );\n\t\t\t// Now serialize the object.\n\t\t\tvar serialized = _cacheService.serializer( reduced );\n\n\t\t\t// Wrap the entity in a new object, with a single property, named after the entity type.\n\t\t\tvar wrappedEntity = {};\n\t\t\twrappedEntity[ configuration.entityName ] = serialized;\n\n\t\t\t// Check if the entity has an \"id\" property, if it has, we will update. Otherwise, we create.\n\t\t\t//noinspection JSUnresolvedVariable\n\t\t\tif( \"undefined\" !== typeof( entity.id ) ) {\n\t\t\t\t// TODO: Remove the JSValidateTypes noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes,JSUnresolvedVariable\n\t\t\t\treturn _cacheService.httpInterface\n\t\t\t\t\t.put( configuration.entityUri + \"/\" + entity.id, wrappedEntity )\n\t\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\n\t\t\t} else {\n\t\t\t\t// Create a new entity\n\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\treturn _cacheService.httpInterface\n\t\t\t\t\t.post( configuration.collectionUri, wrappedEntity )\n\t\t\t\t\t.then( afterEntityStored, onEntityStorageFailure );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when the entity was stored on the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction afterEntityStored( serverResponse ) {\n\t\t\t\t// Writing an entity to the backend will usually invoke an update event to be\n\t\t\t\t// broadcast over websockets, where we would also retrieve the updated record.\n\t\t\t\t// We still put the updated record we receive here into the cache to ensure early consistency.\n\t\t\t\t// TODO: This might actually not be optimal. Consider only handling the websocket update.\n\t\t\t\tif( serverResponse.data[ configuration.entityName ] ) {\n\t\t\t\t\tvar newEntity = _cacheService.deserializer( serverResponse.data[ configuration.entityName ] );\n\n\t\t\t\t\t// If early cache updates are forced, put the return entity into the cache.\n\t\t\t\t\tif( _cacheService.forceEarlyCacheUpdate ) {\n\t\t\t\t\t\t_cacheService.__updateCacheWithEntity( newEntity );\n\t\t\t\t\t}\n\t\t\t\t\treturn newEntity;\n\t\t\t\t}\n\t\t\t\tthrow new Error( \"The response from the server was not in the expected format. It should have a member named '\" + configuration.entityName + \"'.\" );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to store the entity on the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityStorageFailure( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( _cacheService.logPrefix + \"Unable to store entity on the server.\", serverResponse );\n\t\t\t\t_cacheService.logInterface.error( serverResponse );\n\t\t\t}\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Creates a new entity and persists it to the backend and the cache.\n\t\t */\n\t\tCacheService.prototype.create = CacheService.prototype.update;\n\n\t\t/**\n\t\t * Remove an entity from the cache and have it deleted on the backend.\n\t\t * @param {Object} entity\n\t\t */\n\t\tCacheService.prototype.delete = function CacheService$delete( entity ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tvar entityId = entity.id;\n\t\t\treturn _cacheService.httpInterface\n\t\t\t\t.delete( configuration.entityUri + \"/\" + entityId )\n\t\t\t\t.success( onEntityDeleted )\n\t\t\t\t.error( onEntityDeletionFailed );\n\n\t\t\t//noinspection JSUnusedLocalSymbols\n\t\t\t/**\n\t\t\t * Invoked when the entity was deleted from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityDeleted( serverResponse ) {\n\t\t\t\treturn _cacheService.__removeEntityFromCache( entityId );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Invoked when there was an error while trying to delete the entity from the server.\n\t\t\t * @param {angular.IHttpPromiseCallbackArg|Object} serverResponse The reply sent from the server.\n\t\t\t */\n\t\t\tfunction onEntityDeletionFailed( serverResponse ) {\n\t\t\t\t_cacheService.logInterface.error( serverResponse.data );\n\t\t\t\tthrow new Error( \"Unable to delete entity.\" );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Put an entity into the cache or update the existing record if the entity was already in the cache.\n\t\t * @param {Object} entityToCache\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__updateCacheWithEntity = function CacheService$__updateCacheWithEntity( entityToCache ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t_cacheService.logInterface.info( _cacheService.logPrefix + \"Updating entity in cache…\" );\n\n\t\t\tvar found = false;\n\t\t\tfor( var entityIndex = 0, entity = _cacheService.entityCache[ 0 ];\n\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t     ++entityIndex, entity = _cacheService.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id == entityToCache.id ) {\n\t\t\t\t\t// Allow the user to intervene in the update process, before updating the entity.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"beforeEntityUpdated\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\t\tentity  : _cacheService.entityCache[ entityIndex ],\n\t\t\t\t\t\t\tupdated : entityToCache\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t// Use the \"copyFrom\" method on the entity, if it exists, otherwise use naive approach.\n\t\t\t\t\tvar targetEntity = _cacheService.entityCache[ entityIndex ];\n\t\t\t\t\t//noinspection JSUnresolvedVariable\n\t\t\t\t\tif( typeof targetEntity.copyFrom === \"function\" ) {\n\t\t\t\t\t\t//noinspection JSUnresolvedFunction\n\t\t\t\t\t\ttargetEntity.copyFrom( entityToCache );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangular.extend( targetEntity, entityToCache );\n\t\t\t\t\t}\n\n\t\t\t\t\tfound = true;\n\n\t\t\t\t\t// After updating the entity, send another event to allow the user to react.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"entityUpdated\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\t\tentity  : _cacheService.entityCache[ entityIndex ]\n\t\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the entity wasn't found in our records, it's a new entity.\n\t\t\tif( !found ) {\n\t\t\t\t_cacheService.entityCache.push( entityToCache );\n\t\t\t\t_cacheService.scope.$broadcast( \"entityNew\", {\n\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\tentity  : entityToCache\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Removes an entity from the internal cache. The entity is not removed from the backend.\n\t\t * @param {String} id The ID of the entity to remove from the cache.\n\t\t * @private\n\t\t */\n\t\tCacheService.prototype.__removeEntityFromCache = function CacheService$__removeEntityFromCache( id ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tfor( var entityIndex = 0, entity = _cacheService.entityCache[ 0 ];\n\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t     ++entityIndex, entity = _cacheService.entityCache[ entityIndex ] ) {\n\t\t\t\tif( entity.id == id ) {\n\t\t\t\t\t// Before removing the entity, allow the user to react.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"beforeEntityRemoved\", {\n\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\tentity  : entity\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Remove the entity from the cache.\n\t\t\t\t\t_cacheService.entityCache.splice( entityIndex, 1 );\n\n\t\t\t\t\t// Send another event to allow the user to take note of the removal.\n\t\t\t\t\t_cacheService.scope.$broadcast( \"entityRemoved\", {\n\t\t\t\t\t\tservice : _cacheService,\n\t\t\t\t\t\tcache   : _cacheService.entityCache,\n\t\t\t\t\t\tentity  : entity\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Retrieve an associative array of all cached entities, which uses the ID of the entity records as the key in the array.\n\t\t * This is a convenience method that is not utilized internally.\n\t\t * @returns {Array<configuration.model>}\n\t\t */\n\t\tCacheService.prototype.lookupTableById = function CacheService$lookupTableById() {\n\t\t\tvar _cacheService = this;\n\n\t\t\t//TODO: Keep a copy of the lookup table and only update it when the cached data updates\n\t\t\tvar lookupTable = [];\n\t\t\tfor( var entityIndex = 0;\n\t\t\t     entityIndex < _cacheService.entityCache.length;\n\t\t\t     ++entityIndex ) {\n\t\t\t\tlookupTable[ _cacheService.entityCache[ entityIndex ].id ] = _cacheService.entityCache[ entityIndex ];\n\t\t\t}\n\t\t\treturn lookupTable;\n\t\t};\n\n\t\t/**\n\t\t * Reduce instances of complex types within an entity with their respective IDs.\n\t\t * Note that no type checks are being performed. Every nested object with an \"id\" property is treated as a complex type.\n\t\t * @param {Object} entity The entity that should have its complex member reduced.\n\t\t * @param {Boolean} [arrayInsteadOfObject=false] true if the manipulated entity is an array; false if it's an object.\n\t\t * @returns {Object|Array} A copy of the input entity, with complex type instances replaced with their respective ID.\n\t\t */\n\t\tCacheService.prototype.reduceComplex = function CacheService$reduceComplex( entity, arrayInsteadOfObject ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\tvar result = arrayInsteadOfObject ? [] : {};\n\t\t\tfor( var propertyName in entity ) {\n\t\t\t\tif( !entity.hasOwnProperty( propertyName ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse for nested arrays.\n\t\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\t\tresult[ propertyName ] = _cacheService.reduceComplex( entity[ propertyName ], true );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Replace complex type with its ID.\n\t\t\t\tif( entity[ propertyName ] && entity[ propertyName ].id ) {\n\t\t\t\t\tresult[ propertyName ] = entity[ propertyName ].id;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Just copy over the plain property.\n\t\t\t\tresult[ propertyName ] = entity[ propertyName ];\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\t//noinspection JSUnusedGlobalSymbols\n\t\t/**\n\t\t * Populate references to complex types in an instance.\n\t\t * @param {Object} entity The entity that should be manipulated.\n\t\t * @param {String} propertyName The name of the property of entity which should be populated.\n\t\t * @param {CacheService} cache An instance of another caching service that can provide the complex\n\t\t * type instances which are being referenced in entity.\n\t\t * @param {Boolean} [force=false] If true, all complex types will be replaced with references to the\n\t\t * instances in cache; otherwise, only properties that are string representations of complex type IDs will be replaced.\n\t\t * @returns {IPromise<TResult>|IPromise<any[]>|IPromise<{}>}\n\t\t */\n\t\tCacheService.prototype.populateComplex = function CacheService$populateComplex( entity, propertyName, cache, force ) {\n\t\t\tvar _cacheService = this;\n\n\t\t\t// If the target property is an array, ...\n\t\t\tif( Array.isArray( entity[ propertyName ] ) ) {\n\t\t\t\t// ...map the elements in the array to promises.\n\t\t\t\tvar promises = entity[ propertyName ].map( mapElementToPromise );\n\n\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\treturn _cacheService.q.all( promises );\n\n\t\t\t} else {\n\t\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\t\tif( typeof entity[ propertyName ] !== \"string\" ) {\n\t\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\t\tif( force && typeof entity[ propertyName ] === \"object\" && typeof entity[ propertyName ].id === \"string\" ) {\n\t\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\t\tentity[ propertyName ] = entity[ propertyName ].id;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\t\t\treturn _cacheService.q.when( false );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\t\t// TODO: Remove this noinspection when https://youtrack.jetbrains.com/issue/WEB-16518 is fixed.\n\t\t\t\t//noinspection JSValidateTypes\n\t\t\t\treturn cache.read( entity[ propertyName ] )\n\t\t\t\t\t.then( onComplexRetrieved );\n\t\t\t}\n\n\t\t\t//noinspection JSUnusedLocalSymbols\n\t\t\tfunction mapElementToPromise( element, index ) {\n\t\t\t\t// We usually assume the properties to be strings (the ID of the referenced complex).\n\t\t\t\tif( typeof entity[ propertyName ][ index ] !== \"string\" ) {\n\t\t\t\t\t// If \"force\" is enabled, we check if this non-string property is an object and has an \"id\" member, which is a string.\n\t\t\t\t\tif( force && typeof entity[ propertyName ][ index ] === \"object\" && typeof entity[ propertyName ][ index ].id === \"string\" ) {\n\t\t\t\t\t\t// If that is true, then we replace the whole object with the ID and continue as usual.\n\t\t\t\t\t\tentity[ propertyName ][ index ] = entity[ propertyName ][ index ].id;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _cacheService.q.when( false );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Treat the property as an ID and read the complex with that ID from the cache.\n\t\t\t\treturn cache.read( entity[ propertyName ][ index ] )\n\t\t\t\t\t.then( onComplexRetrieved );\n\n\t\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t\t// When the complex was retrieved, store it back into the array.\n\t\t\t\t\tentity[ propertyName ][ index ] = complex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onComplexRetrieved( complex ) {\n\t\t\t\t// When the complex was retrieved, store it back into the entity.\n\t\t\t\tentity[ propertyName ] = complex;\n\t\t\t}\n\t\t};\n\n\t\treturn CacheService;\n\t}\n\n\tfunction serializationNoop( model ) {\n\t\treturn model;\n\t}\n\n}());\n","(function( undefined ) {\n\t\"use strict\";\n\n\tangular\n\t\t.module( \"absync\" )\n\t\t.service( \"AbsyncServiceConfiguration\", AbsyncServiceConfigurationFactory );\n\n\tfunction AbsyncServiceConfigurationFactory() {\n\t\treturn AbsyncServiceConfiguration;\n\t}\n\n\t/**\n\t * Configuration for an absync service.\n\t * Using this type is entirely optional. Providing a hash with the same configuration options will work just fine.\n\t * @param {Object|String} model Reference to a constructor for the model type, or it's name.\n\t * If a name is given, absync will try to retrieve instances of the type through injection.\n\t * @param {String} collectionUri The REST API URI where the collection can be found.\n\t * Must not end with /\n\t * @param {String} entityUri The REST API URI where single entities out of the collection can be found.\n\t * Must not end with /\n\t * @param {String} [collectionName] The name of the collection. Uses the model name suffixed with \"s\" by default.\n\t * Using the default value is not recommended.\n\t * @param {String} [entityName] The name of an entity. Uses the model name by default.\n\t * Using the default value is not recommended.\n\t * @param {Function} [deserialize] A function that takes an object received from the server and turns it into a model.\n\t * By default, absync will just store the raw object without extending it to the model type.\n\t * Deserializers operate on the actual data received from the websocket.\n\t * @param {Function} [serialize] A function that takes a model and turns it into something the server expects.\n\t * By default, absync will just send the complete model.\n\t * Serializers operate on a copy of the actual model, which already had complex members reduced to their IDs.\n\t * @param {Function} [injector] An injector to use for model instantiation. Uses $injector by default.\n\t * Usually, you don't need to provide an alternative here.\n\t * @constructor\n\t */\n\tfunction AbsyncServiceConfiguration( model, collectionUri, entityUri, collectionName, entityName, deserialize, serialize, injector ) {\n\t\tthis.model = model;\n\t\tthis.collectionUri = collectionUri;\n\t\tthis.entityUri = entityUri;\n\n\t\tvar _modelName = model.prototype.constructor.name.toLowerCase();\n\t\tthis.collectionName = collectionName || ( _modelName + \"s\" );\n\t\tthis.entityName = entityName || _modelName;\n\n\t\tthis.deserialize = deserialize || undefined;\n\t\tthis.serialize = serialize || undefined;\n\n\t\tthis.injector = injector || undefined;\n\t}\n\n}());\n"],"sourceRoot":"/source/"}